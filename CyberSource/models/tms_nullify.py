# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class TmsNullify(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instrument_identifier_card_number': 'bool',
        'instrument_identifier_card_expiration': 'bool',
        'payment_instrument_card_details': 'bool'
    }

    attribute_map = {
        'instrument_identifier_card_number': 'instrumentIdentifierCardNumber',
        'instrument_identifier_card_expiration': 'instrumentIdentifierCardExpiration',
        'payment_instrument_card_details': 'paymentInstrumentCardDetails'
    }

    def __init__(self, instrument_identifier_card_number=None, instrument_identifier_card_expiration=None, payment_instrument_card_details=None):
        """
        TmsNullify - a model defined in Swagger
        """

        self._instrument_identifier_card_number = None
        self._instrument_identifier_card_expiration = None
        self._payment_instrument_card_details = None

        if instrument_identifier_card_number is not None:
          self.instrument_identifier_card_number = instrument_identifier_card_number
        if instrument_identifier_card_expiration is not None:
          self.instrument_identifier_card_expiration = instrument_identifier_card_expiration
        if payment_instrument_card_details is not None:
          self.payment_instrument_card_details = payment_instrument_card_details

    @property
    def instrument_identifier_card_number(self):
        """
        Gets the instrument_identifier_card_number of this TmsNullify.
        Indicates if the card number should be nullified (i.e. not stored)

        :return: The instrument_identifier_card_number of this TmsNullify.
        :rtype: bool
        """
        return self._instrument_identifier_card_number

    @instrument_identifier_card_number.setter
    def instrument_identifier_card_number(self, instrument_identifier_card_number):
        """
        Sets the instrument_identifier_card_number of this TmsNullify.
        Indicates if the card number should be nullified (i.e. not stored)

        :param instrument_identifier_card_number: The instrument_identifier_card_number of this TmsNullify.
        :type: bool
        """

        self._instrument_identifier_card_number = instrument_identifier_card_number

    @property
    def instrument_identifier_card_expiration(self):
        """
        Gets the instrument_identifier_card_expiration of this TmsNullify.
        Indicates if the expiration date associated to the instrument identifier should be nullified (i.e. not stored)

        :return: The instrument_identifier_card_expiration of this TmsNullify.
        :rtype: bool
        """
        return self._instrument_identifier_card_expiration

    @instrument_identifier_card_expiration.setter
    def instrument_identifier_card_expiration(self, instrument_identifier_card_expiration):
        """
        Sets the instrument_identifier_card_expiration of this TmsNullify.
        Indicates if the expiration date associated to the instrument identifier should be nullified (i.e. not stored)

        :param instrument_identifier_card_expiration: The instrument_identifier_card_expiration of this TmsNullify.
        :type: bool
        """

        self._instrument_identifier_card_expiration = instrument_identifier_card_expiration

    @property
    def payment_instrument_card_details(self):
        """
        Gets the payment_instrument_card_details of this TmsNullify.
        Indicates if the card details should be nullified (i.e. not stored)

        :return: The payment_instrument_card_details of this TmsNullify.
        :rtype: bool
        """
        return self._payment_instrument_card_details

    @payment_instrument_card_details.setter
    def payment_instrument_card_details(self, payment_instrument_card_details):
        """
        Sets the payment_instrument_card_details of this TmsNullify.
        Indicates if the card details should be nullified (i.e. not stored)

        :param payment_instrument_card_details: The payment_instrument_card_details of this TmsNullify.
        :type: bool
        """

        self._payment_instrument_card_details = payment_instrument_card_details

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TmsNullify):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
