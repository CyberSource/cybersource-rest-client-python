# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class Ptsv1pushfundstransferProcessingInformationPayoutsOptions(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_currency': 'str',
        'destination_currency': 'str',
        'source_amount': 'str',
        'retrieval_reference_number': 'str',
        'account_funding_reference_id': 'str'
    }

    attribute_map = {
        'source_currency': 'sourceCurrency',
        'destination_currency': 'destinationCurrency',
        'source_amount': 'sourceAmount',
        'retrieval_reference_number': 'retrievalReferenceNumber',
        'account_funding_reference_id': 'accountFundingReferenceId'
    }

    def __init__(self, source_currency=None, destination_currency=None, source_amount=None, retrieval_reference_number=None, account_funding_reference_id=None):
        """
        Ptsv1pushfundstransferProcessingInformationPayoutsOptions - a model defined in Swagger
        """

        self._source_currency = None
        self._destination_currency = None
        self._source_amount = None
        self._retrieval_reference_number = None
        self._account_funding_reference_id = None

        if source_currency is not None:
          self.source_currency = source_currency
        if destination_currency is not None:
          self.destination_currency = destination_currency
        if source_amount is not None:
          self.source_amount = source_amount
        if retrieval_reference_number is not None:
          self.retrieval_reference_number = retrieval_reference_number
        if account_funding_reference_id is not None:
          self.account_funding_reference_id = account_funding_reference_id

    @property
    def source_currency(self):
        """
        Gets the source_currency of this Ptsv1pushfundstransferProcessingInformationPayoutsOptions.
        Use a 3-character alpha currency code for source currency of the funds transfer.  Required if sending processingInformation.payoutsOptions.sourceAmount.  ISO standard currencies: http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf 

        :return: The source_currency of this Ptsv1pushfundstransferProcessingInformationPayoutsOptions.
        :rtype: str
        """
        return self._source_currency

    @source_currency.setter
    def source_currency(self, source_currency):
        """
        Sets the source_currency of this Ptsv1pushfundstransferProcessingInformationPayoutsOptions.
        Use a 3-character alpha currency code for source currency of the funds transfer.  Required if sending processingInformation.payoutsOptions.sourceAmount.  ISO standard currencies: http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf 

        :param source_currency: The source_currency of this Ptsv1pushfundstransferProcessingInformationPayoutsOptions.
        :type: str
        """

        self._source_currency = source_currency

    @property
    def destination_currency(self):
        """
        Gets the destination_currency of this Ptsv1pushfundstransferProcessingInformationPayoutsOptions.
        Use a 3-character alpha currency code for destination currency of the funds transfer.  Yellow Pepper  Supported for cross border funds transfers.  ISO standard currencies: http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf 

        :return: The destination_currency of this Ptsv1pushfundstransferProcessingInformationPayoutsOptions.
        :rtype: str
        """
        return self._destination_currency

    @destination_currency.setter
    def destination_currency(self, destination_currency):
        """
        Sets the destination_currency of this Ptsv1pushfundstransferProcessingInformationPayoutsOptions.
        Use a 3-character alpha currency code for destination currency of the funds transfer.  Yellow Pepper  Supported for cross border funds transfers.  ISO standard currencies: http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf 

        :param destination_currency: The destination_currency of this Ptsv1pushfundstransferProcessingInformationPayoutsOptions.
        :type: str
        """

        self._destination_currency = destination_currency

    @property
    def source_amount(self):
        """
        Gets the source_amount of this Ptsv1pushfundstransferProcessingInformationPayoutsOptions.
        Source Amount is required in certain markets to identify the transaction amount entered in the sender's currency code prior to FX conversion by the originating entity.  Format:  Minimum Value: 0  Maximum value: 999999999.99  Allowed fractional digits: 2 

        :return: The source_amount of this Ptsv1pushfundstransferProcessingInformationPayoutsOptions.
        :rtype: str
        """
        return self._source_amount

    @source_amount.setter
    def source_amount(self, source_amount):
        """
        Sets the source_amount of this Ptsv1pushfundstransferProcessingInformationPayoutsOptions.
        Source Amount is required in certain markets to identify the transaction amount entered in the sender's currency code prior to FX conversion by the originating entity.  Format:  Minimum Value: 0  Maximum value: 999999999.99  Allowed fractional digits: 2 

        :param source_amount: The source_amount of this Ptsv1pushfundstransferProcessingInformationPayoutsOptions.
        :type: str
        """

        self._source_amount = source_amount

    @property
    def retrieval_reference_number(self):
        """
        Gets the retrieval_reference_number of this Ptsv1pushfundstransferProcessingInformationPayoutsOptions.
        Unique reference number returned by the processor that identifies the transaction at the network. 

        :return: The retrieval_reference_number of this Ptsv1pushfundstransferProcessingInformationPayoutsOptions.
        :rtype: str
        """
        return self._retrieval_reference_number

    @retrieval_reference_number.setter
    def retrieval_reference_number(self, retrieval_reference_number):
        """
        Sets the retrieval_reference_number of this Ptsv1pushfundstransferProcessingInformationPayoutsOptions.
        Unique reference number returned by the processor that identifies the transaction at the network. 

        :param retrieval_reference_number: The retrieval_reference_number of this Ptsv1pushfundstransferProcessingInformationPayoutsOptions.
        :type: str
        """

        self._retrieval_reference_number = retrieval_reference_number

    @property
    def account_funding_reference_id(self):
        """
        Gets the account_funding_reference_id of this Ptsv1pushfundstransferProcessingInformationPayoutsOptions.
        Visa-generated transaction identifier (TID) that is unique for each original authorization and financial request. 

        :return: The account_funding_reference_id of this Ptsv1pushfundstransferProcessingInformationPayoutsOptions.
        :rtype: str
        """
        return self._account_funding_reference_id

    @account_funding_reference_id.setter
    def account_funding_reference_id(self, account_funding_reference_id):
        """
        Sets the account_funding_reference_id of this Ptsv1pushfundstransferProcessingInformationPayoutsOptions.
        Visa-generated transaction identifier (TID) that is unique for each original authorization and financial request. 

        :param account_funding_reference_id: The account_funding_reference_id of this Ptsv1pushfundstransferProcessingInformationPayoutsOptions.
        :type: str
        """

        self._account_funding_reference_id = account_funding_reference_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Ptsv1pushfundstransferProcessingInformationPayoutsOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
