# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class UnderwritingConfigurationMerchantApplication(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_id': 'str',
        'application_status': 'str',
        'products': 'list[UnderwritingConfigurationMerchantApplicationProducts]',
        'campaign_id': 'str',
        'oc_id': 'str',
        'reseller_id': 'str'
    }

    attribute_map = {
        'application_id': 'applicationId',
        'application_status': 'applicationStatus',
        'products': 'products',
        'campaign_id': 'campaignId',
        'oc_id': 'ocId',
        'reseller_id': 'resellerId'
    }

    def __init__(self, application_id=None, application_status=None, products=None, campaign_id=None, oc_id=None, reseller_id=None):
        """
        UnderwritingConfigurationMerchantApplication - a model defined in Swagger
        """

        self._application_id = None
        self._application_status = None
        self._products = None
        self._campaign_id = None
        self._oc_id = None
        self._reseller_id = None

        if application_id is not None:
          self.application_id = application_id
        if application_status is not None:
          self.application_status = application_status
        self.products = products
        if campaign_id is not None:
          self.campaign_id = campaign_id
        if oc_id is not None:
          self.oc_id = oc_id
        if reseller_id is not None:
          self.reseller_id = reseller_id

    @property
    def application_id(self):
        """
        Gets the application_id of this UnderwritingConfigurationMerchantApplication.

        :return: The application_id of this UnderwritingConfigurationMerchantApplication.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """
        Sets the application_id of this UnderwritingConfigurationMerchantApplication.

        :param application_id: The application_id of this UnderwritingConfigurationMerchantApplication.
        :type: str
        """

        self._application_id = application_id

    @property
    def application_status(self):
        """
        Gets the application_status of this UnderwritingConfigurationMerchantApplication.

        :return: The application_status of this UnderwritingConfigurationMerchantApplication.
        :rtype: str
        """
        return self._application_status

    @application_status.setter
    def application_status(self, application_status):
        """
        Sets the application_status of this UnderwritingConfigurationMerchantApplication.

        :param application_status: The application_status of this UnderwritingConfigurationMerchantApplication.
        :type: str
        """

        self._application_status = application_status

    @property
    def products(self):
        """
        Gets the products of this UnderwritingConfigurationMerchantApplication.
        The product(s) that are being underwritten

        :return: The products of this UnderwritingConfigurationMerchantApplication.
        :rtype: list[UnderwritingConfigurationMerchantApplicationProducts]
        """
        return self._products

    @products.setter
    def products(self, products):
        """
        Sets the products of this UnderwritingConfigurationMerchantApplication.
        The product(s) that are being underwritten

        :param products: The products of this UnderwritingConfigurationMerchantApplication.
        :type: list[UnderwritingConfigurationMerchantApplicationProducts]
        """

        self._products = products

    @property
    def campaign_id(self):
        """
        Gets the campaign_id of this UnderwritingConfigurationMerchantApplication.
        Driver Campaign ID, identifies where the application came from

        :return: The campaign_id of this UnderwritingConfigurationMerchantApplication.
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """
        Sets the campaign_id of this UnderwritingConfigurationMerchantApplication.
        Driver Campaign ID, identifies where the application came from

        :param campaign_id: The campaign_id of this UnderwritingConfigurationMerchantApplication.
        :type: str
        """

        self._campaign_id = campaign_id

    @property
    def oc_id(self):
        """
        Gets the oc_id of this UnderwritingConfigurationMerchantApplication.
        Offer CampaignID, used by Sales

        :return: The oc_id of this UnderwritingConfigurationMerchantApplication.
        :rtype: str
        """
        return self._oc_id

    @oc_id.setter
    def oc_id(self, oc_id):
        """
        Sets the oc_id of this UnderwritingConfigurationMerchantApplication.
        Offer CampaignID, used by Sales

        :param oc_id: The oc_id of this UnderwritingConfigurationMerchantApplication.
        :type: str
        """

        self._oc_id = oc_id

    @property
    def reseller_id(self):
        """
        Gets the reseller_id of this UnderwritingConfigurationMerchantApplication.
        ResellerID, used by Sales

        :return: The reseller_id of this UnderwritingConfigurationMerchantApplication.
        :rtype: str
        """
        return self._reseller_id

    @reseller_id.setter
    def reseller_id(self, reseller_id):
        """
        Sets the reseller_id of this UnderwritingConfigurationMerchantApplication.
        ResellerID, used by Sales

        :param reseller_id: The reseller_id of this UnderwritingConfigurationMerchantApplication.
        :type: str
        """

        self._reseller_id = reseller_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UnderwritingConfigurationMerchantApplication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
