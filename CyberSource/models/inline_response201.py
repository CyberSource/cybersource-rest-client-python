# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class InlineResponse201(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'status': 'str',
        'payment_information': 'InlineResponse201PaymentInformation',
        'order_information': 'InlineResponse201OrderInformation'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'payment_information': 'paymentInformation',
        'order_information': 'orderInformation'
    }

    def __init__(self, id=None, status=None, payment_information=None, order_information=None):
        """
        InlineResponse201 - a model defined in Swagger
        """

        self._id = None
        self._status = None
        self._payment_information = None
        self._order_information = None

        if id is not None:
          self.id = id
        if status is not None:
          self.status = status
        if payment_information is not None:
          self.payment_information = payment_information
        if order_information is not None:
          self.order_information = order_information

    @property
    def id(self):
        """
        Gets the id of this InlineResponse201.
        An unique identification number generated by Cybersource to identify the submitted request. Returned by all services. It is also appended to the endpoint of the resource. On incremental authorizations, this value with be the same as the identification number returned in the original authorization response. 

        :return: The id of this InlineResponse201.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this InlineResponse201.
        An unique identification number generated by Cybersource to identify the submitted request. Returned by all services. It is also appended to the endpoint of the resource. On incremental authorizations, this value with be the same as the identification number returned in the original authorization response. 

        :param id: The id of this InlineResponse201.
        :type: str
        """

        self._id = id

    @property
    def status(self):
        """
        Gets the status of this InlineResponse201.
        The status of the request.  Possible values:  - COMPLETED 

        :return: The status of this InlineResponse201.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this InlineResponse201.
        The status of the request.  Possible values:  - COMPLETED 

        :param status: The status of this InlineResponse201.
        :type: str
        """

        self._status = status

    @property
    def payment_information(self):
        """
        Gets the payment_information of this InlineResponse201.

        :return: The payment_information of this InlineResponse201.
        :rtype: InlineResponse201PaymentInformation
        """
        return self._payment_information

    @payment_information.setter
    def payment_information(self, payment_information):
        """
        Sets the payment_information of this InlineResponse201.

        :param payment_information: The payment_information of this InlineResponse201.
        :type: InlineResponse201PaymentInformation
        """

        self._payment_information = payment_information

    @property
    def order_information(self):
        """
        Gets the order_information of this InlineResponse201.

        :return: The order_information of this InlineResponse201.
        :rtype: InlineResponse201OrderInformation
        """
        return self._order_information

    @order_information.setter
    def order_information(self, order_information):
        """
        Sets the order_information of this InlineResponse201.

        :param order_information: The order_information of this InlineResponse201.
        :type: InlineResponse201OrderInformation
        """

        self._order_information = order_information

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse201):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
