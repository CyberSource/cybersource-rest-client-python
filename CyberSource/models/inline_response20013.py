# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class InlineResponse20013(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_reference_information': 'Bavsv1accountvalidationsClientReferenceInformation',
        'request_id': 'str',
        'submit_time_utc': 'str',
        'bank_account_validation': 'TssV2TransactionsGet200ResponseBankAccountValidation'
    }

    attribute_map = {
        'client_reference_information': 'clientReferenceInformation',
        'request_id': 'requestId',
        'submit_time_utc': 'submitTimeUtc',
        'bank_account_validation': 'bankAccountValidation'
    }

    def __init__(self, client_reference_information=None, request_id=None, submit_time_utc=None, bank_account_validation=None):
        """
        InlineResponse20013 - a model defined in Swagger
        """

        self._client_reference_information = None
        self._request_id = None
        self._submit_time_utc = None
        self._bank_account_validation = None

        if client_reference_information is not None:
          self.client_reference_information = client_reference_information
        if request_id is not None:
          self.request_id = request_id
        if submit_time_utc is not None:
          self.submit_time_utc = submit_time_utc
        if bank_account_validation is not None:
          self.bank_account_validation = bank_account_validation

    @property
    def client_reference_information(self):
        """
        Gets the client_reference_information of this InlineResponse20013.

        :return: The client_reference_information of this InlineResponse20013.
        :rtype: Bavsv1accountvalidationsClientReferenceInformation
        """
        return self._client_reference_information

    @client_reference_information.setter
    def client_reference_information(self, client_reference_information):
        """
        Sets the client_reference_information of this InlineResponse20013.

        :param client_reference_information: The client_reference_information of this InlineResponse20013.
        :type: Bavsv1accountvalidationsClientReferenceInformation
        """

        self._client_reference_information = client_reference_information

    @property
    def request_id(self):
        """
        Gets the request_id of this InlineResponse20013.
        Request Id sent as part of the request.

        :return: The request_id of this InlineResponse20013.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """
        Sets the request_id of this InlineResponse20013.
        Request Id sent as part of the request.

        :param request_id: The request_id of this InlineResponse20013.
        :type: str
        """

        self._request_id = request_id

    @property
    def submit_time_utc(self):
        """
        Gets the submit_time_utc of this InlineResponse20013.
        Time of request in UTC.  Format: `YYYY-MM-DDThhmmssZ`, where: - `T`:  Separates the date and the time - `Z`:  Indicates Coordinated Universal Time (UTC), also known as Greenwich Mean Time (GMT)  Example:  `2020-01-11T224757Z` equals January 11, 2020, at 22:47:57 (10:47:57 p.m.) 

        :return: The submit_time_utc of this InlineResponse20013.
        :rtype: str
        """
        return self._submit_time_utc

    @submit_time_utc.setter
    def submit_time_utc(self, submit_time_utc):
        """
        Sets the submit_time_utc of this InlineResponse20013.
        Time of request in UTC.  Format: `YYYY-MM-DDThhmmssZ`, where: - `T`:  Separates the date and the time - `Z`:  Indicates Coordinated Universal Time (UTC), also known as Greenwich Mean Time (GMT)  Example:  `2020-01-11T224757Z` equals January 11, 2020, at 22:47:57 (10:47:57 p.m.) 

        :param submit_time_utc: The submit_time_utc of this InlineResponse20013.
        :type: str
        """

        self._submit_time_utc = submit_time_utc

    @property
    def bank_account_validation(self):
        """
        Gets the bank_account_validation of this InlineResponse20013.

        :return: The bank_account_validation of this InlineResponse20013.
        :rtype: TssV2TransactionsGet200ResponseBankAccountValidation
        """
        return self._bank_account_validation

    @bank_account_validation.setter
    def bank_account_validation(self, bank_account_validation):
        """
        Sets the bank_account_validation of this InlineResponse20013.

        :param bank_account_validation: The bank_account_validation of this InlineResponse20013.
        :type: TssV2TransactionsGet200ResponseBankAccountValidation
        """

        self._bank_account_validation = bank_account_validation

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse20013):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
