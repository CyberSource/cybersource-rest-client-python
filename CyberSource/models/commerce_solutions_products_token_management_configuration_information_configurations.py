# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurations(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parent_profile_id': 'str',
        'vault': 'CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault'
    }

    attribute_map = {
        'parent_profile_id': 'parentProfileId',
        'vault': 'vault'
    }

    def __init__(self, parent_profile_id=None, vault=None):
        """
        CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurations - a model defined in Swagger
        """

        self._parent_profile_id = None
        self._vault = None

        if parent_profile_id is not None:
          self.parent_profile_id = parent_profile_id
        if vault is not None:
          self.vault = vault

    @property
    def parent_profile_id(self):
        """
        Gets the parent_profile_id of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurations.
        Specify the Vault ID to which transacting MID needs to be assigned.Provide Vault ID as seen on EBC Vault management page. If not provided , transacting MID will be assigned to the existing default Vault at merchant's level. If there are no Vaults at merchant level , a new Vault will be created and transacting MID will be assigned to it.

        :return: The parent_profile_id of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurations.
        :rtype: str
        """
        return self._parent_profile_id

    @parent_profile_id.setter
    def parent_profile_id(self, parent_profile_id):
        """
        Sets the parent_profile_id of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurations.
        Specify the Vault ID to which transacting MID needs to be assigned.Provide Vault ID as seen on EBC Vault management page. If not provided , transacting MID will be assigned to the existing default Vault at merchant's level. If there are no Vaults at merchant level , a new Vault will be created and transacting MID will be assigned to it.

        :param parent_profile_id: The parent_profile_id of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurations.
        :type: str
        """

        self._parent_profile_id = parent_profile_id

    @property
    def vault(self):
        """
        Gets the vault of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurations.

        :return: The vault of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurations.
        :rtype: CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault
        """
        return self._vault

    @vault.setter
    def vault(self, vault):
        """
        Sets the vault of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurations.

        :param vault: The vault of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurations.
        :type: CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault
        """

        self._vault = vault

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
