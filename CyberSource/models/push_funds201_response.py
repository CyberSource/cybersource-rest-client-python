# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class PushFunds201Response(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'submit_time_utc': 'str',
        'status': 'str',
        'reconciliation_id': 'str',
        'client_reference_information': 'PushFunds201ResponseClientReferenceInformation',
        'recipient_information': 'PushFunds201ResponseRecipientInformation',
        'merchant_information': 'PushFunds201ResponseMerchantInformation',
        'error_information': 'PushFunds201ResponseErrorInformation',
        'processor_information': 'PushFunds201ResponseProcessorInformation',
        'order_information': 'PushFunds201ResponseOrderInformation',
        'payment_information': 'PushFunds201ResponsePaymentInformation',
        'processing_information': 'PushFunds201ResponseProcessingInformation',
        'links': 'PushFunds201ResponseLinks'
    }

    attribute_map = {
        'id': 'id',
        'submit_time_utc': 'submitTimeUtc',
        'status': 'status',
        'reconciliation_id': 'reconciliationId',
        'client_reference_information': 'clientReferenceInformation',
        'recipient_information': 'recipientInformation',
        'merchant_information': 'merchantInformation',
        'error_information': 'errorInformation',
        'processor_information': 'processorInformation',
        'order_information': 'orderInformation',
        'payment_information': 'paymentInformation',
        'processing_information': 'processingInformation',
        'links': '_links'
    }

    def __init__(self, id=None, submit_time_utc=None, status=None, reconciliation_id=None, client_reference_information=None, recipient_information=None, merchant_information=None, error_information=None, processor_information=None, order_information=None, payment_information=None, processing_information=None, links=None):
        """
        PushFunds201Response - a model defined in Swagger
        """

        self._id = None
        self._submit_time_utc = None
        self._status = None
        self._reconciliation_id = None
        self._client_reference_information = None
        self._recipient_information = None
        self._merchant_information = None
        self._error_information = None
        self._processor_information = None
        self._order_information = None
        self._payment_information = None
        self._processing_information = None
        self._links = None

        if id is not None:
          self.id = id
        if submit_time_utc is not None:
          self.submit_time_utc = submit_time_utc
        if status is not None:
          self.status = status
        if reconciliation_id is not None:
          self.reconciliation_id = reconciliation_id
        if client_reference_information is not None:
          self.client_reference_information = client_reference_information
        if recipient_information is not None:
          self.recipient_information = recipient_information
        if merchant_information is not None:
          self.merchant_information = merchant_information
        if error_information is not None:
          self.error_information = error_information
        if processor_information is not None:
          self.processor_information = processor_information
        if order_information is not None:
          self.order_information = order_information
        if payment_information is not None:
          self.payment_information = payment_information
        if processing_information is not None:
          self.processing_information = processing_information
        if links is not None:
          self.links = links

    @property
    def id(self):
        """
        Gets the id of this PushFunds201Response.
        A unique identification number to identify the submitted request. It is also appended to the endpoint of the resource. 

        :return: The id of this PushFunds201Response.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PushFunds201Response.
        A unique identification number to identify the submitted request. It is also appended to the endpoint of the resource. 

        :param id: The id of this PushFunds201Response.
        :type: str
        """

        self._id = id

    @property
    def submit_time_utc(self):
        """
        Gets the submit_time_utc of this PushFunds201Response.
        Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`  **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC. 

        :return: The submit_time_utc of this PushFunds201Response.
        :rtype: str
        """
        return self._submit_time_utc

    @submit_time_utc.setter
    def submit_time_utc(self, submit_time_utc):
        """
        Sets the submit_time_utc of this PushFunds201Response.
        Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`  **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC. 

        :param submit_time_utc: The submit_time_utc of this PushFunds201Response.
        :type: str
        """

        self._submit_time_utc = submit_time_utc

    @property
    def status(self):
        """
        Gets the status of this PushFunds201Response.
        The status of the submitted transaction.  Possible values: - AUTHORIZED - DECLINED - SERVER_ERROR - INVALID_REQUEST - PARTIAL_AUTHORIZED 

        :return: The status of this PushFunds201Response.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this PushFunds201Response.
        The status of the submitted transaction.  Possible values: - AUTHORIZED - DECLINED - SERVER_ERROR - INVALID_REQUEST - PARTIAL_AUTHORIZED 

        :param status: The status of this PushFunds201Response.
        :type: str
        """

        self._status = status

    @property
    def reconciliation_id(self):
        """
        Gets the reconciliation_id of this PushFunds201Response.
        Cybersource or merchant generated transaction reference number. This is sent to the processor and is echoed back in the response to the merchant. This is This value is used for reconciliation purposes. 

        :return: The reconciliation_id of this PushFunds201Response.
        :rtype: str
        """
        return self._reconciliation_id

    @reconciliation_id.setter
    def reconciliation_id(self, reconciliation_id):
        """
        Sets the reconciliation_id of this PushFunds201Response.
        Cybersource or merchant generated transaction reference number. This is sent to the processor and is echoed back in the response to the merchant. This is This value is used for reconciliation purposes. 

        :param reconciliation_id: The reconciliation_id of this PushFunds201Response.
        :type: str
        """

        self._reconciliation_id = reconciliation_id

    @property
    def client_reference_information(self):
        """
        Gets the client_reference_information of this PushFunds201Response.

        :return: The client_reference_information of this PushFunds201Response.
        :rtype: PushFunds201ResponseClientReferenceInformation
        """
        return self._client_reference_information

    @client_reference_information.setter
    def client_reference_information(self, client_reference_information):
        """
        Sets the client_reference_information of this PushFunds201Response.

        :param client_reference_information: The client_reference_information of this PushFunds201Response.
        :type: PushFunds201ResponseClientReferenceInformation
        """

        self._client_reference_information = client_reference_information

    @property
    def recipient_information(self):
        """
        Gets the recipient_information of this PushFunds201Response.

        :return: The recipient_information of this PushFunds201Response.
        :rtype: PushFunds201ResponseRecipientInformation
        """
        return self._recipient_information

    @recipient_information.setter
    def recipient_information(self, recipient_information):
        """
        Sets the recipient_information of this PushFunds201Response.

        :param recipient_information: The recipient_information of this PushFunds201Response.
        :type: PushFunds201ResponseRecipientInformation
        """

        self._recipient_information = recipient_information

    @property
    def merchant_information(self):
        """
        Gets the merchant_information of this PushFunds201Response.

        :return: The merchant_information of this PushFunds201Response.
        :rtype: PushFunds201ResponseMerchantInformation
        """
        return self._merchant_information

    @merchant_information.setter
    def merchant_information(self, merchant_information):
        """
        Sets the merchant_information of this PushFunds201Response.

        :param merchant_information: The merchant_information of this PushFunds201Response.
        :type: PushFunds201ResponseMerchantInformation
        """

        self._merchant_information = merchant_information

    @property
    def error_information(self):
        """
        Gets the error_information of this PushFunds201Response.

        :return: The error_information of this PushFunds201Response.
        :rtype: PushFunds201ResponseErrorInformation
        """
        return self._error_information

    @error_information.setter
    def error_information(self, error_information):
        """
        Sets the error_information of this PushFunds201Response.

        :param error_information: The error_information of this PushFunds201Response.
        :type: PushFunds201ResponseErrorInformation
        """

        self._error_information = error_information

    @property
    def processor_information(self):
        """
        Gets the processor_information of this PushFunds201Response.

        :return: The processor_information of this PushFunds201Response.
        :rtype: PushFunds201ResponseProcessorInformation
        """
        return self._processor_information

    @processor_information.setter
    def processor_information(self, processor_information):
        """
        Sets the processor_information of this PushFunds201Response.

        :param processor_information: The processor_information of this PushFunds201Response.
        :type: PushFunds201ResponseProcessorInformation
        """

        self._processor_information = processor_information

    @property
    def order_information(self):
        """
        Gets the order_information of this PushFunds201Response.

        :return: The order_information of this PushFunds201Response.
        :rtype: PushFunds201ResponseOrderInformation
        """
        return self._order_information

    @order_information.setter
    def order_information(self, order_information):
        """
        Sets the order_information of this PushFunds201Response.

        :param order_information: The order_information of this PushFunds201Response.
        :type: PushFunds201ResponseOrderInformation
        """

        self._order_information = order_information

    @property
    def payment_information(self):
        """
        Gets the payment_information of this PushFunds201Response.

        :return: The payment_information of this PushFunds201Response.
        :rtype: PushFunds201ResponsePaymentInformation
        """
        return self._payment_information

    @payment_information.setter
    def payment_information(self, payment_information):
        """
        Sets the payment_information of this PushFunds201Response.

        :param payment_information: The payment_information of this PushFunds201Response.
        :type: PushFunds201ResponsePaymentInformation
        """

        self._payment_information = payment_information

    @property
    def processing_information(self):
        """
        Gets the processing_information of this PushFunds201Response.

        :return: The processing_information of this PushFunds201Response.
        :rtype: PushFunds201ResponseProcessingInformation
        """
        return self._processing_information

    @processing_information.setter
    def processing_information(self, processing_information):
        """
        Sets the processing_information of this PushFunds201Response.

        :param processing_information: The processing_information of this PushFunds201Response.
        :type: PushFunds201ResponseProcessingInformation
        """

        self._processing_information = processing_information

    @property
    def links(self):
        """
        Gets the links of this PushFunds201Response.

        :return: The links of this PushFunds201Response.
        :rtype: PushFunds201ResponseLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this PushFunds201Response.

        :param links: The links of this PushFunds201Response.
        :type: PushFunds201ResponseLinks
        """

        self._links = links

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PushFunds201Response):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
