# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class UnderwritingConfigurationSaleRepresentativeInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sales_rep_id': 'str',
        'sales_rep_first_name': 'str',
        'sales_rep_last_name': 'str',
        'sales_rep_email': 'str',
        'sales_rep_numeric_phone_number_country_code': 'str',
        'sales_rep_phone_number': 'str'
    }

    attribute_map = {
        'sales_rep_id': 'salesRepId',
        'sales_rep_first_name': 'salesRepFirstName',
        'sales_rep_last_name': 'salesRepLastName',
        'sales_rep_email': 'salesRepEmail',
        'sales_rep_numeric_phone_number_country_code': 'salesRepNumericPhoneNumberCountryCode',
        'sales_rep_phone_number': 'salesRepPhoneNumber'
    }

    def __init__(self, sales_rep_id=None, sales_rep_first_name=None, sales_rep_last_name=None, sales_rep_email=None, sales_rep_numeric_phone_number_country_code=None, sales_rep_phone_number=None):
        """
        UnderwritingConfigurationSaleRepresentativeInformation - a model defined in Swagger
        """

        self._sales_rep_id = None
        self._sales_rep_first_name = None
        self._sales_rep_last_name = None
        self._sales_rep_email = None
        self._sales_rep_numeric_phone_number_country_code = None
        self._sales_rep_phone_number = None

        self.sales_rep_id = sales_rep_id
        self.sales_rep_first_name = sales_rep_first_name
        self.sales_rep_last_name = sales_rep_last_name
        self.sales_rep_email = sales_rep_email
        self.sales_rep_numeric_phone_number_country_code = sales_rep_numeric_phone_number_country_code
        self.sales_rep_phone_number = sales_rep_phone_number

    @property
    def sales_rep_id(self):
        """
        Gets the sales_rep_id of this UnderwritingConfigurationSaleRepresentativeInformation.
        Sales rep Identifier

        :return: The sales_rep_id of this UnderwritingConfigurationSaleRepresentativeInformation.
        :rtype: str
        """
        return self._sales_rep_id

    @sales_rep_id.setter
    def sales_rep_id(self, sales_rep_id):
        """
        Sets the sales_rep_id of this UnderwritingConfigurationSaleRepresentativeInformation.
        Sales rep Identifier

        :param sales_rep_id: The sales_rep_id of this UnderwritingConfigurationSaleRepresentativeInformation.
        :type: str
        """

        self._sales_rep_id = sales_rep_id

    @property
    def sales_rep_first_name(self):
        """
        Gets the sales_rep_first_name of this UnderwritingConfigurationSaleRepresentativeInformation.
        Sales rep First Name

        :return: The sales_rep_first_name of this UnderwritingConfigurationSaleRepresentativeInformation.
        :rtype: str
        """
        return self._sales_rep_first_name

    @sales_rep_first_name.setter
    def sales_rep_first_name(self, sales_rep_first_name):
        """
        Sets the sales_rep_first_name of this UnderwritingConfigurationSaleRepresentativeInformation.
        Sales rep First Name

        :param sales_rep_first_name: The sales_rep_first_name of this UnderwritingConfigurationSaleRepresentativeInformation.
        :type: str
        """

        self._sales_rep_first_name = sales_rep_first_name

    @property
    def sales_rep_last_name(self):
        """
        Gets the sales_rep_last_name of this UnderwritingConfigurationSaleRepresentativeInformation.
        Sales Rep Last Name

        :return: The sales_rep_last_name of this UnderwritingConfigurationSaleRepresentativeInformation.
        :rtype: str
        """
        return self._sales_rep_last_name

    @sales_rep_last_name.setter
    def sales_rep_last_name(self, sales_rep_last_name):
        """
        Sets the sales_rep_last_name of this UnderwritingConfigurationSaleRepresentativeInformation.
        Sales Rep Last Name

        :param sales_rep_last_name: The sales_rep_last_name of this UnderwritingConfigurationSaleRepresentativeInformation.
        :type: str
        """

        self._sales_rep_last_name = sales_rep_last_name

    @property
    def sales_rep_email(self):
        """
        Gets the sales_rep_email of this UnderwritingConfigurationSaleRepresentativeInformation.
        Sales Rep eMail

        :return: The sales_rep_email of this UnderwritingConfigurationSaleRepresentativeInformation.
        :rtype: str
        """
        return self._sales_rep_email

    @sales_rep_email.setter
    def sales_rep_email(self, sales_rep_email):
        """
        Sets the sales_rep_email of this UnderwritingConfigurationSaleRepresentativeInformation.
        Sales Rep eMail

        :param sales_rep_email: The sales_rep_email of this UnderwritingConfigurationSaleRepresentativeInformation.
        :type: str
        """

        self._sales_rep_email = sales_rep_email

    @property
    def sales_rep_numeric_phone_number_country_code(self):
        """
        Gets the sales_rep_numeric_phone_number_country_code of this UnderwritingConfigurationSaleRepresentativeInformation.
        Sales Rep Phone Number Country. Two character country code, ISO 3166-1 alpha-2.

        :return: The sales_rep_numeric_phone_number_country_code of this UnderwritingConfigurationSaleRepresentativeInformation.
        :rtype: str
        """
        return self._sales_rep_numeric_phone_number_country_code

    @sales_rep_numeric_phone_number_country_code.setter
    def sales_rep_numeric_phone_number_country_code(self, sales_rep_numeric_phone_number_country_code):
        """
        Sets the sales_rep_numeric_phone_number_country_code of this UnderwritingConfigurationSaleRepresentativeInformation.
        Sales Rep Phone Number Country. Two character country code, ISO 3166-1 alpha-2.

        :param sales_rep_numeric_phone_number_country_code: The sales_rep_numeric_phone_number_country_code of this UnderwritingConfigurationSaleRepresentativeInformation.
        :type: str
        """

        self._sales_rep_numeric_phone_number_country_code = sales_rep_numeric_phone_number_country_code

    @property
    def sales_rep_phone_number(self):
        """
        Gets the sales_rep_phone_number of this UnderwritingConfigurationSaleRepresentativeInformation.
        Sales Rep Phone

        :return: The sales_rep_phone_number of this UnderwritingConfigurationSaleRepresentativeInformation.
        :rtype: str
        """
        return self._sales_rep_phone_number

    @sales_rep_phone_number.setter
    def sales_rep_phone_number(self, sales_rep_phone_number):
        """
        Sets the sales_rep_phone_number of this UnderwritingConfigurationSaleRepresentativeInformation.
        Sales Rep Phone

        :param sales_rep_phone_number: The sales_rep_phone_number of this UnderwritingConfigurationSaleRepresentativeInformation.
        :type: str
        """

        self._sales_rep_phone_number = sales_rep_phone_number

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UnderwritingConfigurationSaleRepresentativeInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
