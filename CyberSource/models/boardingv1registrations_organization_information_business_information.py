# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Boardingv1registrationsOrganizationInformationBusinessInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'doing_business_as': 'str',
        'description': 'str',
        'start_date': 'date',
        'address': 'Boardingv1registrationsOrganizationInformationBusinessInformationAddress',
        'time_zone': 'str',
        'website_url': 'str',
        'type': 'str',
        'tax_id': 'str',
        'phone_number': 'str',
        'business_contact': 'Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact',
        'technical_contact': 'Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact',
        'emergency_contact': 'Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact',
        'merchant_category_code': 'str'
    }

    attribute_map = {
        'name': 'name',
        'doing_business_as': 'doingBusinessAs',
        'description': 'description',
        'start_date': 'startDate',
        'address': 'address',
        'time_zone': 'timeZone',
        'website_url': 'websiteUrl',
        'type': 'type',
        'tax_id': 'taxId',
        'phone_number': 'phoneNumber',
        'business_contact': 'businessContact',
        'technical_contact': 'technicalContact',
        'emergency_contact': 'emergencyContact',
        'merchant_category_code': 'merchantCategoryCode'
    }

    def __init__(self, name=None, doing_business_as=None, description=None, start_date=None, address=None, time_zone=None, website_url=None, type=None, tax_id=None, phone_number=None, business_contact=None, technical_contact=None, emergency_contact=None, merchant_category_code=None):
        """
        Boardingv1registrationsOrganizationInformationBusinessInformation - a model defined in Swagger
        """

        self._name = None
        self._doing_business_as = None
        self._description = None
        self._start_date = None
        self._address = None
        self._time_zone = None
        self._website_url = None
        self._type = None
        self._tax_id = None
        self._phone_number = None
        self._business_contact = None
        self._technical_contact = None
        self._emergency_contact = None
        self._merchant_category_code = None

        self.name = name
        if doing_business_as is not None:
          self.doing_business_as = doing_business_as
        if description is not None:
          self.description = description
        if start_date is not None:
          self.start_date = start_date
        if address is not None:
          self.address = address
        if time_zone is not None:
          self.time_zone = time_zone
        if website_url is not None:
          self.website_url = website_url
        if type is not None:
          self.type = type
        if tax_id is not None:
          self.tax_id = tax_id
        if phone_number is not None:
          self.phone_number = phone_number
        if business_contact is not None:
          self.business_contact = business_contact
        if technical_contact is not None:
          self.technical_contact = technical_contact
        if emergency_contact is not None:
          self.emergency_contact = emergency_contact
        if merchant_category_code is not None:
          self.merchant_category_code = merchant_category_code

    @property
    def name(self):
        """
        Gets the name of this Boardingv1registrationsOrganizationInformationBusinessInformation.

        :return: The name of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Boardingv1registrationsOrganizationInformationBusinessInformation.

        :param name: The name of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and not re.search('^[0-9a-zA-Z _\\-\\+\\.\\*\\\"\/\'&\\,\\(\\)!$;:?@\\#¡-￿]+$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[0-9a-zA-Z _\\-\\+\\.\\*\\\"\/'&\\,\\(\\)!$;:?@\\#¡-￿]+$/`")

        self._name = name

    @property
    def doing_business_as(self):
        """
        Gets the doing_business_as of this Boardingv1registrationsOrganizationInformationBusinessInformation.

        :return: The doing_business_as of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :rtype: str
        """
        return self._doing_business_as

    @doing_business_as.setter
    def doing_business_as(self, doing_business_as):
        """
        Sets the doing_business_as of this Boardingv1registrationsOrganizationInformationBusinessInformation.

        :param doing_business_as: The doing_business_as of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :type: str
        """
        if doing_business_as is not None and not re.search('^[0-9a-zA-Z _\\-\\+\\.\\*\\\"\/\'&\\,\\(\\)!$;:?@\\#¡-￿]+$', doing_business_as):
            raise ValueError("Invalid value for `doing_business_as`, must be a follow pattern or equal to `/^[0-9a-zA-Z _\\-\\+\\.\\*\\\"\/'&\\,\\(\\)!$;:?@\\#¡-￿]+$/`")

        self._doing_business_as = doing_business_as

    @property
    def description(self):
        """
        Gets the description of this Boardingv1registrationsOrganizationInformationBusinessInformation.

        :return: The description of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Boardingv1registrationsOrganizationInformationBusinessInformation.

        :param description: The description of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :type: str
        """
        if description is not None and not re.search('[À-ÖØ-öø-ǿÀ-ÖØ-öø-ǿ\\n\\ra-zA-Z0-9().\\-_#,;\/\\\\@$:&amp;!?%«»€₣«»€₣ ]{1,}$', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/[À-ÖØ-öø-ǿÀ-ÖØ-öø-ǿ\\n\\ra-zA-Z0-9().\\-_#,;\/\\\\@$:&amp;!?%«»€₣«»€₣ ]{1,}$/`")

        self._description = description

    @property
    def start_date(self):
        """
        Gets the start_date of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        `Format: YYYY-MM-DD` Example 2016-08-11 equals August 11, 2016 

        :return: The start_date of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """
        Sets the start_date of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        `Format: YYYY-MM-DD` Example 2016-08-11 equals August 11, 2016 

        :param start_date: The start_date of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :type: date
        """

        self._start_date = start_date

    @property
    def address(self):
        """
        Gets the address of this Boardingv1registrationsOrganizationInformationBusinessInformation.

        :return: The address of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :rtype: Boardingv1registrationsOrganizationInformationBusinessInformationAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this Boardingv1registrationsOrganizationInformationBusinessInformation.

        :param address: The address of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :type: Boardingv1registrationsOrganizationInformationBusinessInformationAddress
        """

        self._address = address

    @property
    def time_zone(self):
        """
        Gets the time_zone of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        Merchant perferred time zone Possible Values: - 'Pacific/Pago_Pago' - 'Pacific/Honolulu' - 'America/Anchorage' - 'America/Vancouver' - 'America/Los_Angeles' - 'America/Phoenix' - 'America/Edmonton' - 'America/Denver' - 'America/Winnipeg' - 'America/Mexico_City' - 'America/Chicago' - 'America/Bogota' - 'America/Indianapolis' - 'America/New_York' - 'America/La_Paz' - 'America/Halifax' - 'America/St_Johns' - 'America/Buenos_Aires' - 'America/Godthab' - 'America/Sao_Paulo' - 'America/Noronha' - 'Atlantic/Cape_Verde' - 'GMT' - 'Europe/Dublin' - 'Europe/Lisbon' - 'Europe/London' - 'Africa/Tunis' - 'Europe/Vienna' - 'Europe/Brussels' - 'Europe/Zurich' - 'Europe/Prague' - 'Europe/Berlin' - 'Europe/Copenhagen' - 'Europe/Madrid' - 'Europe/Budapest' - 'Europe/Rome' - 'Africa/Tripoli' - 'Europe/Monaco' - 'Europe/Malta' - 'Europe/Amsterdam' - 'Europe/Oslo' - 'Europe/Warsaw' - 'Europe/Stockholm' - 'Europe/Belgrade' - 'Europe/Paris' - 'Africa/Johannesburg' - 'Europe/Minsk' - 'Africa/Cairo' - 'Europe/Helsinki' - 'Europe/Athens' - 'Asia/Jerusalem' - 'Europe/Riga' - 'Europe/Bucharest' - 'Europe/Istanbul' - 'Asia/Riyadh' - 'Europe/Moscow' - 'Asia/Dubai' - 'Asia/Baku' - 'Asia/Tbilisi' - 'Asia/Calcutta' - 'Asia/Katmandu' - 'Asia/Dacca' - 'Asia/Rangoon' - 'Asia/Jakarta' - 'Asia/Saigon' - 'Asia/Bangkok' - 'Australia/Perth' - 'Asia/Hong_Kong' - 'Asia/Macao' - 'Asia/Kuala_Lumpur' - 'Asia/Manila' - 'Asia/Singapore' - 'Asia/Taipei' - 'Asia/Shanghai' - 'Asia/Seoul' - 'Asia/Tokyo' - 'Asia/Yakutsk' - 'Australia/Adelaide' - 'Australia/Brisbane' - 'Australia/Broken_Hill' - 'Australia/Darwin' - 'Australia/Eucla' - 'Australia/Hobart' - 'Australia/Lindeman' - 'Australia/Sydney' - 'Australia/Lord_Howe' - 'Australia/Melbourne' - 'Asia/Magadan' - 'Pacific/Norfolk' - 'Pacific/Auckland' 

        :return: The time_zone of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """
        Sets the time_zone of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        Merchant perferred time zone Possible Values: - 'Pacific/Pago_Pago' - 'Pacific/Honolulu' - 'America/Anchorage' - 'America/Vancouver' - 'America/Los_Angeles' - 'America/Phoenix' - 'America/Edmonton' - 'America/Denver' - 'America/Winnipeg' - 'America/Mexico_City' - 'America/Chicago' - 'America/Bogota' - 'America/Indianapolis' - 'America/New_York' - 'America/La_Paz' - 'America/Halifax' - 'America/St_Johns' - 'America/Buenos_Aires' - 'America/Godthab' - 'America/Sao_Paulo' - 'America/Noronha' - 'Atlantic/Cape_Verde' - 'GMT' - 'Europe/Dublin' - 'Europe/Lisbon' - 'Europe/London' - 'Africa/Tunis' - 'Europe/Vienna' - 'Europe/Brussels' - 'Europe/Zurich' - 'Europe/Prague' - 'Europe/Berlin' - 'Europe/Copenhagen' - 'Europe/Madrid' - 'Europe/Budapest' - 'Europe/Rome' - 'Africa/Tripoli' - 'Europe/Monaco' - 'Europe/Malta' - 'Europe/Amsterdam' - 'Europe/Oslo' - 'Europe/Warsaw' - 'Europe/Stockholm' - 'Europe/Belgrade' - 'Europe/Paris' - 'Africa/Johannesburg' - 'Europe/Minsk' - 'Africa/Cairo' - 'Europe/Helsinki' - 'Europe/Athens' - 'Asia/Jerusalem' - 'Europe/Riga' - 'Europe/Bucharest' - 'Europe/Istanbul' - 'Asia/Riyadh' - 'Europe/Moscow' - 'Asia/Dubai' - 'Asia/Baku' - 'Asia/Tbilisi' - 'Asia/Calcutta' - 'Asia/Katmandu' - 'Asia/Dacca' - 'Asia/Rangoon' - 'Asia/Jakarta' - 'Asia/Saigon' - 'Asia/Bangkok' - 'Australia/Perth' - 'Asia/Hong_Kong' - 'Asia/Macao' - 'Asia/Kuala_Lumpur' - 'Asia/Manila' - 'Asia/Singapore' - 'Asia/Taipei' - 'Asia/Shanghai' - 'Asia/Seoul' - 'Asia/Tokyo' - 'Asia/Yakutsk' - 'Australia/Adelaide' - 'Australia/Brisbane' - 'Australia/Broken_Hill' - 'Australia/Darwin' - 'Australia/Eucla' - 'Australia/Hobart' - 'Australia/Lindeman' - 'Australia/Sydney' - 'Australia/Lord_Howe' - 'Australia/Melbourne' - 'Asia/Magadan' - 'Pacific/Norfolk' - 'Pacific/Auckland' 

        :param time_zone: The time_zone of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :type: str
        """
        allowed_values = ["Pacific/Pago_Pago", "Pacific/Honolulu", "America/Anchorage", "America/Vancouver", "America/Los_Angeles", "America/Phoenix", "America/Edmonton", "America/Denver", "America/Winnipeg", "America/Mexico_City", "America/Chicago", "America/Bogota", "America/Indianapolis", "America/New_York", "America/La_Paz", "America/Halifax", "America/St_Johns", "America/Buenos_Aires", "America/Godthab", "America/Sao_Paulo", "America/Noronha", "Atlantic/Cape_Verde", "GMT", "Europe/Dublin", "Europe/Lisbon", "Europe/London", "Africa/Tunis", "Europe/Vienna", "Europe/Brussels", "Europe/Zurich", "Europe/Prague", "Europe/Berlin", "Europe/Copenhagen", "Europe/Madrid", "Europe/Budapest", "Europe/Rome", "Africa/Tripoli", "Europe/Monaco", "Europe/Malta", "Europe/Amsterdam", "Europe/Oslo", "Europe/Warsaw", "Europe/Stockholm", "Europe/Belgrade", "Europe/Paris", "Africa/Johannesburg", "Europe/Minsk", "Africa/Cairo", "Europe/Helsinki", "Europe/Athens", "Asia/Jerusalem", "Europe/Riga", "Europe/Bucharest", "Europe/Istanbul", "Asia/Riyadh", "Europe/Moscow", "Asia/Dubai", "Asia/Baku", "Asia/Tbilisi", "Asia/Calcutta", "Asia/Katmandu", "Asia/Dacca", "Asia/Rangoon", "Asia/Jakarta", "Asia/Saigon", "Asia/Bangkok", "Australia/Perth", "Asia/Hong_Kong", "Asia/Macao", "Asia/Kuala_Lumpur", "Asia/Manila", "Asia/Singapore", "Asia/Taipei", "Asia/Shanghai", "Asia/Seoul", "Asia/Tokyo", "Asia/Yakutsk", "Australia/Adelaide", "Australia/Brisbane", "Australia/Broken_Hill", "Australia/Darwin", "Australia/Eucla", "Australia/Hobart", "Australia/Lindeman", "Australia/Sydney", "Australia/Lord_Howe", "Australia/Melbourne", "Asia/Magadan", "Pacific/Norfolk", "Pacific/Auckland"]
        if time_zone not in allowed_values:
            raise ValueError(
                "Invalid value for `time_zone` ({0}), must be one of {1}"
                .format(time_zone, allowed_values)
            )

        self._time_zone = time_zone

    @property
    def website_url(self):
        """
        Gets the website_url of this Boardingv1registrationsOrganizationInformationBusinessInformation.

        :return: The website_url of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :rtype: str
        """
        return self._website_url

    @website_url.setter
    def website_url(self, website_url):
        """
        Sets the website_url of this Boardingv1registrationsOrganizationInformationBusinessInformation.

        :param website_url: The website_url of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :type: str
        """
        if website_url is not None and not re.search('\\b((?:https?:\/\/|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\'\".,<>?Â«Â»â€œâ€â€˜â€™]))', website_url):
            raise ValueError("Invalid value for `website_url`, must be a follow pattern or equal to `/\\b((?:https?:\/\/|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\".,<>?Â«Â»â€œâ€â€˜â€™]))/`")

        self._website_url = website_url

    @property
    def type(self):
        """
        Gets the type of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        Business type Possible Values:   - 'PARTNERSHIP'   - 'SOLE_PROPRIETORSHIP'   - 'CORPORATION'   - 'LLC'   - 'NON_PROFIT'   - 'TRUST' 

        :return: The type of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        Business type Possible Values:   - 'PARTNERSHIP'   - 'SOLE_PROPRIETORSHIP'   - 'CORPORATION'   - 'LLC'   - 'NON_PROFIT'   - 'TRUST' 

        :param type: The type of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :type: str
        """
        allowed_values = ["PARTNERSHIP", "SOLE_PROPRIETORSHIP", "CORPORATION", "LLC", "NON_PROFIT", "TRUST"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def tax_id(self):
        """
        Gets the tax_id of this Boardingv1registrationsOrganizationInformationBusinessInformation.

        :return: The tax_id of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :rtype: str
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """
        Sets the tax_id of this Boardingv1registrationsOrganizationInformationBusinessInformation.

        :param tax_id: The tax_id of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :type: str
        """
        if tax_id is not None and not re.search('\\d{9}', tax_id):
            raise ValueError("Invalid value for `tax_id`, must be a follow pattern or equal to `/\\d{9}/`")

        self._tax_id = tax_id

    @property
    def phone_number(self):
        """
        Gets the phone_number of this Boardingv1registrationsOrganizationInformationBusinessInformation.

        :return: The phone_number of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """
        Sets the phone_number of this Boardingv1registrationsOrganizationInformationBusinessInformation.

        :param phone_number: The phone_number of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :type: str
        """
        if phone_number is not None and not re.search('^[0-9a-zA-Z\\\\+\\\\-]+$', phone_number):
            raise ValueError("Invalid value for `phone_number`, must be a follow pattern or equal to `/^[0-9a-zA-Z\\\\+\\\\-]+$/`")

        self._phone_number = phone_number

    @property
    def business_contact(self):
        """
        Gets the business_contact of this Boardingv1registrationsOrganizationInformationBusinessInformation.

        :return: The business_contact of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :rtype: Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact
        """
        return self._business_contact

    @business_contact.setter
    def business_contact(self, business_contact):
        """
        Sets the business_contact of this Boardingv1registrationsOrganizationInformationBusinessInformation.

        :param business_contact: The business_contact of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :type: Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact
        """

        self._business_contact = business_contact

    @property
    def technical_contact(self):
        """
        Gets the technical_contact of this Boardingv1registrationsOrganizationInformationBusinessInformation.

        :return: The technical_contact of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :rtype: Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact
        """
        return self._technical_contact

    @technical_contact.setter
    def technical_contact(self, technical_contact):
        """
        Sets the technical_contact of this Boardingv1registrationsOrganizationInformationBusinessInformation.

        :param technical_contact: The technical_contact of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :type: Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact
        """

        self._technical_contact = technical_contact

    @property
    def emergency_contact(self):
        """
        Gets the emergency_contact of this Boardingv1registrationsOrganizationInformationBusinessInformation.

        :return: The emergency_contact of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :rtype: Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact
        """
        return self._emergency_contact

    @emergency_contact.setter
    def emergency_contact(self, emergency_contact):
        """
        Sets the emergency_contact of this Boardingv1registrationsOrganizationInformationBusinessInformation.

        :param emergency_contact: The emergency_contact of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :type: Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact
        """

        self._emergency_contact = emergency_contact

    @property
    def merchant_category_code(self):
        """
        Gets the merchant_category_code of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        Industry standard Merchant Category Code (MCC)

        :return: The merchant_category_code of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :rtype: str
        """
        return self._merchant_category_code

    @merchant_category_code.setter
    def merchant_category_code(self, merchant_category_code):
        """
        Sets the merchant_category_code of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        Industry standard Merchant Category Code (MCC)

        :param merchant_category_code: The merchant_category_code of this Boardingv1registrationsOrganizationInformationBusinessInformation.
        :type: str
        """
        if merchant_category_code is not None and not re.search('^\\d{3,4}$', merchant_category_code):
            raise ValueError("Invalid value for `merchant_category_code`, must be a follow pattern or equal to `/^\\d{3,4}$/`")

        self._merchant_category_code = merchant_category_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Boardingv1registrationsOrganizationInformationBusinessInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
