# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsBinLookupConfigurationInformationConfigurations(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_payout_options_enabled': 'bool',
        'is_account_prefix_enabled': 'bool'
    }

    attribute_map = {
        'is_payout_options_enabled': 'isPayoutOptionsEnabled',
        'is_account_prefix_enabled': 'isAccountPrefixEnabled'
    }

    def __init__(self, is_payout_options_enabled=None, is_account_prefix_enabled=None):
        """
        Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsBinLookupConfigurationInformationConfigurations - a model defined in Swagger
        """

        self._is_payout_options_enabled = None
        self._is_account_prefix_enabled = None

        if is_payout_options_enabled is not None:
          self.is_payout_options_enabled = is_payout_options_enabled
        if is_account_prefix_enabled is not None:
          self.is_account_prefix_enabled = is_account_prefix_enabled

    @property
    def is_payout_options_enabled(self):
        """
        Gets the is_payout_options_enabled of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsBinLookupConfigurationInformationConfigurations.
        This flag indicates if the merchant is configured to make payout calls

        :return: The is_payout_options_enabled of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsBinLookupConfigurationInformationConfigurations.
        :rtype: bool
        """
        return self._is_payout_options_enabled

    @is_payout_options_enabled.setter
    def is_payout_options_enabled(self, is_payout_options_enabled):
        """
        Sets the is_payout_options_enabled of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsBinLookupConfigurationInformationConfigurations.
        This flag indicates if the merchant is configured to make payout calls

        :param is_payout_options_enabled: The is_payout_options_enabled of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsBinLookupConfigurationInformationConfigurations.
        :type: bool
        """

        self._is_payout_options_enabled = is_payout_options_enabled

    @property
    def is_account_prefix_enabled(self):
        """
        Gets the is_account_prefix_enabled of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsBinLookupConfigurationInformationConfigurations.
        This flag indicates if the merchant is configured to receive account prefix

        :return: The is_account_prefix_enabled of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsBinLookupConfigurationInformationConfigurations.
        :rtype: bool
        """
        return self._is_account_prefix_enabled

    @is_account_prefix_enabled.setter
    def is_account_prefix_enabled(self, is_account_prefix_enabled):
        """
        Sets the is_account_prefix_enabled of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsBinLookupConfigurationInformationConfigurations.
        This flag indicates if the merchant is configured to receive account prefix

        :param is_account_prefix_enabled: The is_account_prefix_enabled of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsBinLookupConfigurationInformationConfigurations.
        :type: bool
        """

        self._is_account_prefix_enabled = is_account_prefix_enabled

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsBinLookupConfigurationInformationConfigurations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
