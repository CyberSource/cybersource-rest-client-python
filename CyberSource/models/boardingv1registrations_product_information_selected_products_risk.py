# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Boardingv1registrationsProductInformationSelectedProductsRisk(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fraud_management_essentials': 'Boardingv1registrationsProductInformationSelectedProductsRiskFraudManagementEssentials',
        'decision_manager': 'Boardingv1registrationsProductInformationSelectedProductsRiskDecisionManager'
    }

    attribute_map = {
        'fraud_management_essentials': 'fraudManagementEssentials',
        'decision_manager': 'decisionManager'
    }

    def __init__(self, fraud_management_essentials=None, decision_manager=None):
        """
        Boardingv1registrationsProductInformationSelectedProductsRisk - a model defined in Swagger
        """

        self._fraud_management_essentials = None
        self._decision_manager = None

        if fraud_management_essentials is not None:
          self.fraud_management_essentials = fraud_management_essentials
        if decision_manager is not None:
          self.decision_manager = decision_manager

    @property
    def fraud_management_essentials(self):
        """
        Gets the fraud_management_essentials of this Boardingv1registrationsProductInformationSelectedProductsRisk.

        :return: The fraud_management_essentials of this Boardingv1registrationsProductInformationSelectedProductsRisk.
        :rtype: Boardingv1registrationsProductInformationSelectedProductsRiskFraudManagementEssentials
        """
        return self._fraud_management_essentials

    @fraud_management_essentials.setter
    def fraud_management_essentials(self, fraud_management_essentials):
        """
        Sets the fraud_management_essentials of this Boardingv1registrationsProductInformationSelectedProductsRisk.

        :param fraud_management_essentials: The fraud_management_essentials of this Boardingv1registrationsProductInformationSelectedProductsRisk.
        :type: Boardingv1registrationsProductInformationSelectedProductsRiskFraudManagementEssentials
        """

        self._fraud_management_essentials = fraud_management_essentials

    @property
    def decision_manager(self):
        """
        Gets the decision_manager of this Boardingv1registrationsProductInformationSelectedProductsRisk.

        :return: The decision_manager of this Boardingv1registrationsProductInformationSelectedProductsRisk.
        :rtype: Boardingv1registrationsProductInformationSelectedProductsRiskDecisionManager
        """
        return self._decision_manager

    @decision_manager.setter
    def decision_manager(self, decision_manager):
        """
        Sets the decision_manager of this Boardingv1registrationsProductInformationSelectedProductsRisk.

        :param decision_manager: The decision_manager of this Boardingv1registrationsProductInformationSelectedProductsRisk.
        :type: Boardingv1registrationsProductInformationSelectedProductsRiskDecisionManager
        """

        self._decision_manager = decision_manager

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Boardingv1registrationsProductInformationSelectedProductsRisk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
