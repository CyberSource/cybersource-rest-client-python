# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Nrtfv1webhookswebhookIdreplaysByDeliveryStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'hours_back': 'int',
        'product_id': 'str',
        'event_type': 'str'
    }

    attribute_map = {
        'status': 'status',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'hours_back': 'hoursBack',
        'product_id': 'productId',
        'event_type': 'eventType'
    }

    def __init__(self, status=None, start_time=None, end_time=None, hours_back=None, product_id=None, event_type=None):
        """
        Nrtfv1webhookswebhookIdreplaysByDeliveryStatus - a model defined in Swagger
        """

        self._status = None
        self._start_time = None
        self._end_time = None
        self._hours_back = None
        self._product_id = None
        self._event_type = None

        if status is not None:
          self.status = status
        if start_time is not None:
          self.start_time = start_time
        if end_time is not None:
          self.end_time = end_time
        if hours_back is not None:
          self.hours_back = hours_back
        if product_id is not None:
          self.product_id = product_id
        if event_type is not None:
          self.event_type = event_type

    @property
    def status(self):
        """
        Gets the status of this Nrtfv1webhookswebhookIdreplaysByDeliveryStatus.
        The status of the webhook. Options are FAILED or RETRY

        :return: The status of this Nrtfv1webhookswebhookIdreplaysByDeliveryStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Nrtfv1webhookswebhookIdreplaysByDeliveryStatus.
        The status of the webhook. Options are FAILED or RETRY

        :param status: The status of this Nrtfv1webhookswebhookIdreplaysByDeliveryStatus.
        :type: str
        """

        self._status = status

    @property
    def start_time(self):
        """
        Gets the start_time of this Nrtfv1webhookswebhookIdreplaysByDeliveryStatus.
        The start time in yyyy-mm-dd hh:mm:ss.ms format. Maximum value is 1 month prior to todays system time.  The difference between Start Time and End Time cannot exceed a 24 hour window within the last month. 

        :return: The start_time of this Nrtfv1webhookswebhookIdreplaysByDeliveryStatus.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this Nrtfv1webhookswebhookIdreplaysByDeliveryStatus.
        The start time in yyyy-mm-dd hh:mm:ss.ms format. Maximum value is 1 month prior to todays system time.  The difference between Start Time and End Time cannot exceed a 24 hour window within the last month. 

        :param start_time: The start_time of this Nrtfv1webhookswebhookIdreplaysByDeliveryStatus.
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """
        Gets the end_time of this Nrtfv1webhookswebhookIdreplaysByDeliveryStatus.
        The end time in yyyy-mm-dd hh:mm:ss.ms format.  The difference between Start Time and End Time cannot exceed a 24 hour window within the last month. 

        :return: The end_time of this Nrtfv1webhookswebhookIdreplaysByDeliveryStatus.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this Nrtfv1webhookswebhookIdreplaysByDeliveryStatus.
        The end time in yyyy-mm-dd hh:mm:ss.ms format.  The difference between Start Time and End Time cannot exceed a 24 hour window within the last month. 

        :param end_time: The end_time of this Nrtfv1webhookswebhookIdreplaysByDeliveryStatus.
        :type: datetime
        """

        self._end_time = end_time

    @property
    def hours_back(self):
        """
        Gets the hours_back of this Nrtfv1webhookswebhookIdreplaysByDeliveryStatus.
        Alternative parameter to startTime/endTime.  It evaluates the startTime using the current system time (endTime) and the hoursBack value (default = 24hrs). 

        :return: The hours_back of this Nrtfv1webhookswebhookIdreplaysByDeliveryStatus.
        :rtype: int
        """
        return self._hours_back

    @hours_back.setter
    def hours_back(self, hours_back):
        """
        Sets the hours_back of this Nrtfv1webhookswebhookIdreplaysByDeliveryStatus.
        Alternative parameter to startTime/endTime.  It evaluates the startTime using the current system time (endTime) and the hoursBack value (default = 24hrs). 

        :param hours_back: The hours_back of this Nrtfv1webhookswebhookIdreplaysByDeliveryStatus.
        :type: int
        """

        self._hours_back = hours_back

    @property
    def product_id(self):
        """
        Gets the product_id of this Nrtfv1webhookswebhookIdreplaysByDeliveryStatus.

        :return: The product_id of this Nrtfv1webhookswebhookIdreplaysByDeliveryStatus.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """
        Sets the product_id of this Nrtfv1webhookswebhookIdreplaysByDeliveryStatus.

        :param product_id: The product_id of this Nrtfv1webhookswebhookIdreplaysByDeliveryStatus.
        :type: str
        """

        self._product_id = product_id

    @property
    def event_type(self):
        """
        Gets the event_type of this Nrtfv1webhookswebhookIdreplaysByDeliveryStatus.

        :return: The event_type of this Nrtfv1webhookswebhookIdreplaysByDeliveryStatus.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """
        Sets the event_type of this Nrtfv1webhookswebhookIdreplaysByDeliveryStatus.

        :param event_type: The event_type of this Nrtfv1webhookswebhookIdreplaysByDeliveryStatus.
        :type: str
        """

        self._event_type = event_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Nrtfv1webhookswebhookIdreplaysByDeliveryStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
