# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurations(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'master_card': 'Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsMasterCard',
        'visa': 'Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsVisa',
        'amex': 'Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsAmex',
        'preferred_day': 'float',
        'days_window': 'float'
    }

    attribute_map = {
        'master_card': 'masterCard',
        'visa': 'visa',
        'amex': 'amex',
        'preferred_day': 'preferredDay',
        'days_window': 'daysWindow'
    }

    def __init__(self, master_card=None, visa=None, amex=None, preferred_day=None, days_window=None):
        """
        Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurations - a model defined in Swagger
        """

        self._master_card = None
        self._visa = None
        self._amex = None
        self._preferred_day = None
        self._days_window = None

        if master_card is not None:
          self.master_card = master_card
        if visa is not None:
          self.visa = visa
        if amex is not None:
          self.amex = amex
        if preferred_day is not None:
          self.preferred_day = preferred_day
        if days_window is not None:
          self.days_window = days_window

    @property
    def master_card(self):
        """
        Gets the master_card of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurations.

        :return: The master_card of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurations.
        :rtype: Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsMasterCard
        """
        return self._master_card

    @master_card.setter
    def master_card(self, master_card):
        """
        Sets the master_card of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurations.

        :param master_card: The master_card of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurations.
        :type: Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsMasterCard
        """

        self._master_card = master_card

    @property
    def visa(self):
        """
        Gets the visa of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurations.

        :return: The visa of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurations.
        :rtype: Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsVisa
        """
        return self._visa

    @visa.setter
    def visa(self, visa):
        """
        Sets the visa of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurations.

        :param visa: The visa of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurations.
        :type: Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsVisa
        """

        self._visa = visa

    @property
    def amex(self):
        """
        Gets the amex of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurations.

        :return: The amex of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurations.
        :rtype: Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsAmex
        """
        return self._amex

    @amex.setter
    def amex(self, amex):
        """
        Sets the amex of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurations.

        :param amex: The amex of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurations.
        :type: Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsAmex
        """

        self._amex = amex

    @property
    def preferred_day(self):
        """
        Gets the preferred_day of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurations.

        :return: The preferred_day of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurations.
        :rtype: float
        """
        return self._preferred_day

    @preferred_day.setter
    def preferred_day(self, preferred_day):
        """
        Sets the preferred_day of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurations.

        :param preferred_day: The preferred_day of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurations.
        :type: float
        """

        self._preferred_day = preferred_day

    @property
    def days_window(self):
        """
        Gets the days_window of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurations.

        :return: The days_window of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurations.
        :rtype: float
        """
        return self._days_window

    @days_window.setter
    def days_window(self, days_window):
        """
        Sets the days_window of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurations.

        :param days_window: The days_window of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurations.
        :type: float
        """

        self._days_window = days_window

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
