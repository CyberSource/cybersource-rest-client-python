# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Boardingv1registrationsOrganizationInformationKYCDepositBankAccount(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_holder_name': 'str',
        'account_type': 'str',
        'account_routing_number': 'str',
        'account_number': 'str'
    }

    attribute_map = {
        'account_holder_name': 'accountHolderName',
        'account_type': 'accountType',
        'account_routing_number': 'accountRoutingNumber',
        'account_number': 'accountNumber'
    }

    def __init__(self, account_holder_name=None, account_type=None, account_routing_number=None, account_number=None):
        """
        Boardingv1registrationsOrganizationInformationKYCDepositBankAccount - a model defined in Swagger
        """

        self._account_holder_name = None
        self._account_type = None
        self._account_routing_number = None
        self._account_number = None

        self.account_holder_name = account_holder_name
        self.account_type = account_type
        self.account_routing_number = account_routing_number
        self.account_number = account_number

    @property
    def account_holder_name(self):
        """
        Gets the account_holder_name of this Boardingv1registrationsOrganizationInformationKYCDepositBankAccount.

        :return: The account_holder_name of this Boardingv1registrationsOrganizationInformationKYCDepositBankAccount.
        :rtype: str
        """
        return self._account_holder_name

    @account_holder_name.setter
    def account_holder_name(self, account_holder_name):
        """
        Sets the account_holder_name of this Boardingv1registrationsOrganizationInformationKYCDepositBankAccount.

        :param account_holder_name: The account_holder_name of this Boardingv1registrationsOrganizationInformationKYCDepositBankAccount.
        :type: str
        """
        if account_holder_name is None:
            raise ValueError("Invalid value for `account_holder_name`, must not be `None`")
        if account_holder_name is not None and not re.search('^[À-ÖØ-öø-ǿÀ-ÖØ-öø-ǿa-zA-Z0-9().\\-_#,;\/\\\\@$:&amp;!?%«»€₣«»€₣ ]{1,}$', account_holder_name):
            raise ValueError("Invalid value for `account_holder_name`, must be a follow pattern or equal to `/^[À-ÖØ-öø-ǿÀ-ÖØ-öø-ǿa-zA-Z0-9().\\-_#,;\/\\\\@$:&amp;!?%«»€₣«»€₣ ]{1,}$/`")

        self._account_holder_name = account_holder_name

    @property
    def account_type(self):
        """
        Gets the account_type of this Boardingv1registrationsOrganizationInformationKYCDepositBankAccount.

        :return: The account_type of this Boardingv1registrationsOrganizationInformationKYCDepositBankAccount.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """
        Sets the account_type of this Boardingv1registrationsOrganizationInformationKYCDepositBankAccount.

        :param account_type: The account_type of this Boardingv1registrationsOrganizationInformationKYCDepositBankAccount.
        :type: str
        """
        if account_type is None:
            raise ValueError("Invalid value for `account_type`, must not be `None`")
        allowed_values = ["checking", "savings", "corporatechecking", "corporatesavings"]
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def account_routing_number(self):
        """
        Gets the account_routing_number of this Boardingv1registrationsOrganizationInformationKYCDepositBankAccount.

        :return: The account_routing_number of this Boardingv1registrationsOrganizationInformationKYCDepositBankAccount.
        :rtype: str
        """
        return self._account_routing_number

    @account_routing_number.setter
    def account_routing_number(self, account_routing_number):
        """
        Sets the account_routing_number of this Boardingv1registrationsOrganizationInformationKYCDepositBankAccount.

        :param account_routing_number: The account_routing_number of this Boardingv1registrationsOrganizationInformationKYCDepositBankAccount.
        :type: str
        """
        if account_routing_number is None:
            raise ValueError("Invalid value for `account_routing_number`, must not be `None`")
        if account_routing_number is not None and not re.search('\\d{9}', account_routing_number):
            raise ValueError("Invalid value for `account_routing_number`, must be a follow pattern or equal to `/\\d{9}/`")

        self._account_routing_number = account_routing_number

    @property
    def account_number(self):
        """
        Gets the account_number of this Boardingv1registrationsOrganizationInformationKYCDepositBankAccount.

        :return: The account_number of this Boardingv1registrationsOrganizationInformationKYCDepositBankAccount.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """
        Sets the account_number of this Boardingv1registrationsOrganizationInformationKYCDepositBankAccount.

        :param account_number: The account_number of this Boardingv1registrationsOrganizationInformationKYCDepositBankAccount.
        :type: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")
        if account_number is not None and not re.search('^\\d{5,17}$', account_number):
            raise ValueError("Invalid value for `account_number`, must be a follow pattern or equal to `/^\\d{5,17}$/`")

        self._account_number = account_number

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Boardingv1registrationsOrganizationInformationKYCDepositBankAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
