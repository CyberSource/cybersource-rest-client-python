# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class NetworkTokenServicesEnablement(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'visa_token_service': 'NetworkTokenServicesEnablementVisaTokenService',
        'mastercard_digital_enablement_service': 'NetworkTokenServicesEnablementMastercardDigitalEnablementService'
    }

    attribute_map = {
        'visa_token_service': 'visaTokenService',
        'mastercard_digital_enablement_service': 'mastercardDigitalEnablementService'
    }

    def __init__(self, visa_token_service=None, mastercard_digital_enablement_service=None):
        """
        NetworkTokenServicesEnablement - a model defined in Swagger
        """

        self._visa_token_service = None
        self._mastercard_digital_enablement_service = None

        if visa_token_service is not None:
          self.visa_token_service = visa_token_service
        if mastercard_digital_enablement_service is not None:
          self.mastercard_digital_enablement_service = mastercard_digital_enablement_service

    @property
    def visa_token_service(self):
        """
        Gets the visa_token_service of this NetworkTokenServicesEnablement.

        :return: The visa_token_service of this NetworkTokenServicesEnablement.
        :rtype: NetworkTokenServicesEnablementVisaTokenService
        """
        return self._visa_token_service

    @visa_token_service.setter
    def visa_token_service(self, visa_token_service):
        """
        Sets the visa_token_service of this NetworkTokenServicesEnablement.

        :param visa_token_service: The visa_token_service of this NetworkTokenServicesEnablement.
        :type: NetworkTokenServicesEnablementVisaTokenService
        """

        self._visa_token_service = visa_token_service

    @property
    def mastercard_digital_enablement_service(self):
        """
        Gets the mastercard_digital_enablement_service of this NetworkTokenServicesEnablement.

        :return: The mastercard_digital_enablement_service of this NetworkTokenServicesEnablement.
        :rtype: NetworkTokenServicesEnablementMastercardDigitalEnablementService
        """
        return self._mastercard_digital_enablement_service

    @mastercard_digital_enablement_service.setter
    def mastercard_digital_enablement_service(self, mastercard_digital_enablement_service):
        """
        Sets the mastercard_digital_enablement_service of this NetworkTokenServicesEnablement.

        :param mastercard_digital_enablement_service: The mastercard_digital_enablement_service of this NetworkTokenServicesEnablement.
        :type: NetworkTokenServicesEnablementMastercardDigitalEnablementService
        """

        self._mastercard_digital_enablement_service = mastercard_digital_enablement_service

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NetworkTokenServicesEnablement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
