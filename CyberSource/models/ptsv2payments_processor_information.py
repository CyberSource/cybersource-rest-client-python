# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class Ptsv2paymentsProcessorInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pre_approval_token': 'str',
        'authorization_options': 'Ptsv2paymentsProcessorInformationAuthorizationOptions',
        'reversal': 'Ptsv2paymentsProcessorInformationReversal',
        'network': 'Ptsv2paymentsProcessorInformationReversalNetwork'
    }

    attribute_map = {
        'pre_approval_token': 'preApprovalToken',
        'authorization_options': 'authorizationOptions',
        'reversal': 'reversal',
        'network': 'network'
    }

    def __init__(self, pre_approval_token=None, authorization_options=None, reversal=None, network=None):
        """
        Ptsv2paymentsProcessorInformation - a model defined in Swagger
        """

        self._pre_approval_token = None
        self._authorization_options = None
        self._reversal = None
        self._network = None

        if pre_approval_token is not None:
          self.pre_approval_token = pre_approval_token
        if authorization_options is not None:
          self.authorization_options = authorization_options
        if reversal is not None:
          self.reversal = reversal
        if network is not None:
          self.network = network

    @property
    def pre_approval_token(self):
        """
        Gets the pre_approval_token of this Ptsv2paymentsProcessorInformation.
        Token received in original session service.

        :return: The pre_approval_token of this Ptsv2paymentsProcessorInformation.
        :rtype: str
        """
        return self._pre_approval_token

    @pre_approval_token.setter
    def pre_approval_token(self, pre_approval_token):
        """
        Sets the pre_approval_token of this Ptsv2paymentsProcessorInformation.
        Token received in original session service.

        :param pre_approval_token: The pre_approval_token of this Ptsv2paymentsProcessorInformation.
        :type: str
        """

        self._pre_approval_token = pre_approval_token

    @property
    def authorization_options(self):
        """
        Gets the authorization_options of this Ptsv2paymentsProcessorInformation.

        :return: The authorization_options of this Ptsv2paymentsProcessorInformation.
        :rtype: Ptsv2paymentsProcessorInformationAuthorizationOptions
        """
        return self._authorization_options

    @authorization_options.setter
    def authorization_options(self, authorization_options):
        """
        Sets the authorization_options of this Ptsv2paymentsProcessorInformation.

        :param authorization_options: The authorization_options of this Ptsv2paymentsProcessorInformation.
        :type: Ptsv2paymentsProcessorInformationAuthorizationOptions
        """

        self._authorization_options = authorization_options

    @property
    def reversal(self):
        """
        Gets the reversal of this Ptsv2paymentsProcessorInformation.

        :return: The reversal of this Ptsv2paymentsProcessorInformation.
        :rtype: Ptsv2paymentsProcessorInformationReversal
        """
        return self._reversal

    @reversal.setter
    def reversal(self, reversal):
        """
        Sets the reversal of this Ptsv2paymentsProcessorInformation.

        :param reversal: The reversal of this Ptsv2paymentsProcessorInformation.
        :type: Ptsv2paymentsProcessorInformationReversal
        """

        self._reversal = reversal

    @property
    def network(self):
        """
        Gets the network of this Ptsv2paymentsProcessorInformation.

        :return: The network of this Ptsv2paymentsProcessorInformation.
        :rtype: Ptsv2paymentsProcessorInformationReversalNetwork
        """
        return self._network

    @network.setter
    def network(self, network):
        """
        Sets the network of this Ptsv2paymentsProcessorInformation.

        :param network: The network of this Ptsv2paymentsProcessorInformation.
        :type: Ptsv2paymentsProcessorInformationReversalNetwork
        """

        self._network = network

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Ptsv2paymentsProcessorInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
