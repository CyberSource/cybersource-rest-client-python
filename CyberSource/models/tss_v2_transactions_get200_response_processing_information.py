# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class TssV2TransactionsGet200ResponseProcessingInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bin_source': 'str',
        'industry_data_type': 'str',
        'payment_solution': 'str',
        'commerce_indicator': 'str',
        'commerce_indicator_label': 'str',
        'business_application_id': 'str',
        'authorization_options': 'TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions',
        'bank_transfer_options': 'TssV2TransactionsGet200ResponseProcessingInformationBankTransferOptions',
        'capture_options': 'TssV2TransactionsGet200ResponseProcessingInformationCaptureOptions',
        'reconciliation_id': 'str',
        'japan_payment_options': 'TssV2TransactionsGet200ResponseProcessingInformationJapanPaymentOptions'
    }

    attribute_map = {
        'bin_source': 'binSource',
        'industry_data_type': 'industryDataType',
        'payment_solution': 'paymentSolution',
        'commerce_indicator': 'commerceIndicator',
        'commerce_indicator_label': 'commerceIndicatorLabel',
        'business_application_id': 'businessApplicationId',
        'authorization_options': 'authorizationOptions',
        'bank_transfer_options': 'bankTransferOptions',
        'capture_options': 'captureOptions',
        'reconciliation_id': 'reconciliationId',
        'japan_payment_options': 'japanPaymentOptions'
    }

    def __init__(self, bin_source=None, industry_data_type=None, payment_solution=None, commerce_indicator=None, commerce_indicator_label=None, business_application_id=None, authorization_options=None, bank_transfer_options=None, capture_options=None, reconciliation_id=None, japan_payment_options=None):
        """
        TssV2TransactionsGet200ResponseProcessingInformation - a model defined in Swagger
        """

        self._bin_source = None
        self._industry_data_type = None
        self._payment_solution = None
        self._commerce_indicator = None
        self._commerce_indicator_label = None
        self._business_application_id = None
        self._authorization_options = None
        self._bank_transfer_options = None
        self._capture_options = None
        self._reconciliation_id = None
        self._japan_payment_options = None

        if bin_source is not None:
          self.bin_source = bin_source
        if industry_data_type is not None:
          self.industry_data_type = industry_data_type
        if payment_solution is not None:
          self.payment_solution = payment_solution
        if commerce_indicator is not None:
          self.commerce_indicator = commerce_indicator
        if commerce_indicator_label is not None:
          self.commerce_indicator_label = commerce_indicator_label
        if business_application_id is not None:
          self.business_application_id = business_application_id
        if authorization_options is not None:
          self.authorization_options = authorization_options
        if bank_transfer_options is not None:
          self.bank_transfer_options = bank_transfer_options
        if capture_options is not None:
          self.capture_options = capture_options
        if reconciliation_id is not None:
          self.reconciliation_id = reconciliation_id
        if japan_payment_options is not None:
          self.japan_payment_options = japan_payment_options

    @property
    def bin_source(self):
        """
        Gets the bin_source of this TssV2TransactionsGet200ResponseProcessingInformation.
        Bin Source File Identifier. Possible values: - itmx - rupay 

        :return: The bin_source of this TssV2TransactionsGet200ResponseProcessingInformation.
        :rtype: str
        """
        return self._bin_source

    @bin_source.setter
    def bin_source(self, bin_source):
        """
        Sets the bin_source of this TssV2TransactionsGet200ResponseProcessingInformation.
        Bin Source File Identifier. Possible values: - itmx - rupay 

        :param bin_source: The bin_source of this TssV2TransactionsGet200ResponseProcessingInformation.
        :type: str
        """

        self._bin_source = bin_source

    @property
    def industry_data_type(self):
        """
        Gets the industry_data_type of this TssV2TransactionsGet200ResponseProcessingInformation.
        Indicates that the transaction includes industry-specific data.  Possible Values: - `airline` - `restaurant` - `lodging` - `auto_rental` - `transit` - `healthcare_medical` - `healthcare_transit` - `transit`  #### Card Present, Airlines and Auto Rental You must set this field to `airline` in order for airline data to be sent to the processor. For example, if this field is not set to `airline` or is not included in the request, no airline data is sent to the processor.  You must set this field to `restaurant` in order for restaurant data to be sent to the processor. When this field is not set to `restaurant` or is not included in the request, no restaurant data is sent to the processor.  You must set this field to `auto_rental` in order for auto rental data to be sent to the processor. For example, if this field is not set to `auto_rental` or is not included in the request, no auto rental data is sent to the processor.  Restaurant data is supported only on CyberSource through VisaNet. 

        :return: The industry_data_type of this TssV2TransactionsGet200ResponseProcessingInformation.
        :rtype: str
        """
        return self._industry_data_type

    @industry_data_type.setter
    def industry_data_type(self, industry_data_type):
        """
        Sets the industry_data_type of this TssV2TransactionsGet200ResponseProcessingInformation.
        Indicates that the transaction includes industry-specific data.  Possible Values: - `airline` - `restaurant` - `lodging` - `auto_rental` - `transit` - `healthcare_medical` - `healthcare_transit` - `transit`  #### Card Present, Airlines and Auto Rental You must set this field to `airline` in order for airline data to be sent to the processor. For example, if this field is not set to `airline` or is not included in the request, no airline data is sent to the processor.  You must set this field to `restaurant` in order for restaurant data to be sent to the processor. When this field is not set to `restaurant` or is not included in the request, no restaurant data is sent to the processor.  You must set this field to `auto_rental` in order for auto rental data to be sent to the processor. For example, if this field is not set to `auto_rental` or is not included in the request, no auto rental data is sent to the processor.  Restaurant data is supported only on CyberSource through VisaNet. 

        :param industry_data_type: The industry_data_type of this TssV2TransactionsGet200ResponseProcessingInformation.
        :type: str
        """

        self._industry_data_type = industry_data_type

    @property
    def payment_solution(self):
        """
        Gets the payment_solution of this TssV2TransactionsGet200ResponseProcessingInformation.
        Type of digital payment solution for the transaction. 

        :return: The payment_solution of this TssV2TransactionsGet200ResponseProcessingInformation.
        :rtype: str
        """
        return self._payment_solution

    @payment_solution.setter
    def payment_solution(self, payment_solution):
        """
        Sets the payment_solution of this TssV2TransactionsGet200ResponseProcessingInformation.
        Type of digital payment solution for the transaction. 

        :param payment_solution: The payment_solution of this TssV2TransactionsGet200ResponseProcessingInformation.
        :type: str
        """

        self._payment_solution = payment_solution

    @property
    def commerce_indicator(self):
        """
        Gets the commerce_indicator of this TssV2TransactionsGet200ResponseProcessingInformation.
        Type of transaction. Some payment card companies use this information when determining discount rates.  #### Used by **Authorization** Required payer authentication transactions; otherwise, optional. **Credit** Required for standalone credits on Chase Paymentech solutions; otherwise, optional.  The list of valid values in this field depends on your processor.  #### Ingenico ePayments When you omit this field for Ingenico ePayments, the processor uses the default transaction type they have on file for you instead of the default value   #### Card Present You must set this field to `retail`. This field is required for a card-present transaction. Note that this should ONLY be used when the cardholder and card are present at the time of the transaction. For all keyed transactions originated from a POS terminal where the cardholder and card are not present, commerceIndicator should be submitted as \"moto\" 

        :return: The commerce_indicator of this TssV2TransactionsGet200ResponseProcessingInformation.
        :rtype: str
        """
        return self._commerce_indicator

    @commerce_indicator.setter
    def commerce_indicator(self, commerce_indicator):
        """
        Sets the commerce_indicator of this TssV2TransactionsGet200ResponseProcessingInformation.
        Type of transaction. Some payment card companies use this information when determining discount rates.  #### Used by **Authorization** Required payer authentication transactions; otherwise, optional. **Credit** Required for standalone credits on Chase Paymentech solutions; otherwise, optional.  The list of valid values in this field depends on your processor.  #### Ingenico ePayments When you omit this field for Ingenico ePayments, the processor uses the default transaction type they have on file for you instead of the default value   #### Card Present You must set this field to `retail`. This field is required for a card-present transaction. Note that this should ONLY be used when the cardholder and card are present at the time of the transaction. For all keyed transactions originated from a POS terminal where the cardholder and card are not present, commerceIndicator should be submitted as \"moto\" 

        :param commerce_indicator: The commerce_indicator of this TssV2TransactionsGet200ResponseProcessingInformation.
        :type: str
        """

        self._commerce_indicator = commerce_indicator

    @property
    def commerce_indicator_label(self):
        """
        Gets the commerce_indicator_label of this TssV2TransactionsGet200ResponseProcessingInformation.
        Type of transaction. Some payment card companies use this information when determining discount rates.  #### Used by **Authorization** Required payer authentication transactions; otherwise, optional. **Credit** Required for standalone credits on Chase Paymentech solutions; otherwise, optional.  The list of valid values in this field depends on your processor.  #### Ingenico ePayments When you omit this field for Ingenico ePayments, the processor uses the default transaction type they have on file for you instead of the default value   #### Card Present You must set this field to `retail`. This field is required for a card-present transaction. Note that this should ONLY be used when the cardholder and card are present at the time of the transaction. For all keyed transactions originated from a POS terminal where the cardholder and card are not present, commerceIndicator should be submitted as `moto` 

        :return: The commerce_indicator_label of this TssV2TransactionsGet200ResponseProcessingInformation.
        :rtype: str
        """
        return self._commerce_indicator_label

    @commerce_indicator_label.setter
    def commerce_indicator_label(self, commerce_indicator_label):
        """
        Sets the commerce_indicator_label of this TssV2TransactionsGet200ResponseProcessingInformation.
        Type of transaction. Some payment card companies use this information when determining discount rates.  #### Used by **Authorization** Required payer authentication transactions; otherwise, optional. **Credit** Required for standalone credits on Chase Paymentech solutions; otherwise, optional.  The list of valid values in this field depends on your processor.  #### Ingenico ePayments When you omit this field for Ingenico ePayments, the processor uses the default transaction type they have on file for you instead of the default value   #### Card Present You must set this field to `retail`. This field is required for a card-present transaction. Note that this should ONLY be used when the cardholder and card are present at the time of the transaction. For all keyed transactions originated from a POS terminal where the cardholder and card are not present, commerceIndicator should be submitted as `moto` 

        :param commerce_indicator_label: The commerce_indicator_label of this TssV2TransactionsGet200ResponseProcessingInformation.
        :type: str
        """

        self._commerce_indicator_label = commerce_indicator_label

    @property
    def business_application_id(self):
        """
        Gets the business_application_id of this TssV2TransactionsGet200ResponseProcessingInformation.
        Required for AFT and OCT transactions.  Given below is a list of all the BAI values available. However, the processors may support only few specific BAI values.  - AA : Account-to-account  - BB : Supplier Payments - BI : Bank-Initiated P2P Money Transfer - BP : Non-Card Bill Pay/Bill Pay - CD : Cash Deposit - CP : Credit card Bill Payment - FD : Funds disbursement  - FT : Funds transfer - GD : Government Disbursement - GP : Gambling payout (non-online gambling) - LO : Loyalty credits and rebates - MD : Merchant Settlement - OG : Online Gambling Payout - PD : Payroll and pension disbursement - PP : Person-to-Person or Peer-to-Peer - TU : Top up, prepaid load - WT : Digital wallet  

        :return: The business_application_id of this TssV2TransactionsGet200ResponseProcessingInformation.
        :rtype: str
        """
        return self._business_application_id

    @business_application_id.setter
    def business_application_id(self, business_application_id):
        """
        Sets the business_application_id of this TssV2TransactionsGet200ResponseProcessingInformation.
        Required for AFT and OCT transactions.  Given below is a list of all the BAI values available. However, the processors may support only few specific BAI values.  - AA : Account-to-account  - BB : Supplier Payments - BI : Bank-Initiated P2P Money Transfer - BP : Non-Card Bill Pay/Bill Pay - CD : Cash Deposit - CP : Credit card Bill Payment - FD : Funds disbursement  - FT : Funds transfer - GD : Government Disbursement - GP : Gambling payout (non-online gambling) - LO : Loyalty credits and rebates - MD : Merchant Settlement - OG : Online Gambling Payout - PD : Payroll and pension disbursement - PP : Person-to-Person or Peer-to-Peer - TU : Top up, prepaid load - WT : Digital wallet  

        :param business_application_id: The business_application_id of this TssV2TransactionsGet200ResponseProcessingInformation.
        :type: str
        """

        self._business_application_id = business_application_id

    @property
    def authorization_options(self):
        """
        Gets the authorization_options of this TssV2TransactionsGet200ResponseProcessingInformation.

        :return: The authorization_options of this TssV2TransactionsGet200ResponseProcessingInformation.
        :rtype: TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions
        """
        return self._authorization_options

    @authorization_options.setter
    def authorization_options(self, authorization_options):
        """
        Sets the authorization_options of this TssV2TransactionsGet200ResponseProcessingInformation.

        :param authorization_options: The authorization_options of this TssV2TransactionsGet200ResponseProcessingInformation.
        :type: TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions
        """

        self._authorization_options = authorization_options

    @property
    def bank_transfer_options(self):
        """
        Gets the bank_transfer_options of this TssV2TransactionsGet200ResponseProcessingInformation.

        :return: The bank_transfer_options of this TssV2TransactionsGet200ResponseProcessingInformation.
        :rtype: TssV2TransactionsGet200ResponseProcessingInformationBankTransferOptions
        """
        return self._bank_transfer_options

    @bank_transfer_options.setter
    def bank_transfer_options(self, bank_transfer_options):
        """
        Sets the bank_transfer_options of this TssV2TransactionsGet200ResponseProcessingInformation.

        :param bank_transfer_options: The bank_transfer_options of this TssV2TransactionsGet200ResponseProcessingInformation.
        :type: TssV2TransactionsGet200ResponseProcessingInformationBankTransferOptions
        """

        self._bank_transfer_options = bank_transfer_options

    @property
    def capture_options(self):
        """
        Gets the capture_options of this TssV2TransactionsGet200ResponseProcessingInformation.

        :return: The capture_options of this TssV2TransactionsGet200ResponseProcessingInformation.
        :rtype: TssV2TransactionsGet200ResponseProcessingInformationCaptureOptions
        """
        return self._capture_options

    @capture_options.setter
    def capture_options(self, capture_options):
        """
        Sets the capture_options of this TssV2TransactionsGet200ResponseProcessingInformation.

        :param capture_options: The capture_options of this TssV2TransactionsGet200ResponseProcessingInformation.
        :type: TssV2TransactionsGet200ResponseProcessingInformationCaptureOptions
        """

        self._capture_options = capture_options

    @property
    def reconciliation_id(self):
        """
        Gets the reconciliation_id of this TssV2TransactionsGet200ResponseProcessingInformation.
        Reference number for the transaction. Depending on how your Cybersource account is configured, this value could either be provided in the API request or generated by CyberSource. The actual value used in the request to the processor is provided back to you by Cybersource in the response. 

        :return: The reconciliation_id of this TssV2TransactionsGet200ResponseProcessingInformation.
        :rtype: str
        """
        return self._reconciliation_id

    @reconciliation_id.setter
    def reconciliation_id(self, reconciliation_id):
        """
        Sets the reconciliation_id of this TssV2TransactionsGet200ResponseProcessingInformation.
        Reference number for the transaction. Depending on how your Cybersource account is configured, this value could either be provided in the API request or generated by CyberSource. The actual value used in the request to the processor is provided back to you by Cybersource in the response. 

        :param reconciliation_id: The reconciliation_id of this TssV2TransactionsGet200ResponseProcessingInformation.
        :type: str
        """

        self._reconciliation_id = reconciliation_id

    @property
    def japan_payment_options(self):
        """
        Gets the japan_payment_options of this TssV2TransactionsGet200ResponseProcessingInformation.

        :return: The japan_payment_options of this TssV2TransactionsGet200ResponseProcessingInformation.
        :rtype: TssV2TransactionsGet200ResponseProcessingInformationJapanPaymentOptions
        """
        return self._japan_payment_options

    @japan_payment_options.setter
    def japan_payment_options(self, japan_payment_options):
        """
        Sets the japan_payment_options of this TssV2TransactionsGet200ResponseProcessingInformation.

        :param japan_payment_options: The japan_payment_options of this TssV2TransactionsGet200ResponseProcessingInformation.
        :type: TssV2TransactionsGet200ResponseProcessingInformationJapanPaymentOptions
        """

        self._japan_payment_options = japan_payment_options

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TssV2TransactionsGet200ResponseProcessingInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
