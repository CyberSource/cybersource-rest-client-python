# coding: utf-8

"""
    CyberSource Flex API

    Simple PAN tokenization service

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse20012ProcessingInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_solution': 'str',
        'commerce_indicator': 'str',
        'business_application_id': 'str',
        'authorization_options': 'InlineResponse20012ProcessingInformationAuthorizationOptions',
        'bank_transfer_options': 'InlineResponse20012ProcessingInformationBankTransferOptions'
    }

    attribute_map = {
        'payment_solution': 'paymentSolution',
        'commerce_indicator': 'commerceIndicator',
        'business_application_id': 'businessApplicationId',
        'authorization_options': 'authorizationOptions',
        'bank_transfer_options': 'bankTransferOptions'
    }

    def __init__(self, payment_solution=None, commerce_indicator=None, business_application_id=None, authorization_options=None, bank_transfer_options=None):
        """
        InlineResponse20012ProcessingInformation - a model defined in Swagger
        """

        self._payment_solution = None
        self._commerce_indicator = None
        self._business_application_id = None
        self._authorization_options = None
        self._bank_transfer_options = None

        if payment_solution is not None:
          self.payment_solution = payment_solution
        if commerce_indicator is not None:
          self.commerce_indicator = commerce_indicator
        if business_application_id is not None:
          self.business_application_id = business_application_id
        if authorization_options is not None:
          self.authorization_options = authorization_options
        if bank_transfer_options is not None:
          self.bank_transfer_options = bank_transfer_options

    @property
    def payment_solution(self):
        """
        Gets the payment_solution of this InlineResponse20012ProcessingInformation.
        Type of digital payment solution that is being used for the transaction. Possible Values:   - **visacheckout**: Visa Checkout.  - **001**: Apple Pay.  - **005**: Masterpass. Required for Masterpass transactions on OmniPay Direct.  - **006**: Android Pay.  - **008**: Samsung Pay. 

        :return: The payment_solution of this InlineResponse20012ProcessingInformation.
        :rtype: str
        """
        return self._payment_solution

    @payment_solution.setter
    def payment_solution(self, payment_solution):
        """
        Sets the payment_solution of this InlineResponse20012ProcessingInformation.
        Type of digital payment solution that is being used for the transaction. Possible Values:   - **visacheckout**: Visa Checkout.  - **001**: Apple Pay.  - **005**: Masterpass. Required for Masterpass transactions on OmniPay Direct.  - **006**: Android Pay.  - **008**: Samsung Pay. 

        :param payment_solution: The payment_solution of this InlineResponse20012ProcessingInformation.
        :type: str
        """
        if payment_solution is not None and len(payment_solution) > 12:
            raise ValueError("Invalid value for `payment_solution`, length must be less than or equal to `12`")

        self._payment_solution = payment_solution

    @property
    def commerce_indicator(self):
        """
        Gets the commerce_indicator of this InlineResponse20012ProcessingInformation.
        Type of transaction. Some payment card companies use this information when determining discount rates. When you omit this field for **Ingenico ePayments**, the processor uses the default transaction type they have on file for you instead of the default value listed here. 

        :return: The commerce_indicator of this InlineResponse20012ProcessingInformation.
        :rtype: str
        """
        return self._commerce_indicator

    @commerce_indicator.setter
    def commerce_indicator(self, commerce_indicator):
        """
        Sets the commerce_indicator of this InlineResponse20012ProcessingInformation.
        Type of transaction. Some payment card companies use this information when determining discount rates. When you omit this field for **Ingenico ePayments**, the processor uses the default transaction type they have on file for you instead of the default value listed here. 

        :param commerce_indicator: The commerce_indicator of this InlineResponse20012ProcessingInformation.
        :type: str
        """
        if commerce_indicator is not None and len(commerce_indicator) > 20:
            raise ValueError("Invalid value for `commerce_indicator`, length must be less than or equal to `20`")

        self._commerce_indicator = commerce_indicator

    @property
    def business_application_id(self):
        """
        Gets the business_application_id of this InlineResponse20012ProcessingInformation.
        The description for this field is not available.

        :return: The business_application_id of this InlineResponse20012ProcessingInformation.
        :rtype: str
        """
        return self._business_application_id

    @business_application_id.setter
    def business_application_id(self, business_application_id):
        """
        Sets the business_application_id of this InlineResponse20012ProcessingInformation.
        The description for this field is not available.

        :param business_application_id: The business_application_id of this InlineResponse20012ProcessingInformation.
        :type: str
        """

        self._business_application_id = business_application_id

    @property
    def authorization_options(self):
        """
        Gets the authorization_options of this InlineResponse20012ProcessingInformation.

        :return: The authorization_options of this InlineResponse20012ProcessingInformation.
        :rtype: InlineResponse20012ProcessingInformationAuthorizationOptions
        """
        return self._authorization_options

    @authorization_options.setter
    def authorization_options(self, authorization_options):
        """
        Sets the authorization_options of this InlineResponse20012ProcessingInformation.

        :param authorization_options: The authorization_options of this InlineResponse20012ProcessingInformation.
        :type: InlineResponse20012ProcessingInformationAuthorizationOptions
        """

        self._authorization_options = authorization_options

    @property
    def bank_transfer_options(self):
        """
        Gets the bank_transfer_options of this InlineResponse20012ProcessingInformation.

        :return: The bank_transfer_options of this InlineResponse20012ProcessingInformation.
        :rtype: InlineResponse20012ProcessingInformationBankTransferOptions
        """
        return self._bank_transfer_options

    @bank_transfer_options.setter
    def bank_transfer_options(self, bank_transfer_options):
        """
        Sets the bank_transfer_options of this InlineResponse20012ProcessingInformation.

        :param bank_transfer_options: The bank_transfer_options of this InlineResponse20012ProcessingInformation.
        :type: InlineResponse20012ProcessingInformationBankTransferOptions
        """

        self._bank_transfer_options = bank_transfer_options

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse20012ProcessingInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
