# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2011RegistrationInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boarding_package_id': 'str',
        'mode': 'str',
        'sales_rep_id': 'str'
    }

    attribute_map = {
        'boarding_package_id': 'boardingPackageId',
        'mode': 'mode',
        'sales_rep_id': 'salesRepId'
    }

    def __init__(self, boarding_package_id=None, mode=None, sales_rep_id=None):
        """
        InlineResponse2011RegistrationInformation - a model defined in Swagger
        """

        self._boarding_package_id = None
        self._mode = None
        self._sales_rep_id = None

        if boarding_package_id is not None:
          self.boarding_package_id = boarding_package_id
        if mode is not None:
          self.mode = mode
        if sales_rep_id is not None:
          self.sales_rep_id = sales_rep_id

    @property
    def boarding_package_id(self):
        """
        Gets the boarding_package_id of this InlineResponse2011RegistrationInformation.

        :return: The boarding_package_id of this InlineResponse2011RegistrationInformation.
        :rtype: str
        """
        return self._boarding_package_id

    @boarding_package_id.setter
    def boarding_package_id(self, boarding_package_id):
        """
        Sets the boarding_package_id of this InlineResponse2011RegistrationInformation.

        :param boarding_package_id: The boarding_package_id of this InlineResponse2011RegistrationInformation.
        :type: str
        """

        self._boarding_package_id = boarding_package_id

    @property
    def mode(self):
        """
        Gets the mode of this InlineResponse2011RegistrationInformation.
        In case mode is not provided the API will use COMPLETE as default Possible Values:   - 'COMPLETE'   - 'PARTIAL' 

        :return: The mode of this InlineResponse2011RegistrationInformation.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """
        Sets the mode of this InlineResponse2011RegistrationInformation.
        In case mode is not provided the API will use COMPLETE as default Possible Values:   - 'COMPLETE'   - 'PARTIAL' 

        :param mode: The mode of this InlineResponse2011RegistrationInformation.
        :type: str
        """
        allowed_values = ["COMPLETE", "PARTIAL"]
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def sales_rep_id(self):
        """
        Gets the sales_rep_id of this InlineResponse2011RegistrationInformation.

        :return: The sales_rep_id of this InlineResponse2011RegistrationInformation.
        :rtype: str
        """
        return self._sales_rep_id

    @sales_rep_id.setter
    def sales_rep_id(self, sales_rep_id):
        """
        Sets the sales_rep_id of this InlineResponse2011RegistrationInformation.

        :param sales_rep_id: The sales_rep_id of this InlineResponse2011RegistrationInformation.
        :type: str
        """

        self._sales_rep_id = sales_rep_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2011RegistrationInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
