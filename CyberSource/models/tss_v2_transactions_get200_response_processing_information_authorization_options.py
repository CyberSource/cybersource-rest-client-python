# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_type': 'str',
        'auth_indicator': 'str',
        'extend_auth_indicator': 'str',
        'card_verification_indicator': 'bool',
        'initiator': 'TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator'
    }

    attribute_map = {
        'auth_type': 'authType',
        'auth_indicator': 'authIndicator',
        'extend_auth_indicator': 'extendAuthIndicator',
        'card_verification_indicator': 'cardVerificationIndicator',
        'initiator': 'initiator'
    }

    def __init__(self, auth_type=None, auth_indicator=None, extend_auth_indicator=None, card_verification_indicator=None, initiator=None):
        """
        TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions - a model defined in Swagger
        """

        self._auth_type = None
        self._auth_indicator = None
        self._extend_auth_indicator = None
        self._card_verification_indicator = None
        self._initiator = None

        if auth_type is not None:
          self.auth_type = auth_type
        if auth_indicator is not None:
          self.auth_indicator = auth_indicator
        if extend_auth_indicator is not None:
          self.extend_auth_indicator = extend_auth_indicator
        if card_verification_indicator is not None:
          self.card_verification_indicator = card_verification_indicator
        if initiator is not None:
          self.initiator = initiator

    @property
    def auth_type(self):
        """
        Gets the auth_type of this TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.
        Authorization type. Possible values:   - `AUTOCAPTURE`: automatic capture.  - `STANDARDCAPTURE`: standard capture.  - `VERBAL`: forced capture. Include it in the payment request for a forced capture. Include it in the capture request for a verbal payment.  #### Asia, Middle East, and Africa Gateway; Cielo; Comercio Latino; and CyberSource Latin American Processing Set this field to `AUTOCAPTURE` and include it in a bundled request to indicate that you are requesting an automatic capture. If your account is configured to enable automatic captures, set this field to `STANDARDCAPTURE` and include it in a standard authorization or bundled request to indicate that you are overriding an automatic capture.  #### Forced Capture Set this field to `VERBAL` and include it in the authorization request to indicate that you are performing a forced capture; therefore, you receive the authorization code outside the CyberSource system.  #### Verbal Authorization Set this field to `VERBAL` and include it in the capture request to indicate that the request is for a verbal authorization.  #### for PayPal ptsV2CreateOrderPost400Response Set this field to 'AUTHORIZE' or 'CAPTURE' depending on whether you want to invoke delayed capture or sale respectively. 

        :return: The auth_type of this TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """
        Sets the auth_type of this TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.
        Authorization type. Possible values:   - `AUTOCAPTURE`: automatic capture.  - `STANDARDCAPTURE`: standard capture.  - `VERBAL`: forced capture. Include it in the payment request for a forced capture. Include it in the capture request for a verbal payment.  #### Asia, Middle East, and Africa Gateway; Cielo; Comercio Latino; and CyberSource Latin American Processing Set this field to `AUTOCAPTURE` and include it in a bundled request to indicate that you are requesting an automatic capture. If your account is configured to enable automatic captures, set this field to `STANDARDCAPTURE` and include it in a standard authorization or bundled request to indicate that you are overriding an automatic capture.  #### Forced Capture Set this field to `VERBAL` and include it in the authorization request to indicate that you are performing a forced capture; therefore, you receive the authorization code outside the CyberSource system.  #### Verbal Authorization Set this field to `VERBAL` and include it in the capture request to indicate that the request is for a verbal authorization.  #### for PayPal ptsV2CreateOrderPost400Response Set this field to 'AUTHORIZE' or 'CAPTURE' depending on whether you want to invoke delayed capture or sale respectively. 

        :param auth_type: The auth_type of this TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.
        :type: str
        """

        self._auth_type = auth_type

    @property
    def auth_indicator(self):
        """
        Gets the auth_indicator of this TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.
        Flag that specifies the purpose of the authorization.  Possible values:  - **0**: Preauthorization  - **1**: Final authorization  To set the default for this field, contact CyberSource Customer Support.  #### Barclays and Elavon The default for Barclays and Elavon is 1 (final authorization). To change the default for this field, contact CyberSource Customer Support.  #### CyberSource through VisaNet When the value for this field is 0, it corresponds to the following data in the TC 33 capture file:  - Record: CP01 TCR0  - Position: 164  - Field: Additional Authorization Indicators When the value for this field is 1, it does not correspond to any data in the TC 33 capture file. 

        :return: The auth_indicator of this TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.
        :rtype: str
        """
        return self._auth_indicator

    @auth_indicator.setter
    def auth_indicator(self, auth_indicator):
        """
        Sets the auth_indicator of this TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.
        Flag that specifies the purpose of the authorization.  Possible values:  - **0**: Preauthorization  - **1**: Final authorization  To set the default for this field, contact CyberSource Customer Support.  #### Barclays and Elavon The default for Barclays and Elavon is 1 (final authorization). To change the default for this field, contact CyberSource Customer Support.  #### CyberSource through VisaNet When the value for this field is 0, it corresponds to the following data in the TC 33 capture file:  - Record: CP01 TCR0  - Position: 164  - Field: Additional Authorization Indicators When the value for this field is 1, it does not correspond to any data in the TC 33 capture file. 

        :param auth_indicator: The auth_indicator of this TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.
        :type: str
        """

        self._auth_indicator = auth_indicator

    @property
    def extend_auth_indicator(self):
        """
        Gets the extend_auth_indicator of this TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.
        Flag that indicates whether the transaction is an extended authorization. 

        :return: The extend_auth_indicator of this TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.
        :rtype: str
        """
        return self._extend_auth_indicator

    @extend_auth_indicator.setter
    def extend_auth_indicator(self, extend_auth_indicator):
        """
        Sets the extend_auth_indicator of this TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.
        Flag that indicates whether the transaction is an extended authorization. 

        :param extend_auth_indicator: The extend_auth_indicator of this TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.
        :type: str
        """

        self._extend_auth_indicator = extend_auth_indicator

    @property
    def card_verification_indicator(self):
        """
        Gets the card_verification_indicator of this TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.
        This API field will indicate whether a card verification check is being performed during the transaction  Possible values:   - `true`   - `false` (default value) 

        :return: The card_verification_indicator of this TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.
        :rtype: bool
        """
        return self._card_verification_indicator

    @card_verification_indicator.setter
    def card_verification_indicator(self, card_verification_indicator):
        """
        Sets the card_verification_indicator of this TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.
        This API field will indicate whether a card verification check is being performed during the transaction  Possible values:   - `true`   - `false` (default value) 

        :param card_verification_indicator: The card_verification_indicator of this TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.
        :type: bool
        """

        self._card_verification_indicator = card_verification_indicator

    @property
    def initiator(self):
        """
        Gets the initiator of this TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.

        :return: The initiator of this TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.
        :rtype: TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator
        """
        return self._initiator

    @initiator.setter
    def initiator(self, initiator):
        """
        Sets the initiator of this TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.

        :param initiator: The initiator of this TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.
        :type: TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator
        """

        self._initiator = initiator

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
