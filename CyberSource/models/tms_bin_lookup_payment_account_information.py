# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class TmsBinLookupPaymentAccountInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'card': 'TmsBinLookupPaymentAccountInformationCard',
        'features': 'TmsBinLookupPaymentAccountInformationFeatures',
        'network': 'TmsBinLookupPaymentAccountInformationNetwork'
    }

    attribute_map = {
        'card': 'card',
        'features': 'features',
        'network': 'network'
    }

    def __init__(self, card=None, features=None, network=None):
        """
        TmsBinLookupPaymentAccountInformation - a model defined in Swagger
        """

        self._card = None
        self._features = None
        self._network = None

        if card is not None:
          self.card = card
        if features is not None:
          self.features = features
        if network is not None:
          self.network = network

    @property
    def card(self):
        """
        Gets the card of this TmsBinLookupPaymentAccountInformation.

        :return: The card of this TmsBinLookupPaymentAccountInformation.
        :rtype: TmsBinLookupPaymentAccountInformationCard
        """
        return self._card

    @card.setter
    def card(self, card):
        """
        Sets the card of this TmsBinLookupPaymentAccountInformation.

        :param card: The card of this TmsBinLookupPaymentAccountInformation.
        :type: TmsBinLookupPaymentAccountInformationCard
        """

        self._card = card

    @property
    def features(self):
        """
        Gets the features of this TmsBinLookupPaymentAccountInformation.

        :return: The features of this TmsBinLookupPaymentAccountInformation.
        :rtype: TmsBinLookupPaymentAccountInformationFeatures
        """
        return self._features

    @features.setter
    def features(self, features):
        """
        Sets the features of this TmsBinLookupPaymentAccountInformation.

        :param features: The features of this TmsBinLookupPaymentAccountInformation.
        :type: TmsBinLookupPaymentAccountInformationFeatures
        """

        self._features = features

    @property
    def network(self):
        """
        Gets the network of this TmsBinLookupPaymentAccountInformation.

        :return: The network of this TmsBinLookupPaymentAccountInformation.
        :rtype: TmsBinLookupPaymentAccountInformationNetwork
        """
        return self._network

    @network.setter
    def network(self, network):
        """
        Sets the network of this TmsBinLookupPaymentAccountInformation.

        :param network: The network of this TmsBinLookupPaymentAccountInformation.
        :type: TmsBinLookupPaymentAccountInformationNetwork
        """

        self._network = network

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TmsBinLookupPaymentAccountInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
