# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class Tmsv2TokenizedCardMetadataCardArt(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'combined_asset': 'Tmsv2TokenizedCardMetadataCardArtCombinedAsset',
        'brand_logo_asset': 'Tmsv2TokenizedCardMetadataCardArtBrandLogoAsset',
        'co_brand_logo_asset': 'Tmsv2TokenizedCardMetadataCardArtCoBrandLogoAsset',
        'issuer_logo_asset': 'Tmsv2TokenizedCardMetadataCardArtIssuerLogoAsset',
        'icon_asset': 'Tmsv2TokenizedCardMetadataCardArtIconAsset',
        'foreground_color': 'str',
        'background_asset': 'Tmsv2TokenizedCardMetadataCardArtBackgroundAsset'
    }

    attribute_map = {
        'combined_asset': 'combinedAsset',
        'brand_logo_asset': 'brandLogoAsset',
        'co_brand_logo_asset': 'coBrandLogoAsset',
        'issuer_logo_asset': 'issuerLogoAsset',
        'icon_asset': 'iconAsset',
        'foreground_color': 'foregroundColor',
        'background_asset': 'backgroundAsset'
    }

    def __init__(self, combined_asset=None, brand_logo_asset=None, co_brand_logo_asset=None, issuer_logo_asset=None, icon_asset=None, foreground_color=None, background_asset=None):
        """
        Tmsv2TokenizedCardMetadataCardArt - a model defined in Swagger
        """

        self._combined_asset = None
        self._brand_logo_asset = None
        self._co_brand_logo_asset = None
        self._issuer_logo_asset = None
        self._icon_asset = None
        self._foreground_color = None
        self._background_asset = None

        if combined_asset is not None:
          self.combined_asset = combined_asset
        if brand_logo_asset is not None:
          self.brand_logo_asset = brand_logo_asset
        if co_brand_logo_asset is not None:
          self.co_brand_logo_asset = co_brand_logo_asset
        if issuer_logo_asset is not None:
          self.issuer_logo_asset = issuer_logo_asset
        if icon_asset is not None:
          self.icon_asset = icon_asset
        if foreground_color is not None:
          self.foreground_color = foreground_color
        if background_asset is not None:
          self.background_asset = background_asset

    @property
    def combined_asset(self):
        """
        Gets the combined_asset of this Tmsv2TokenizedCardMetadataCardArt.

        :return: The combined_asset of this Tmsv2TokenizedCardMetadataCardArt.
        :rtype: Tmsv2TokenizedCardMetadataCardArtCombinedAsset
        """
        return self._combined_asset

    @combined_asset.setter
    def combined_asset(self, combined_asset):
        """
        Sets the combined_asset of this Tmsv2TokenizedCardMetadataCardArt.

        :param combined_asset: The combined_asset of this Tmsv2TokenizedCardMetadataCardArt.
        :type: Tmsv2TokenizedCardMetadataCardArtCombinedAsset
        """

        self._combined_asset = combined_asset

    @property
    def brand_logo_asset(self):
        """
        Gets the brand_logo_asset of this Tmsv2TokenizedCardMetadataCardArt.

        :return: The brand_logo_asset of this Tmsv2TokenizedCardMetadataCardArt.
        :rtype: Tmsv2TokenizedCardMetadataCardArtBrandLogoAsset
        """
        return self._brand_logo_asset

    @brand_logo_asset.setter
    def brand_logo_asset(self, brand_logo_asset):
        """
        Sets the brand_logo_asset of this Tmsv2TokenizedCardMetadataCardArt.

        :param brand_logo_asset: The brand_logo_asset of this Tmsv2TokenizedCardMetadataCardArt.
        :type: Tmsv2TokenizedCardMetadataCardArtBrandLogoAsset
        """

        self._brand_logo_asset = brand_logo_asset

    @property
    def co_brand_logo_asset(self):
        """
        Gets the co_brand_logo_asset of this Tmsv2TokenizedCardMetadataCardArt.

        :return: The co_brand_logo_asset of this Tmsv2TokenizedCardMetadataCardArt.
        :rtype: Tmsv2TokenizedCardMetadataCardArtCoBrandLogoAsset
        """
        return self._co_brand_logo_asset

    @co_brand_logo_asset.setter
    def co_brand_logo_asset(self, co_brand_logo_asset):
        """
        Sets the co_brand_logo_asset of this Tmsv2TokenizedCardMetadataCardArt.

        :param co_brand_logo_asset: The co_brand_logo_asset of this Tmsv2TokenizedCardMetadataCardArt.
        :type: Tmsv2TokenizedCardMetadataCardArtCoBrandLogoAsset
        """

        self._co_brand_logo_asset = co_brand_logo_asset

    @property
    def issuer_logo_asset(self):
        """
        Gets the issuer_logo_asset of this Tmsv2TokenizedCardMetadataCardArt.

        :return: The issuer_logo_asset of this Tmsv2TokenizedCardMetadataCardArt.
        :rtype: Tmsv2TokenizedCardMetadataCardArtIssuerLogoAsset
        """
        return self._issuer_logo_asset

    @issuer_logo_asset.setter
    def issuer_logo_asset(self, issuer_logo_asset):
        """
        Sets the issuer_logo_asset of this Tmsv2TokenizedCardMetadataCardArt.

        :param issuer_logo_asset: The issuer_logo_asset of this Tmsv2TokenizedCardMetadataCardArt.
        :type: Tmsv2TokenizedCardMetadataCardArtIssuerLogoAsset
        """

        self._issuer_logo_asset = issuer_logo_asset

    @property
    def icon_asset(self):
        """
        Gets the icon_asset of this Tmsv2TokenizedCardMetadataCardArt.

        :return: The icon_asset of this Tmsv2TokenizedCardMetadataCardArt.
        :rtype: Tmsv2TokenizedCardMetadataCardArtIconAsset
        """
        return self._icon_asset

    @icon_asset.setter
    def icon_asset(self, icon_asset):
        """
        Sets the icon_asset of this Tmsv2TokenizedCardMetadataCardArt.

        :param icon_asset: The icon_asset of this Tmsv2TokenizedCardMetadataCardArt.
        :type: Tmsv2TokenizedCardMetadataCardArtIconAsset
        """

        self._icon_asset = icon_asset

    @property
    def foreground_color(self):
        """
        Gets the foreground_color of this Tmsv2TokenizedCardMetadataCardArt.
        The foreground color of the brand logo asset. 

        :return: The foreground_color of this Tmsv2TokenizedCardMetadataCardArt.
        :rtype: str
        """
        return self._foreground_color

    @foreground_color.setter
    def foreground_color(self, foreground_color):
        """
        Sets the foreground_color of this Tmsv2TokenizedCardMetadataCardArt.
        The foreground color of the brand logo asset. 

        :param foreground_color: The foreground_color of this Tmsv2TokenizedCardMetadataCardArt.
        :type: str
        """

        self._foreground_color = foreground_color

    @property
    def background_asset(self):
        """
        Gets the background_asset of this Tmsv2TokenizedCardMetadataCardArt.

        :return: The background_asset of this Tmsv2TokenizedCardMetadataCardArt.
        :rtype: Tmsv2TokenizedCardMetadataCardArtBackgroundAsset
        """
        return self._background_asset

    @background_asset.setter
    def background_asset(self, background_asset):
        """
        Sets the background_asset of this Tmsv2TokenizedCardMetadataCardArt.

        :param background_asset: The background_asset of this Tmsv2TokenizedCardMetadataCardArt.
        :type: Tmsv2TokenizedCardMetadataCardArtBackgroundAsset
        """

        self._background_asset = background_asset

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Tmsv2TokenizedCardMetadataCardArt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
