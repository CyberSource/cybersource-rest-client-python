# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class InlineResponse2011PayoutInformationPullFunds(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domestic_participant': 'str',
        'cross_border_participant': 'str'
    }

    attribute_map = {
        'domestic_participant': 'domesticParticipant',
        'cross_border_participant': 'crossBorderParticipant'
    }

    def __init__(self, domestic_participant=None, cross_border_participant=None):
        """
        InlineResponse2011PayoutInformationPullFunds - a model defined in Swagger
        """

        self._domestic_participant = None
        self._cross_border_participant = None

        if domestic_participant is not None:
          self.domestic_participant = domestic_participant
        if cross_border_participant is not None:
          self.cross_border_participant = cross_border_participant

    @property
    def domestic_participant(self):
        """
        Gets the domestic_participant of this InlineResponse2011PayoutInformationPullFunds.
        This field indicates if domestic AFTs (pull funds) are allowed. Note: Supported only in US for domestic transactions involving Push Payments Gateway Service(PPGS). Possible values:   - `true`   - `false` 

        :return: The domestic_participant of this InlineResponse2011PayoutInformationPullFunds.
        :rtype: str
        """
        return self._domestic_participant

    @domestic_participant.setter
    def domestic_participant(self, domestic_participant):
        """
        Sets the domestic_participant of this InlineResponse2011PayoutInformationPullFunds.
        This field indicates if domestic AFTs (pull funds) are allowed. Note: Supported only in US for domestic transactions involving Push Payments Gateway Service(PPGS). Possible values:   - `true`   - `false` 

        :param domestic_participant: The domestic_participant of this InlineResponse2011PayoutInformationPullFunds.
        :type: str
        """

        self._domestic_participant = domestic_participant

    @property
    def cross_border_participant(self):
        """
        Gets the cross_border_participant of this InlineResponse2011PayoutInformationPullFunds.
        This field indicates if cross-border AFTs (pull funds) are allowed. Note: Supported only in US for cross-border transactions involving Push Payments Gateway Service(PPGS). Possible values:   - `true`   - `false` 

        :return: The cross_border_participant of this InlineResponse2011PayoutInformationPullFunds.
        :rtype: str
        """
        return self._cross_border_participant

    @cross_border_participant.setter
    def cross_border_participant(self, cross_border_participant):
        """
        Sets the cross_border_participant of this InlineResponse2011PayoutInformationPullFunds.
        This field indicates if cross-border AFTs (pull funds) are allowed. Note: Supported only in US for cross-border transactions involving Push Payments Gateway Service(PPGS). Possible values:   - `true`   - `false` 

        :param cross_border_participant: The cross_border_participant of this InlineResponse2011PayoutInformationPullFunds.
        :type: str
        """

        self._cross_border_participant = cross_border_participant

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2011PayoutInformationPullFunds):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
