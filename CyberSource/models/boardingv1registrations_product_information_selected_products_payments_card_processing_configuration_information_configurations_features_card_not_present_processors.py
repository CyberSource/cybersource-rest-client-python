# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'relax_address_verification_system': 'bool',
        'relax_address_verification_system_allow_zip_without_country': 'bool',
        'relax_address_verification_system_allow_expired_card': 'bool',
        'enable_ems_transaction_risk_score': 'bool',
        'prestigious_property_indicator': 'str',
        'payouts': 'Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentPayouts'
    }

    attribute_map = {
        'relax_address_verification_system': 'relaxAddressVerificationSystem',
        'relax_address_verification_system_allow_zip_without_country': 'relaxAddressVerificationSystemAllowZipWithoutCountry',
        'relax_address_verification_system_allow_expired_card': 'relaxAddressVerificationSystemAllowExpiredCard',
        'enable_ems_transaction_risk_score': 'enableEmsTransactionRiskScore',
        'prestigious_property_indicator': 'prestigiousPropertyIndicator',
        'payouts': 'payouts'
    }

    def __init__(self, relax_address_verification_system=None, relax_address_verification_system_allow_zip_without_country=None, relax_address_verification_system_allow_expired_card=None, enable_ems_transaction_risk_score=None, prestigious_property_indicator=None, payouts=None):
        """
        Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors - a model defined in Swagger
        """

        self._relax_address_verification_system = None
        self._relax_address_verification_system_allow_zip_without_country = None
        self._relax_address_verification_system_allow_expired_card = None
        self._enable_ems_transaction_risk_score = None
        self._prestigious_property_indicator = None
        self._payouts = None

        if relax_address_verification_system is not None:
          self.relax_address_verification_system = relax_address_verification_system
        if relax_address_verification_system_allow_zip_without_country is not None:
          self.relax_address_verification_system_allow_zip_without_country = relax_address_verification_system_allow_zip_without_country
        if relax_address_verification_system_allow_expired_card is not None:
          self.relax_address_verification_system_allow_expired_card = relax_address_verification_system_allow_expired_card
        if enable_ems_transaction_risk_score is not None:
          self.enable_ems_transaction_risk_score = enable_ems_transaction_risk_score
        if prestigious_property_indicator is not None:
          self.prestigious_property_indicator = prestigious_property_indicator
        if payouts is not None:
          self.payouts = payouts

    @property
    def relax_address_verification_system(self):
        """
        Gets the relax_address_verification_system of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors.
        Enables you to submit the payment transaction without one or more of the fields for the billTo or card_expiration. Applicable for Elavon Americas (elavonamericas), CB2A, Six (six), CMCIC (cmcic), GPX (gpx), GPN (gpn), VPC, Vero (vero), Fiserv (fiserv), American Express Direct (amexdirect), Chase Paymentech Salem (chasepaymentechsalem), RUPAY, FDI Global (fdiglobal) and Barclays HISO (barclayshiso) processors.  Validation details (for selected processors)...  <table> <thead><tr><th>Processor</th><th>Acceptance Type</th><th>Required</th><th>Default Value</th></tr></thead> <tr><td>Barclays HISO</td><td>cp, cnp, hybrid</td><td>No</td><td>Yes</td></tr> <tr><td>American Express Direct</td><td>cnp</td><td>No</td><td>No</td></tr> <tr><td>American Express Direct</td><td>cp</td><td>No</td><td>Yes</td></tr> <tr><td>American Express Direct</td><td>hybrid</td><td>Yes</td><td>Yes</td></tr> </table> 

        :return: The relax_address_verification_system of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors.
        :rtype: bool
        """
        return self._relax_address_verification_system

    @relax_address_verification_system.setter
    def relax_address_verification_system(self, relax_address_verification_system):
        """
        Sets the relax_address_verification_system of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors.
        Enables you to submit the payment transaction without one or more of the fields for the billTo or card_expiration. Applicable for Elavon Americas (elavonamericas), CB2A, Six (six), CMCIC (cmcic), GPX (gpx), GPN (gpn), VPC, Vero (vero), Fiserv (fiserv), American Express Direct (amexdirect), Chase Paymentech Salem (chasepaymentechsalem), RUPAY, FDI Global (fdiglobal) and Barclays HISO (barclayshiso) processors.  Validation details (for selected processors)...  <table> <thead><tr><th>Processor</th><th>Acceptance Type</th><th>Required</th><th>Default Value</th></tr></thead> <tr><td>Barclays HISO</td><td>cp, cnp, hybrid</td><td>No</td><td>Yes</td></tr> <tr><td>American Express Direct</td><td>cnp</td><td>No</td><td>No</td></tr> <tr><td>American Express Direct</td><td>cp</td><td>No</td><td>Yes</td></tr> <tr><td>American Express Direct</td><td>hybrid</td><td>Yes</td><td>Yes</td></tr> </table> 

        :param relax_address_verification_system: The relax_address_verification_system of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors.
        :type: bool
        """

        self._relax_address_verification_system = relax_address_verification_system

    @property
    def relax_address_verification_system_allow_zip_without_country(self):
        """
        Gets the relax_address_verification_system_allow_zip_without_country of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors.
        Allows Zip code without country. Applicable for American Express Direct (amexdirect), GPX (gpx), VPC, FDI Global (fdiglobal), Elavon Americas (elavonamericas), Chase Paymentech Salem (chasepaymentechsalem), RUPAY, GPN (gpn) and Barclays HISO (barclayshiso) processors.  Validation details (for selected processors)...  <table> <thead><tr><th>Processor</th><th>Acceptance Type</th><th>Required</th><th>Default Value</th></tr></thead> <tr><td>Barclays HISO</td><td>cp, cnp, both</td><td>No</td><td>Yes</td></tr> <tr><td>American Express Direct</td><td>cp, hybrid</td><td>No</td><td>Yes</td></tr> <tr><td>American Express Direct</td><td>cnp</td><td>No</td><td>No</td></tr> </table> 

        :return: The relax_address_verification_system_allow_zip_without_country of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors.
        :rtype: bool
        """
        return self._relax_address_verification_system_allow_zip_without_country

    @relax_address_verification_system_allow_zip_without_country.setter
    def relax_address_verification_system_allow_zip_without_country(self, relax_address_verification_system_allow_zip_without_country):
        """
        Sets the relax_address_verification_system_allow_zip_without_country of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors.
        Allows Zip code without country. Applicable for American Express Direct (amexdirect), GPX (gpx), VPC, FDI Global (fdiglobal), Elavon Americas (elavonamericas), Chase Paymentech Salem (chasepaymentechsalem), RUPAY, GPN (gpn) and Barclays HISO (barclayshiso) processors.  Validation details (for selected processors)...  <table> <thead><tr><th>Processor</th><th>Acceptance Type</th><th>Required</th><th>Default Value</th></tr></thead> <tr><td>Barclays HISO</td><td>cp, cnp, both</td><td>No</td><td>Yes</td></tr> <tr><td>American Express Direct</td><td>cp, hybrid</td><td>No</td><td>Yes</td></tr> <tr><td>American Express Direct</td><td>cnp</td><td>No</td><td>No</td></tr> </table> 

        :param relax_address_verification_system_allow_zip_without_country: The relax_address_verification_system_allow_zip_without_country of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors.
        :type: bool
        """

        self._relax_address_verification_system_allow_zip_without_country = relax_address_verification_system_allow_zip_without_country

    @property
    def relax_address_verification_system_allow_expired_card(self):
        """
        Gets the relax_address_verification_system_allow_expired_card of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors.
        Allows transactions that use an expired card. Applicable for American Express Direct (amexdirect), GPN (gpn), Barclays HISO (barclayshiso), Elavon Americas (elavonamericas), VPC, FDI Global (fdiglobal), GPX (gpx), RUPAY, Six (six), Chase Paymentech Salem (chasepaymentechsalem) and CB2A processors.  Validation details (for selected processors)...  <table> <thead><tr><th>Processor</th><th>Acceptance Type</th><th>Required</th><th>Default Value</th></tr></thead> <tr><td>Barclays HISO</td><td>cp, cnp, hybrid</td><td>No</td><td>Yes</td></tr> <tr><td>American Express Direct</td><td>cp, hybrid</td><td>No</td><td>Yes</td></tr> <tr><td>American Express Direct</td><td>cnp</td><td>No</td><td>No</td></tr> </table> 

        :return: The relax_address_verification_system_allow_expired_card of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors.
        :rtype: bool
        """
        return self._relax_address_verification_system_allow_expired_card

    @relax_address_verification_system_allow_expired_card.setter
    def relax_address_verification_system_allow_expired_card(self, relax_address_verification_system_allow_expired_card):
        """
        Sets the relax_address_verification_system_allow_expired_card of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors.
        Allows transactions that use an expired card. Applicable for American Express Direct (amexdirect), GPN (gpn), Barclays HISO (barclayshiso), Elavon Americas (elavonamericas), VPC, FDI Global (fdiglobal), GPX (gpx), RUPAY, Six (six), Chase Paymentech Salem (chasepaymentechsalem) and CB2A processors.  Validation details (for selected processors)...  <table> <thead><tr><th>Processor</th><th>Acceptance Type</th><th>Required</th><th>Default Value</th></tr></thead> <tr><td>Barclays HISO</td><td>cp, cnp, hybrid</td><td>No</td><td>Yes</td></tr> <tr><td>American Express Direct</td><td>cp, hybrid</td><td>No</td><td>Yes</td></tr> <tr><td>American Express Direct</td><td>cnp</td><td>No</td><td>No</td></tr> </table> 

        :param relax_address_verification_system_allow_expired_card: The relax_address_verification_system_allow_expired_card of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors.
        :type: bool
        """

        self._relax_address_verification_system_allow_expired_card = relax_address_verification_system_allow_expired_card

    @property
    def enable_ems_transaction_risk_score(self):
        """
        Gets the enable_ems_transaction_risk_score of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors.
        MasterCard Expert Monitoring Solutions (EMS) provides a predictive, behavior-based fraud score in real time during authorizations for card-not-present (CNP) transactions on cards issued in the U.S. Applicable for GPX (gpx) and VPC processors.

        :return: The enable_ems_transaction_risk_score of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors.
        :rtype: bool
        """
        return self._enable_ems_transaction_risk_score

    @enable_ems_transaction_risk_score.setter
    def enable_ems_transaction_risk_score(self, enable_ems_transaction_risk_score):
        """
        Sets the enable_ems_transaction_risk_score of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors.
        MasterCard Expert Monitoring Solutions (EMS) provides a predictive, behavior-based fraud score in real time during authorizations for card-not-present (CNP) transactions on cards issued in the U.S. Applicable for GPX (gpx) and VPC processors.

        :param enable_ems_transaction_risk_score: The enable_ems_transaction_risk_score of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors.
        :type: bool
        """

        self._enable_ems_transaction_risk_score = enable_ems_transaction_risk_score

    @property
    def prestigious_property_indicator(self):
        """
        Gets the prestigious_property_indicator of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors.
        Applicable for VPC processors.

        :return: The prestigious_property_indicator of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors.
        :rtype: str
        """
        return self._prestigious_property_indicator

    @prestigious_property_indicator.setter
    def prestigious_property_indicator(self, prestigious_property_indicator):
        """
        Sets the prestigious_property_indicator of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors.
        Applicable for VPC processors.

        :param prestigious_property_indicator: The prestigious_property_indicator of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors.
        :type: str
        """

        self._prestigious_property_indicator = prestigious_property_indicator

    @property
    def payouts(self):
        """
        Gets the payouts of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors.

        :return: The payouts of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors.
        :rtype: Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentPayouts
        """
        return self._payouts

    @payouts.setter
    def payouts(self, payouts):
        """
        Sets the payouts of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors.

        :param payouts: The payouts of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors.
        :type: Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentPayouts
        """

        self._payouts = payouts

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
