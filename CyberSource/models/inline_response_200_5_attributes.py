# coding: utf-8

"""
    CyberSource Flex API

    Simple PAN tokenization service

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2005Attributes(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'filter_type': 'str',
        'default': 'bool',
        'required': 'bool',
        'supported_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'filter_type': 'filterType',
        'default': 'default',
        'required': 'required',
        'supported_type': 'supportedType'
    }

    def __init__(self, id=None, name=None, description=None, filter_type=None, default=None, required=None, supported_type=None):
        """
        InlineResponse2005Attributes - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._description = None
        self._filter_type = None
        self._default = None
        self._required = None
        self._supported_type = None

        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if description is not None:
          self.description = description
        if filter_type is not None:
          self.filter_type = filter_type
        if default is not None:
          self.default = default
        if required is not None:
          self.required = required
        if supported_type is not None:
          self.supported_type = supported_type

    @property
    def id(self):
        """
        Gets the id of this InlineResponse2005Attributes.

        :return: The id of this InlineResponse2005Attributes.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this InlineResponse2005Attributes.

        :param id: The id of this InlineResponse2005Attributes.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this InlineResponse2005Attributes.

        :return: The name of this InlineResponse2005Attributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this InlineResponse2005Attributes.

        :param name: The name of this InlineResponse2005Attributes.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this InlineResponse2005Attributes.

        :return: The description of this InlineResponse2005Attributes.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this InlineResponse2005Attributes.

        :param description: The description of this InlineResponse2005Attributes.
        :type: str
        """

        self._description = description

    @property
    def filter_type(self):
        """
        Gets the filter_type of this InlineResponse2005Attributes.

        :return: The filter_type of this InlineResponse2005Attributes.
        :rtype: str
        """
        return self._filter_type

    @filter_type.setter
    def filter_type(self, filter_type):
        """
        Sets the filter_type of this InlineResponse2005Attributes.

        :param filter_type: The filter_type of this InlineResponse2005Attributes.
        :type: str
        """

        self._filter_type = filter_type

    @property
    def default(self):
        """
        Gets the default of this InlineResponse2005Attributes.

        :return: The default of this InlineResponse2005Attributes.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """
        Sets the default of this InlineResponse2005Attributes.

        :param default: The default of this InlineResponse2005Attributes.
        :type: bool
        """

        self._default = default

    @property
    def required(self):
        """
        Gets the required of this InlineResponse2005Attributes.

        :return: The required of this InlineResponse2005Attributes.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """
        Sets the required of this InlineResponse2005Attributes.

        :param required: The required of this InlineResponse2005Attributes.
        :type: bool
        """

        self._required = required

    @property
    def supported_type(self):
        """
        Gets the supported_type of this InlineResponse2005Attributes.

        :return: The supported_type of this InlineResponse2005Attributes.
        :rtype: str
        """
        return self._supported_type

    @supported_type.setter
    def supported_type(self, supported_type):
        """
        Sets the supported_type of this InlineResponse2005Attributes.

        :param supported_type: The supported_type of this InlineResponse2005Attributes.
        :type: str
        """

        self._supported_type = supported_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2005Attributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
