# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class Ptsv2intentsRecipientInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'create_date': 'str',
        'email': 'str',
        'country_code': 'str',
        'business_name': 'str',
        'risk_popularity_score': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'create_date': 'createDate',
        'email': 'email',
        'country_code': 'countryCode',
        'business_name': 'businessName',
        'risk_popularity_score': 'riskPopularityScore'
    }

    def __init__(self, account_id=None, create_date=None, email=None, country_code=None, business_name=None, risk_popularity_score=None):
        """
        Ptsv2intentsRecipientInformation - a model defined in Swagger
        """

        self._account_id = None
        self._create_date = None
        self._email = None
        self._country_code = None
        self._business_name = None
        self._risk_popularity_score = None

        if account_id is not None:
          self.account_id = account_id
        if create_date is not None:
          self.create_date = create_date
        if email is not None:
          self.email = email
        if country_code is not None:
          self.country_code = country_code
        if business_name is not None:
          self.business_name = business_name
        if risk_popularity_score is not None:
          self.risk_popularity_score = risk_popularity_score

    @property
    def account_id(self):
        """
        Gets the account_id of this Ptsv2intentsRecipientInformation.
        The account ID of the recipient. 

        :return: The account_id of this Ptsv2intentsRecipientInformation.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this Ptsv2intentsRecipientInformation.
        The account ID of the recipient. 

        :param account_id: The account_id of this Ptsv2intentsRecipientInformation.
        :type: str
        """

        self._account_id = account_id

    @property
    def create_date(self):
        """
        Gets the create_date of this Ptsv2intentsRecipientInformation.
        The date when the recipient's account was created. 

        :return: The create_date of this Ptsv2intentsRecipientInformation.
        :rtype: str
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """
        Sets the create_date of this Ptsv2intentsRecipientInformation.
        The date when the recipient's account was created. 

        :param create_date: The create_date of this Ptsv2intentsRecipientInformation.
        :type: str
        """

        self._create_date = create_date

    @property
    def email(self):
        """
        Gets the email of this Ptsv2intentsRecipientInformation.
        The email address of the recipient 

        :return: The email of this Ptsv2intentsRecipientInformation.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Ptsv2intentsRecipientInformation.
        The email address of the recipient 

        :param email: The email of this Ptsv2intentsRecipientInformation.
        :type: str
        """

        self._email = email

    @property
    def country_code(self):
        """
        Gets the country_code of this Ptsv2intentsRecipientInformation.
        The country code of the recipient. 

        :return: The country_code of this Ptsv2intentsRecipientInformation.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """
        Sets the country_code of this Ptsv2intentsRecipientInformation.
        The country code of the recipient. 

        :param country_code: The country_code of this Ptsv2intentsRecipientInformation.
        :type: str
        """

        self._country_code = country_code

    @property
    def business_name(self):
        """
        Gets the business_name of this Ptsv2intentsRecipientInformation.
        The business name of the recipient. 

        :return: The business_name of this Ptsv2intentsRecipientInformation.
        :rtype: str
        """
        return self._business_name

    @business_name.setter
    def business_name(self, business_name):
        """
        Sets the business_name of this Ptsv2intentsRecipientInformation.
        The business name of the recipient. 

        :param business_name: The business_name of this Ptsv2intentsRecipientInformation.
        :type: str
        """

        self._business_name = business_name

    @property
    def risk_popularity_score(self):
        """
        Gets the risk_popularity_score of this Ptsv2intentsRecipientInformation.
        The risk popularity score of the recipient. 

        :return: The risk_popularity_score of this Ptsv2intentsRecipientInformation.
        :rtype: str
        """
        return self._risk_popularity_score

    @risk_popularity_score.setter
    def risk_popularity_score(self, risk_popularity_score):
        """
        Sets the risk_popularity_score of this Ptsv2intentsRecipientInformation.
        The risk popularity score of the recipient. 

        :param risk_popularity_score: The risk_popularity_score of this Ptsv2intentsRecipientInformation.
        :type: str
        """

        self._risk_popularity_score = risk_popularity_score

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Ptsv2intentsRecipientInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
