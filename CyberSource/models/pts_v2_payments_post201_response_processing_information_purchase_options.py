# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'eligibility_indicator': 'str',
        'type': 'str',
        'benefit_amount': 'str',
        'benefit_type': 'str'
    }

    attribute_map = {
        'eligibility_indicator': 'eligibilityIndicator',
        'type': 'type',
        'benefit_amount': 'benefitAmount',
        'benefit_type': 'benefitType'
    }

    def __init__(self, eligibility_indicator=None, type=None, benefit_amount=None, benefit_type=None):
        """
        PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions - a model defined in Swagger
        """

        self._eligibility_indicator = None
        self._type = None
        self._benefit_amount = None
        self._benefit_type = None

        if eligibility_indicator is not None:
          self.eligibility_indicator = eligibility_indicator
        if type is not None:
          self.type = type
        if benefit_amount is not None:
          self.benefit_amount = benefit_amount
        if benefit_type is not None:
          self.benefit_type = benefit_type

    @property
    def eligibility_indicator(self):
        """
        Gets the eligibility_indicator of this PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions.
        This field contains installment data defined by MasterCard. Possible values:   - Y = eligible   - N = not eligile 

        :return: The eligibility_indicator of this PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions.
        :rtype: str
        """
        return self._eligibility_indicator

    @eligibility_indicator.setter
    def eligibility_indicator(self, eligibility_indicator):
        """
        Sets the eligibility_indicator of this PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions.
        This field contains installment data defined by MasterCard. Possible values:   - Y = eligible   - N = not eligile 

        :param eligibility_indicator: The eligibility_indicator of this PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions.
        :type: str
        """

        self._eligibility_indicator = eligibility_indicator

    @property
    def type(self):
        """
        Gets the type of this PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions.
        Data mapped received in response from MasterCard. Possible values: - 01 = Meal Voucher - Employee Nutrition Program - 02 = Food Voucher - Employee Nutrition Program - 03 = Culture Voucher - Worker's Culture Program - 04 = Meal Voucher - Consolidation of Labor Laws - 05 = Food Voucher - Consolidation of Labor Laws 

        :return: The type of this PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions.
        Data mapped received in response from MasterCard. Possible values: - 01 = Meal Voucher - Employee Nutrition Program - 02 = Food Voucher - Employee Nutrition Program - 03 = Culture Voucher - Worker's Culture Program - 04 = Meal Voucher - Consolidation of Labor Laws - 05 = Food Voucher - Consolidation of Labor Laws 

        :param type: The type of this PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions.
        :type: str
        """

        self._type = type

    @property
    def benefit_amount(self):
        """
        Gets the benefit_amount of this PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions.
        Workplace benefit amount.

        :return: The benefit_amount of this PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions.
        :rtype: str
        """
        return self._benefit_amount

    @benefit_amount.setter
    def benefit_amount(self, benefit_amount):
        """
        Sets the benefit_amount of this PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions.
        Workplace benefit amount.

        :param benefit_amount: The benefit_amount of this PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions.
        :type: str
        """

        self._benefit_amount = benefit_amount

    @property
    def benefit_type(self):
        """
        Gets the benefit_type of this PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions.
        Workplace benefit type. Possible values: - 70 = employee benefit - 4T = transportation / transit - 52 = general benefit - 53 = meal voucher - 54 = fuel - 55 = ecological / sustainability - 58 = philanthropy / patronage / consumption - 59 = gift - 5S = sport / culture - 5T = book / education 

        :return: The benefit_type of this PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions.
        :rtype: str
        """
        return self._benefit_type

    @benefit_type.setter
    def benefit_type(self, benefit_type):
        """
        Sets the benefit_type of this PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions.
        Workplace benefit type. Possible values: - 70 = employee benefit - 4T = transportation / transit - 52 = general benefit - 53 = meal voucher - 54 = fuel - 55 = ecological / sustainability - 58 = philanthropy / patronage / consumption - 59 = gift - 5S = sport / culture - 5T = book / education 

        :param benefit_type: The benefit_type of this PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions.
        :type: str
        """

        self._benefit_type = benefit_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
