# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_type': 'str',
        'percentage_split_by_b2_b': 'float',
        'percentage_split_by_b2_c': 'float',
        'interaction_types': 'str',
        'percentage_split_by_f2_f': 'float',
        'percentage_split_by_cnp': 'float',
        'when_is_customer_charged': 'str',
        'when_is_customer_charged_description': 'str',
        'offer_subscriptions': 'bool',
        'monthly_subscription_percent': 'float',
        'quarterly_subscription_percent': 'float',
        'semiannual_subscription_percent': 'float',
        'annual_subscription_percent': 'float',
        'currency_type': 'str',
        'estimated_monthly_sales': 'float',
        'average_order_amount': 'float',
        'largest_expected_order_amount': 'float',
        'primary_account_usage': 'str',
        'source_of_funds': 'str',
        'receive_money3rd_parties': 'bool',
        'receive_transaction_frequency': 'str',
        'estimated_monthly_spend': 'str',
        'country_transactions': 'list[str]',
        'currencies_in': 'list[str]',
        'currencies_out': 'list[str]',
        'product_services_subscription': 'list[UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetailsProductServicesSubscription]'
    }

    attribute_map = {
        'customer_type': 'customerType',
        'percentage_split_by_b2_b': 'percentageSplitByB2B',
        'percentage_split_by_b2_c': 'percentageSplitByB2C',
        'interaction_types': 'interactionTypes',
        'percentage_split_by_f2_f': 'percentageSplitByF2F',
        'percentage_split_by_cnp': 'percentageSplitByCNP',
        'when_is_customer_charged': 'whenIsCustomerCharged',
        'when_is_customer_charged_description': 'whenIsCustomerChargedDescription',
        'offer_subscriptions': 'offerSubscriptions',
        'monthly_subscription_percent': 'monthlySubscriptionPercent',
        'quarterly_subscription_percent': 'quarterlySubscriptionPercent',
        'semiannual_subscription_percent': 'semiannualSubscriptionPercent',
        'annual_subscription_percent': 'annualSubscriptionPercent',
        'currency_type': 'currencyType',
        'estimated_monthly_sales': 'estimatedMonthlySales',
        'average_order_amount': 'averageOrderAmount',
        'largest_expected_order_amount': 'largestExpectedOrderAmount',
        'primary_account_usage': 'primaryAccountUsage',
        'source_of_funds': 'sourceOfFunds',
        'receive_money3rd_parties': 'receiveMoney3rdParties',
        'receive_transaction_frequency': 'receiveTransactionFrequency',
        'estimated_monthly_spend': 'estimatedMonthlySpend',
        'country_transactions': 'countryTransactions',
        'currencies_in': 'currenciesIn',
        'currencies_out': 'currenciesOut',
        'product_services_subscription': 'productServicesSubscription'
    }

    def __init__(self, customer_type=None, percentage_split_by_b2_b=None, percentage_split_by_b2_c=None, interaction_types=None, percentage_split_by_f2_f=None, percentage_split_by_cnp=None, when_is_customer_charged=None, when_is_customer_charged_description=None, offer_subscriptions=None, monthly_subscription_percent=None, quarterly_subscription_percent=None, semiannual_subscription_percent=None, annual_subscription_percent=None, currency_type=None, estimated_monthly_sales=None, average_order_amount=None, largest_expected_order_amount=None, primary_account_usage=None, source_of_funds=None, receive_money3rd_parties=None, receive_transaction_frequency=None, estimated_monthly_spend=None, country_transactions=None, currencies_in=None, currencies_out=None, product_services_subscription=None):
        """
        UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails - a model defined in Swagger
        """

        self._customer_type = None
        self._percentage_split_by_b2_b = None
        self._percentage_split_by_b2_c = None
        self._interaction_types = None
        self._percentage_split_by_f2_f = None
        self._percentage_split_by_cnp = None
        self._when_is_customer_charged = None
        self._when_is_customer_charged_description = None
        self._offer_subscriptions = None
        self._monthly_subscription_percent = None
        self._quarterly_subscription_percent = None
        self._semiannual_subscription_percent = None
        self._annual_subscription_percent = None
        self._currency_type = None
        self._estimated_monthly_sales = None
        self._average_order_amount = None
        self._largest_expected_order_amount = None
        self._primary_account_usage = None
        self._source_of_funds = None
        self._receive_money3rd_parties = None
        self._receive_transaction_frequency = None
        self._estimated_monthly_spend = None
        self._country_transactions = None
        self._currencies_in = None
        self._currencies_out = None
        self._product_services_subscription = None

        if customer_type is not None:
          self.customer_type = customer_type
        if percentage_split_by_b2_b is not None:
          self.percentage_split_by_b2_b = percentage_split_by_b2_b
        if percentage_split_by_b2_c is not None:
          self.percentage_split_by_b2_c = percentage_split_by_b2_c
        self.interaction_types = interaction_types
        self.percentage_split_by_f2_f = percentage_split_by_f2_f
        self.percentage_split_by_cnp = percentage_split_by_cnp
        self.when_is_customer_charged = when_is_customer_charged
        if when_is_customer_charged_description is not None:
          self.when_is_customer_charged_description = when_is_customer_charged_description
        self.offer_subscriptions = offer_subscriptions
        if monthly_subscription_percent is not None:
          self.monthly_subscription_percent = monthly_subscription_percent
        if quarterly_subscription_percent is not None:
          self.quarterly_subscription_percent = quarterly_subscription_percent
        if semiannual_subscription_percent is not None:
          self.semiannual_subscription_percent = semiannual_subscription_percent
        if annual_subscription_percent is not None:
          self.annual_subscription_percent = annual_subscription_percent
        if currency_type is not None:
          self.currency_type = currency_type
        if estimated_monthly_sales is not None:
          self.estimated_monthly_sales = estimated_monthly_sales
        if average_order_amount is not None:
          self.average_order_amount = average_order_amount
        if largest_expected_order_amount is not None:
          self.largest_expected_order_amount = largest_expected_order_amount
        if primary_account_usage is not None:
          self.primary_account_usage = primary_account_usage
        if source_of_funds is not None:
          self.source_of_funds = source_of_funds
        if receive_money3rd_parties is not None:
          self.receive_money3rd_parties = receive_money3rd_parties
        if receive_transaction_frequency is not None:
          self.receive_transaction_frequency = receive_transaction_frequency
        if estimated_monthly_spend is not None:
          self.estimated_monthly_spend = estimated_monthly_spend
        if country_transactions is not None:
          self.country_transactions = country_transactions
        if currencies_in is not None:
          self.currencies_in = currencies_in
        if currencies_out is not None:
          self.currencies_out = currencies_out
        if product_services_subscription is not None:
          self.product_services_subscription = product_services_subscription

    @property
    def customer_type(self):
        """
        Gets the customer_type of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        Who is the business interacting with? Business to Business, Business to Consumer, Both  Possible values: - B2B - B2C - Both

        :return: The customer_type of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :rtype: str
        """
        return self._customer_type

    @customer_type.setter
    def customer_type(self, customer_type):
        """
        Sets the customer_type of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        Who is the business interacting with? Business to Business, Business to Consumer, Both  Possible values: - B2B - B2C - Both

        :param customer_type: The customer_type of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :type: str
        """

        self._customer_type = customer_type

    @property
    def percentage_split_by_b2_b(self):
        """
        Gets the percentage_split_by_b2_b of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        % Split

        :return: The percentage_split_by_b2_b of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :rtype: float
        """
        return self._percentage_split_by_b2_b

    @percentage_split_by_b2_b.setter
    def percentage_split_by_b2_b(self, percentage_split_by_b2_b):
        """
        Sets the percentage_split_by_b2_b of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        % Split

        :param percentage_split_by_b2_b: The percentage_split_by_b2_b of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :type: float
        """

        self._percentage_split_by_b2_b = percentage_split_by_b2_b

    @property
    def percentage_split_by_b2_c(self):
        """
        Gets the percentage_split_by_b2_c of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        % Split

        :return: The percentage_split_by_b2_c of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :rtype: float
        """
        return self._percentage_split_by_b2_c

    @percentage_split_by_b2_c.setter
    def percentage_split_by_b2_c(self, percentage_split_by_b2_c):
        """
        Sets the percentage_split_by_b2_c of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        % Split

        :param percentage_split_by_b2_c: The percentage_split_by_b2_c of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :type: float
        """

        self._percentage_split_by_b2_c = percentage_split_by_b2_c

    @property
    def interaction_types(self):
        """
        Gets the interaction_types of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        Merchant Facing: Face to Face, Card Not Present, Both  Possible values: - F2F - CNP - Both

        :return: The interaction_types of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :rtype: str
        """
        return self._interaction_types

    @interaction_types.setter
    def interaction_types(self, interaction_types):
        """
        Sets the interaction_types of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        Merchant Facing: Face to Face, Card Not Present, Both  Possible values: - F2F - CNP - Both

        :param interaction_types: The interaction_types of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :type: str
        """

        self._interaction_types = interaction_types

    @property
    def percentage_split_by_f2_f(self):
        """
        Gets the percentage_split_by_f2_f of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        % Split

        :return: The percentage_split_by_f2_f of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :rtype: float
        """
        return self._percentage_split_by_f2_f

    @percentage_split_by_f2_f.setter
    def percentage_split_by_f2_f(self, percentage_split_by_f2_f):
        """
        Sets the percentage_split_by_f2_f of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        % Split

        :param percentage_split_by_f2_f: The percentage_split_by_f2_f of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :type: float
        """

        self._percentage_split_by_f2_f = percentage_split_by_f2_f

    @property
    def percentage_split_by_cnp(self):
        """
        Gets the percentage_split_by_cnp of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        % Split

        :return: The percentage_split_by_cnp of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :rtype: float
        """
        return self._percentage_split_by_cnp

    @percentage_split_by_cnp.setter
    def percentage_split_by_cnp(self, percentage_split_by_cnp):
        """
        Sets the percentage_split_by_cnp of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        % Split

        :param percentage_split_by_cnp: The percentage_split_by_cnp of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :type: float
        """

        self._percentage_split_by_cnp = percentage_split_by_cnp

    @property
    def when_is_customer_charged(self):
        """
        Gets the when_is_customer_charged of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        When is the customer charged?  Possible values: - OneTimeBeforeServiceDelivery - OneTimeAfterServiceDelivery - Other

        :return: The when_is_customer_charged of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :rtype: str
        """
        return self._when_is_customer_charged

    @when_is_customer_charged.setter
    def when_is_customer_charged(self, when_is_customer_charged):
        """
        Sets the when_is_customer_charged of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        When is the customer charged?  Possible values: - OneTimeBeforeServiceDelivery - OneTimeAfterServiceDelivery - Other

        :param when_is_customer_charged: The when_is_customer_charged of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :type: str
        """

        self._when_is_customer_charged = when_is_customer_charged

    @property
    def when_is_customer_charged_description(self):
        """
        Gets the when_is_customer_charged_description of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.

        :return: The when_is_customer_charged_description of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :rtype: str
        """
        return self._when_is_customer_charged_description

    @when_is_customer_charged_description.setter
    def when_is_customer_charged_description(self, when_is_customer_charged_description):
        """
        Sets the when_is_customer_charged_description of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.

        :param when_is_customer_charged_description: The when_is_customer_charged_description of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :type: str
        """

        self._when_is_customer_charged_description = when_is_customer_charged_description

    @property
    def offer_subscriptions(self):
        """
        Gets the offer_subscriptions of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        Does Merchant Offer Subscriptions?

        :return: The offer_subscriptions of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :rtype: bool
        """
        return self._offer_subscriptions

    @offer_subscriptions.setter
    def offer_subscriptions(self, offer_subscriptions):
        """
        Sets the offer_subscriptions of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        Does Merchant Offer Subscriptions?

        :param offer_subscriptions: The offer_subscriptions of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :type: bool
        """

        self._offer_subscriptions = offer_subscriptions

    @property
    def monthly_subscription_percent(self):
        """
        Gets the monthly_subscription_percent of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        % of business is monthly subscriptions

        :return: The monthly_subscription_percent of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :rtype: float
        """
        return self._monthly_subscription_percent

    @monthly_subscription_percent.setter
    def monthly_subscription_percent(self, monthly_subscription_percent):
        """
        Sets the monthly_subscription_percent of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        % of business is monthly subscriptions

        :param monthly_subscription_percent: The monthly_subscription_percent of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :type: float
        """

        self._monthly_subscription_percent = monthly_subscription_percent

    @property
    def quarterly_subscription_percent(self):
        """
        Gets the quarterly_subscription_percent of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        % of business is quarterly subscriptions

        :return: The quarterly_subscription_percent of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :rtype: float
        """
        return self._quarterly_subscription_percent

    @quarterly_subscription_percent.setter
    def quarterly_subscription_percent(self, quarterly_subscription_percent):
        """
        Sets the quarterly_subscription_percent of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        % of business is quarterly subscriptions

        :param quarterly_subscription_percent: The quarterly_subscription_percent of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :type: float
        """

        self._quarterly_subscription_percent = quarterly_subscription_percent

    @property
    def semiannual_subscription_percent(self):
        """
        Gets the semiannual_subscription_percent of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        % of business is semi-annual subscriptions

        :return: The semiannual_subscription_percent of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :rtype: float
        """
        return self._semiannual_subscription_percent

    @semiannual_subscription_percent.setter
    def semiannual_subscription_percent(self, semiannual_subscription_percent):
        """
        Sets the semiannual_subscription_percent of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        % of business is semi-annual subscriptions

        :param semiannual_subscription_percent: The semiannual_subscription_percent of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :type: float
        """

        self._semiannual_subscription_percent = semiannual_subscription_percent

    @property
    def annual_subscription_percent(self):
        """
        Gets the annual_subscription_percent of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        % of business is annual subscriptions

        :return: The annual_subscription_percent of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :rtype: float
        """
        return self._annual_subscription_percent

    @annual_subscription_percent.setter
    def annual_subscription_percent(self, annual_subscription_percent):
        """
        Sets the annual_subscription_percent of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        % of business is annual subscriptions

        :param annual_subscription_percent: The annual_subscription_percent of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :type: float
        """

        self._annual_subscription_percent = annual_subscription_percent

    @property
    def currency_type(self):
        """
        Gets the currency_type of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        Processing Currency. ISO 4217, 3 characters.  Possible values: - USD - CAD - EUR - GBP - CHF

        :return: The currency_type of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :rtype: str
        """
        return self._currency_type

    @currency_type.setter
    def currency_type(self, currency_type):
        """
        Sets the currency_type of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        Processing Currency. ISO 4217, 3 characters.  Possible values: - USD - CAD - EUR - GBP - CHF

        :param currency_type: The currency_type of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :type: str
        """

        self._currency_type = currency_type

    @property
    def estimated_monthly_sales(self):
        """
        Gets the estimated_monthly_sales of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        Merchant's estimated monthly sales

        :return: The estimated_monthly_sales of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :rtype: float
        """
        return self._estimated_monthly_sales

    @estimated_monthly_sales.setter
    def estimated_monthly_sales(self, estimated_monthly_sales):
        """
        Sets the estimated_monthly_sales of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        Merchant's estimated monthly sales

        :param estimated_monthly_sales: The estimated_monthly_sales of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :type: float
        """

        self._estimated_monthly_sales = estimated_monthly_sales

    @property
    def average_order_amount(self):
        """
        Gets the average_order_amount of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        Merchant's average order amount

        :return: The average_order_amount of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :rtype: float
        """
        return self._average_order_amount

    @average_order_amount.setter
    def average_order_amount(self, average_order_amount):
        """
        Sets the average_order_amount of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        Merchant's average order amount

        :param average_order_amount: The average_order_amount of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :type: float
        """

        self._average_order_amount = average_order_amount

    @property
    def largest_expected_order_amount(self):
        """
        Gets the largest_expected_order_amount of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        Merchant's largest expected order amount

        :return: The largest_expected_order_amount of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :rtype: float
        """
        return self._largest_expected_order_amount

    @largest_expected_order_amount.setter
    def largest_expected_order_amount(self, largest_expected_order_amount):
        """
        Sets the largest_expected_order_amount of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        Merchant's largest expected order amount

        :param largest_expected_order_amount: The largest_expected_order_amount of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :type: float
        """

        self._largest_expected_order_amount = largest_expected_order_amount

    @property
    def primary_account_usage(self):
        """
        Gets the primary_account_usage of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        Primary purpose of account usage  Possible values: - Paying for goods / services - Repatriating overseas earnings - Intercompany transfers - Collecting funds from clients - Liquidity / FX - Payment to an individual - Investment activity - Property purchase/sale - Other

        :return: The primary_account_usage of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :rtype: str
        """
        return self._primary_account_usage

    @primary_account_usage.setter
    def primary_account_usage(self, primary_account_usage):
        """
        Sets the primary_account_usage of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        Primary purpose of account usage  Possible values: - Paying for goods / services - Repatriating overseas earnings - Intercompany transfers - Collecting funds from clients - Liquidity / FX - Payment to an individual - Investment activity - Property purchase/sale - Other

        :param primary_account_usage: The primary_account_usage of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :type: str
        """

        self._primary_account_usage = primary_account_usage

    @property
    def source_of_funds(self):
        """
        Gets the source_of_funds of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        Source of Funds  Possible values: - Business revenue - External or shareholder investment - Loan, advance or other borrowing - Donations or grants - Inter-company transfers - Proceeds of sales of assests - Other

        :return: The source_of_funds of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :rtype: str
        """
        return self._source_of_funds

    @source_of_funds.setter
    def source_of_funds(self, source_of_funds):
        """
        Sets the source_of_funds of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        Source of Funds  Possible values: - Business revenue - External or shareholder investment - Loan, advance or other borrowing - Donations or grants - Inter-company transfers - Proceeds of sales of assests - Other

        :param source_of_funds: The source_of_funds of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :type: str
        """

        self._source_of_funds = source_of_funds

    @property
    def receive_money3rd_parties(self):
        """
        Gets the receive_money3rd_parties of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        Will you recieve money from 3rd parties into your account?

        :return: The receive_money3rd_parties of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :rtype: bool
        """
        return self._receive_money3rd_parties

    @receive_money3rd_parties.setter
    def receive_money3rd_parties(self, receive_money3rd_parties):
        """
        Sets the receive_money3rd_parties of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        Will you recieve money from 3rd parties into your account?

        :param receive_money3rd_parties: The receive_money3rd_parties of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :type: bool
        """

        self._receive_money3rd_parties = receive_money3rd_parties

    @property
    def receive_transaction_frequency(self):
        """
        Gets the receive_transaction_frequency of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        Roughly how often do you expect to send or receive transactions?  Possible values: - One-off or infrequently - 1-20 per month - 20-50 per month - 50-100 per month - 100+ per month

        :return: The receive_transaction_frequency of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :rtype: str
        """
        return self._receive_transaction_frequency

    @receive_transaction_frequency.setter
    def receive_transaction_frequency(self, receive_transaction_frequency):
        """
        Sets the receive_transaction_frequency of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        Roughly how often do you expect to send or receive transactions?  Possible values: - One-off or infrequently - 1-20 per month - 20-50 per month - 50-100 per month - 100+ per month

        :param receive_transaction_frequency: The receive_transaction_frequency of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :type: str
        """

        self._receive_transaction_frequency = receive_transaction_frequency

    @property
    def estimated_monthly_spend(self):
        """
        Gets the estimated_monthly_spend of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        What is your estimated total monthly spend?  Possible values: - <$10,000 - $10,000 - $50,000 - $50,000 - $100,000 - $100,000 - $500,000 - $500,000+

        :return: The estimated_monthly_spend of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :rtype: str
        """
        return self._estimated_monthly_spend

    @estimated_monthly_spend.setter
    def estimated_monthly_spend(self, estimated_monthly_spend):
        """
        Sets the estimated_monthly_spend of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        What is your estimated total monthly spend?  Possible values: - <$10,000 - $10,000 - $50,000 - $50,000 - $100,000 - $100,000 - $500,000 - $500,000+

        :param estimated_monthly_spend: The estimated_monthly_spend of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :type: str
        """

        self._estimated_monthly_spend = estimated_monthly_spend

    @property
    def country_transactions(self):
        """
        Gets the country_transactions of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.

        :return: The country_transactions of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :rtype: list[str]
        """
        return self._country_transactions

    @country_transactions.setter
    def country_transactions(self, country_transactions):
        """
        Sets the country_transactions of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.

        :param country_transactions: The country_transactions of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :type: list[str]
        """

        self._country_transactions = country_transactions

    @property
    def currencies_in(self):
        """
        Gets the currencies_in of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.

        :return: The currencies_in of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :rtype: list[str]
        """
        return self._currencies_in

    @currencies_in.setter
    def currencies_in(self, currencies_in):
        """
        Sets the currencies_in of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.

        :param currencies_in: The currencies_in of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :type: list[str]
        """

        self._currencies_in = currencies_in

    @property
    def currencies_out(self):
        """
        Gets the currencies_out of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.

        :return: The currencies_out of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :rtype: list[str]
        """
        return self._currencies_out

    @currencies_out.setter
    def currencies_out(self, currencies_out):
        """
        Sets the currencies_out of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.

        :param currencies_out: The currencies_out of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :type: list[str]
        """

        self._currencies_out = currencies_out

    @property
    def product_services_subscription(self):
        """
        Gets the product_services_subscription of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.

        :return: The product_services_subscription of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :rtype: list[UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetailsProductServicesSubscription]
        """
        return self._product_services_subscription

    @product_services_subscription.setter
    def product_services_subscription(self, product_services_subscription):
        """
        Sets the product_services_subscription of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.

        :param product_services_subscription: The product_services_subscription of this UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.
        :type: list[UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetailsProductServicesSubscription]
        """

        self._product_services_subscription = product_services_subscription

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
