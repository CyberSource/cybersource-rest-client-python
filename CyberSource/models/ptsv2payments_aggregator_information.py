# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class Ptsv2paymentsAggregatorInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aggregator_id': 'str',
        'name': 'str',
        'sub_merchant': 'Ptsv2paymentsAggregatorInformationSubMerchant',
        'street_address': 'str',
        'city': 'str',
        'state': 'str',
        'postal_code': 'str',
        'country': 'str'
    }

    attribute_map = {
        'aggregator_id': 'aggregatorId',
        'name': 'name',
        'sub_merchant': 'subMerchant',
        'street_address': 'streetAddress',
        'city': 'city',
        'state': 'state',
        'postal_code': 'postalCode',
        'country': 'country'
    }

    def __init__(self, aggregator_id=None, name=None, sub_merchant=None, street_address=None, city=None, state=None, postal_code=None, country=None):
        """
        Ptsv2paymentsAggregatorInformation - a model defined in Swagger
        """

        self._aggregator_id = None
        self._name = None
        self._sub_merchant = None
        self._street_address = None
        self._city = None
        self._state = None
        self._postal_code = None
        self._country = None

        if aggregator_id is not None:
          self.aggregator_id = aggregator_id
        if name is not None:
          self.name = name
        if sub_merchant is not None:
          self.sub_merchant = sub_merchant
        if street_address is not None:
          self.street_address = street_address
        if city is not None:
          self.city = city
        if state is not None:
          self.state = state
        if postal_code is not None:
          self.postal_code = postal_code
        if country is not None:
          self.country = country

    @property
    def aggregator_id(self):
        """
        Gets the aggregator_id of this Ptsv2paymentsAggregatorInformation.
        Value that identifies you as a payment aggregator. Get this value from the processor.  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR6 - Position: 95-105 - Field: Payment Facilitator ID  This field is supported for Visa, Mastercard and Discover Transactions.  **FDC Compass**\\ This value must consist of uppercase characters. 

        :return: The aggregator_id of this Ptsv2paymentsAggregatorInformation.
        :rtype: str
        """
        return self._aggregator_id

    @aggregator_id.setter
    def aggregator_id(self, aggregator_id):
        """
        Sets the aggregator_id of this Ptsv2paymentsAggregatorInformation.
        Value that identifies you as a payment aggregator. Get this value from the processor.  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR6 - Position: 95-105 - Field: Payment Facilitator ID  This field is supported for Visa, Mastercard and Discover Transactions.  **FDC Compass**\\ This value must consist of uppercase characters. 

        :param aggregator_id: The aggregator_id of this Ptsv2paymentsAggregatorInformation.
        :type: str
        """

        self._aggregator_id = aggregator_id

    @property
    def name(self):
        """
        Gets the name of this Ptsv2paymentsAggregatorInformation.
        Your payment aggregator business name.  **American Express Direct**\\ The maximum length of the aggregator name depends on the length of the sub-merchant name. The combined length for both values must not exceed 36 characters.\\  #### CyberSource through VisaNet With American Express, the maximum length of the aggregator name depends on the length of the sub-merchant name. The combined length for both values must not exceed 36 characters. The value for this field does not map to the TC 33 capture file5.  **FDC Compass**\\ This value must consist of uppercase characters. 

        :return: The name of this Ptsv2paymentsAggregatorInformation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Ptsv2paymentsAggregatorInformation.
        Your payment aggregator business name.  **American Express Direct**\\ The maximum length of the aggregator name depends on the length of the sub-merchant name. The combined length for both values must not exceed 36 characters.\\  #### CyberSource through VisaNet With American Express, the maximum length of the aggregator name depends on the length of the sub-merchant name. The combined length for both values must not exceed 36 characters. The value for this field does not map to the TC 33 capture file5.  **FDC Compass**\\ This value must consist of uppercase characters. 

        :param name: The name of this Ptsv2paymentsAggregatorInformation.
        :type: str
        """

        self._name = name

    @property
    def sub_merchant(self):
        """
        Gets the sub_merchant of this Ptsv2paymentsAggregatorInformation.

        :return: The sub_merchant of this Ptsv2paymentsAggregatorInformation.
        :rtype: Ptsv2paymentsAggregatorInformationSubMerchant
        """
        return self._sub_merchant

    @sub_merchant.setter
    def sub_merchant(self, sub_merchant):
        """
        Sets the sub_merchant of this Ptsv2paymentsAggregatorInformation.

        :param sub_merchant: The sub_merchant of this Ptsv2paymentsAggregatorInformation.
        :type: Ptsv2paymentsAggregatorInformationSubMerchant
        """

        self._sub_merchant = sub_merchant

    @property
    def street_address(self):
        """
        Gets the street_address of this Ptsv2paymentsAggregatorInformation.
        Acquirer street name.

        :return: The street_address of this Ptsv2paymentsAggregatorInformation.
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """
        Sets the street_address of this Ptsv2paymentsAggregatorInformation.
        Acquirer street name.

        :param street_address: The street_address of this Ptsv2paymentsAggregatorInformation.
        :type: str
        """

        self._street_address = street_address

    @property
    def city(self):
        """
        Gets the city of this Ptsv2paymentsAggregatorInformation.
        Acquirer city.

        :return: The city of this Ptsv2paymentsAggregatorInformation.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this Ptsv2paymentsAggregatorInformation.
        Acquirer city.

        :param city: The city of this Ptsv2paymentsAggregatorInformation.
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """
        Gets the state of this Ptsv2paymentsAggregatorInformation.
        Acquirer state.

        :return: The state of this Ptsv2paymentsAggregatorInformation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this Ptsv2paymentsAggregatorInformation.
        Acquirer state.

        :param state: The state of this Ptsv2paymentsAggregatorInformation.
        :type: str
        """

        self._state = state

    @property
    def postal_code(self):
        """
        Gets the postal_code of this Ptsv2paymentsAggregatorInformation.
        Acquirer postal code.

        :return: The postal_code of this Ptsv2paymentsAggregatorInformation.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """
        Sets the postal_code of this Ptsv2paymentsAggregatorInformation.
        Acquirer postal code.

        :param postal_code: The postal_code of this Ptsv2paymentsAggregatorInformation.
        :type: str
        """

        self._postal_code = postal_code

    @property
    def country(self):
        """
        Gets the country of this Ptsv2paymentsAggregatorInformation.
        Acquirer country.

        :return: The country of this Ptsv2paymentsAggregatorInformation.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this Ptsv2paymentsAggregatorInformation.
        Acquirer country.

        :param country: The country of this Ptsv2paymentsAggregatorInformation.
        :type: str
        """

        self._country = country

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Ptsv2paymentsAggregatorInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
