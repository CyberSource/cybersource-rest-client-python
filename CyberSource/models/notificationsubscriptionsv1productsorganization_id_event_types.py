# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Notificationsubscriptionsv1productsorganizationIdEventTypes(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_name': 'str',
        'display_name': 'str',
        'frequency': 'int',
        'time_sensitivity': 'bool',
        'payload_encryption': 'bool'
    }

    attribute_map = {
        'event_name': 'eventName',
        'display_name': 'displayName',
        'frequency': 'frequency',
        'time_sensitivity': 'timeSensitivity',
        'payload_encryption': 'payloadEncryption'
    }

    def __init__(self, event_name=None, display_name=None, frequency=None, time_sensitivity=False, payload_encryption=False):
        """
        Notificationsubscriptionsv1productsorganizationIdEventTypes - a model defined in Swagger
        """

        self._event_name = None
        self._display_name = None
        self._frequency = None
        self._time_sensitivity = None
        self._payload_encryption = None

        if event_name is not None:
          self.event_name = event_name
        if display_name is not None:
          self.display_name = display_name
        if frequency is not None:
          self.frequency = frequency
        if time_sensitivity is not None:
          self.time_sensitivity = time_sensitivity
        if payload_encryption is not None:
          self.payload_encryption = payload_encryption

    @property
    def event_name(self):
        """
        Gets the event_name of this Notificationsubscriptionsv1productsorganizationIdEventTypes.

        :return: The event_name of this Notificationsubscriptionsv1productsorganizationIdEventTypes.
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """
        Sets the event_name of this Notificationsubscriptionsv1productsorganizationIdEventTypes.

        :param event_name: The event_name of this Notificationsubscriptionsv1productsorganizationIdEventTypes.
        :type: str
        """

        self._event_name = event_name

    @property
    def display_name(self):
        """
        Gets the display_name of this Notificationsubscriptionsv1productsorganizationIdEventTypes.

        :return: The display_name of this Notificationsubscriptionsv1productsorganizationIdEventTypes.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this Notificationsubscriptionsv1productsorganizationIdEventTypes.

        :param display_name: The display_name of this Notificationsubscriptionsv1productsorganizationIdEventTypes.
        :type: str
        """

        self._display_name = display_name

    @property
    def frequency(self):
        """
        Gets the frequency of this Notificationsubscriptionsv1productsorganizationIdEventTypes.

        :return: The frequency of this Notificationsubscriptionsv1productsorganizationIdEventTypes.
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """
        Sets the frequency of this Notificationsubscriptionsv1productsorganizationIdEventTypes.

        :param frequency: The frequency of this Notificationsubscriptionsv1productsorganizationIdEventTypes.
        :type: int
        """

        self._frequency = frequency

    @property
    def time_sensitivity(self):
        """
        Gets the time_sensitivity of this Notificationsubscriptionsv1productsorganizationIdEventTypes.

        :return: The time_sensitivity of this Notificationsubscriptionsv1productsorganizationIdEventTypes.
        :rtype: bool
        """
        return self._time_sensitivity

    @time_sensitivity.setter
    def time_sensitivity(self, time_sensitivity):
        """
        Sets the time_sensitivity of this Notificationsubscriptionsv1productsorganizationIdEventTypes.

        :param time_sensitivity: The time_sensitivity of this Notificationsubscriptionsv1productsorganizationIdEventTypes.
        :type: bool
        """

        self._time_sensitivity = time_sensitivity

    @property
    def payload_encryption(self):
        """
        Gets the payload_encryption of this Notificationsubscriptionsv1productsorganizationIdEventTypes.

        :return: The payload_encryption of this Notificationsubscriptionsv1productsorganizationIdEventTypes.
        :rtype: bool
        """
        return self._payload_encryption

    @payload_encryption.setter
    def payload_encryption(self, payload_encryption):
        """
        Sets the payload_encryption of this Notificationsubscriptionsv1productsorganizationIdEventTypes.

        :param payload_encryption: The payload_encryption of this Notificationsubscriptionsv1productsorganizationIdEventTypes.
        :type: bool
        """

        self._payload_encryption = payload_encryption

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Notificationsubscriptionsv1productsorganizationIdEventTypes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
