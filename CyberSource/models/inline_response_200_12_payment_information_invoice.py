# coding: utf-8

"""
    CyberSource Flex API

    Simple PAN tokenization service

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse20012PaymentInformationInvoice(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number': 'str',
        'barcode_number': 'str',
        'expiration_date': 'str'
    }

    attribute_map = {
        'number': 'number',
        'barcode_number': 'barcodeNumber',
        'expiration_date': 'expirationDate'
    }

    def __init__(self, number=None, barcode_number=None, expiration_date=None):
        """
        InlineResponse20012PaymentInformationInvoice - a model defined in Swagger
        """

        self._number = None
        self._barcode_number = None
        self._expiration_date = None

        if number is not None:
          self.number = number
        if barcode_number is not None:
          self.barcode_number = barcode_number
        if expiration_date is not None:
          self.expiration_date = expiration_date

    @property
    def number(self):
        """
        Gets the number of this InlineResponse20012PaymentInformationInvoice.
        Invoice Number.

        :return: The number of this InlineResponse20012PaymentInformationInvoice.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """
        Sets the number of this InlineResponse20012PaymentInformationInvoice.
        Invoice Number.

        :param number: The number of this InlineResponse20012PaymentInformationInvoice.
        :type: str
        """

        self._number = number

    @property
    def barcode_number(self):
        """
        Gets the barcode_number of this InlineResponse20012PaymentInformationInvoice.
        Barcode Number.

        :return: The barcode_number of this InlineResponse20012PaymentInformationInvoice.
        :rtype: str
        """
        return self._barcode_number

    @barcode_number.setter
    def barcode_number(self, barcode_number):
        """
        Sets the barcode_number of this InlineResponse20012PaymentInformationInvoice.
        Barcode Number.

        :param barcode_number: The barcode_number of this InlineResponse20012PaymentInformationInvoice.
        :type: str
        """

        self._barcode_number = barcode_number

    @property
    def expiration_date(self):
        """
        Gets the expiration_date of this InlineResponse20012PaymentInformationInvoice.
        Expiration Date.

        :return: The expiration_date of this InlineResponse20012PaymentInformationInvoice.
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """
        Sets the expiration_date of this InlineResponse20012PaymentInformationInvoice.
        Expiration Date.

        :param expiration_date: The expiration_date of this InlineResponse20012PaymentInformationInvoice.
        :type: str
        """

        self._expiration_date = expiration_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse20012PaymentInformationInvoice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
