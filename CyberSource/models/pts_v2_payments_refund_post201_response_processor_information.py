# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class PtsV2PaymentsRefundPost201ResponseProcessorInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'approval_code': 'str',
        'transaction_id': 'str',
        'forwarded_acquirer_code': 'str',
        'merchant_number': 'str',
        'response_code': 'str',
        'ach_verification': 'PtsV2PaymentsPost201ResponseProcessorInformationAchVerification',
        'network_transaction_id': 'str',
        'settlement_date': 'str',
        'update_time_utc': 'str'
    }

    attribute_map = {
        'approval_code': 'approvalCode',
        'transaction_id': 'transactionId',
        'forwarded_acquirer_code': 'forwardedAcquirerCode',
        'merchant_number': 'merchantNumber',
        'response_code': 'responseCode',
        'ach_verification': 'achVerification',
        'network_transaction_id': 'networkTransactionId',
        'settlement_date': 'settlementDate',
        'update_time_utc': 'updateTimeUtc'
    }

    def __init__(self, approval_code=None, transaction_id=None, forwarded_acquirer_code=None, merchant_number=None, response_code=None, ach_verification=None, network_transaction_id=None, settlement_date=None, update_time_utc=None):
        """
        PtsV2PaymentsRefundPost201ResponseProcessorInformation - a model defined in Swagger
        """

        self._approval_code = None
        self._transaction_id = None
        self._forwarded_acquirer_code = None
        self._merchant_number = None
        self._response_code = None
        self._ach_verification = None
        self._network_transaction_id = None
        self._settlement_date = None
        self._update_time_utc = None

        if approval_code is not None:
          self.approval_code = approval_code
        if transaction_id is not None:
          self.transaction_id = transaction_id
        if forwarded_acquirer_code is not None:
          self.forwarded_acquirer_code = forwarded_acquirer_code
        if merchant_number is not None:
          self.merchant_number = merchant_number
        if response_code is not None:
          self.response_code = response_code
        if ach_verification is not None:
          self.ach_verification = ach_verification
        if network_transaction_id is not None:
          self.network_transaction_id = network_transaction_id
        if settlement_date is not None:
          self.settlement_date = settlement_date
        if update_time_utc is not None:
          self.update_time_utc = update_time_utc

    @property
    def approval_code(self):
        """
        Gets the approval_code of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        Authorization code. Returned only when the processor returns this value.  The length of this value depends on your processor.  Returned by authorization service.  #### PIN debit Authorization code that is returned by the processor.  Returned by PIN debit credit.  #### Elavon Encrypted Account Number Program The returned value is OFFLINE.  #### TSYS Acquiring Solutions The returned value for a successful zero amount authorization is 000000. 

        :return: The approval_code of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        :rtype: str
        """
        return self._approval_code

    @approval_code.setter
    def approval_code(self, approval_code):
        """
        Sets the approval_code of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        Authorization code. Returned only when the processor returns this value.  The length of this value depends on your processor.  Returned by authorization service.  #### PIN debit Authorization code that is returned by the processor.  Returned by PIN debit credit.  #### Elavon Encrypted Account Number Program The returned value is OFFLINE.  #### TSYS Acquiring Solutions The returned value for a successful zero amount authorization is 000000. 

        :param approval_code: The approval_code of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        :type: str
        """

        self._approval_code = approval_code

    @property
    def transaction_id(self):
        """
        Gets the transaction_id of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        Processor transaction ID.  This value identifies the transaction on a host system. This value is supported only for Moneris. It contains this information:   - Terminal used to process the transaction  - Shift during which the transaction took place  - Batch number  - Transaction number within the batch  You must store this value. If you give the customer a receipt, display this value on the receipt.  Example For the value 66012345001069003:   - Terminal ID = 66012345  - Shift number = 001  - Batch number = 069  - Transaction number = 003 

        :return: The transaction_id of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """
        Sets the transaction_id of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        Processor transaction ID.  This value identifies the transaction on a host system. This value is supported only for Moneris. It contains this information:   - Terminal used to process the transaction  - Shift during which the transaction took place  - Batch number  - Transaction number within the batch  You must store this value. If you give the customer a receipt, display this value on the receipt.  Example For the value 66012345001069003:   - Terminal ID = 66012345  - Shift number = 001  - Batch number = 069  - Transaction number = 003 

        :param transaction_id: The transaction_id of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def forwarded_acquirer_code(self):
        """
        Gets the forwarded_acquirer_code of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        Name of the Japanese acquirer that processed the transaction. Returned only for JCN Gateway. Please contact the CyberSource Japan Support Group for more information. 

        :return: The forwarded_acquirer_code of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        :rtype: str
        """
        return self._forwarded_acquirer_code

    @forwarded_acquirer_code.setter
    def forwarded_acquirer_code(self, forwarded_acquirer_code):
        """
        Sets the forwarded_acquirer_code of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        Name of the Japanese acquirer that processed the transaction. Returned only for JCN Gateway. Please contact the CyberSource Japan Support Group for more information. 

        :param forwarded_acquirer_code: The forwarded_acquirer_code of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        :type: str
        """

        self._forwarded_acquirer_code = forwarded_acquirer_code

    @property
    def merchant_number(self):
        """
        Gets the merchant_number of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        Identifier that was assigned to you by your acquirer. This value must be printed on the receipt.  #### Returned by Authorizations and Credits.  This reply field is only supported by merchants who have installed client software on their POS terminals and use these processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX 

        :return: The merchant_number of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        :rtype: str
        """
        return self._merchant_number

    @merchant_number.setter
    def merchant_number(self, merchant_number):
        """
        Sets the merchant_number of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        Identifier that was assigned to you by your acquirer. This value must be printed on the receipt.  #### Returned by Authorizations and Credits.  This reply field is only supported by merchants who have installed client software on their POS terminals and use these processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX 

        :param merchant_number: The merchant_number of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        :type: str
        """

        self._merchant_number = merchant_number

    @property
    def response_code(self):
        """
        Gets the response_code of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        For most processors, this is the error message sent directly from the bank. Returned only when the processor returns this value.  **Important** Do not use this field to evaluate the result of the authorization.  #### PIN debit Response value that is returned by the processor or bank. **Important** Do not use this field to evaluate the results of the transaction request.  Returned by PIN debit credit, PIN debit purchase, and PIN debit reversal.  #### AIBMS If this value is `08`, you can accept the transaction if the customer provides you with identification.  #### Atos This value is the response code sent from Atos and it might also include the response code from the bank. Format: `aa,bb` with the two values separated by a comma and where: - `aa` is the two-digit error message from Atos. - `bb` is the optional two-digit error message from the bank.  #### Comercio Latino This value is the status code and the error or response code received from the processor separated by a colon. Format: [status code]:E[error code] or [status code]:R[response code] Example `2:R06`  #### JCN Gateway Processor-defined detail error code. The associated response category code is in the `processorInformation.responseCategoryCode` field. String (3)  #### paypalgateway Processor generated ID for the itemized detail. 

        :return: The response_code of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        :rtype: str
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """
        Sets the response_code of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        For most processors, this is the error message sent directly from the bank. Returned only when the processor returns this value.  **Important** Do not use this field to evaluate the result of the authorization.  #### PIN debit Response value that is returned by the processor or bank. **Important** Do not use this field to evaluate the results of the transaction request.  Returned by PIN debit credit, PIN debit purchase, and PIN debit reversal.  #### AIBMS If this value is `08`, you can accept the transaction if the customer provides you with identification.  #### Atos This value is the response code sent from Atos and it might also include the response code from the bank. Format: `aa,bb` with the two values separated by a comma and where: - `aa` is the two-digit error message from Atos. - `bb` is the optional two-digit error message from the bank.  #### Comercio Latino This value is the status code and the error or response code received from the processor separated by a colon. Format: [status code]:E[error code] or [status code]:R[response code] Example `2:R06`  #### JCN Gateway Processor-defined detail error code. The associated response category code is in the `processorInformation.responseCategoryCode` field. String (3)  #### paypalgateway Processor generated ID for the itemized detail. 

        :param response_code: The response_code of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        :type: str
        """

        self._response_code = response_code

    @property
    def ach_verification(self):
        """
        Gets the ach_verification of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.

        :return: The ach_verification of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        :rtype: PtsV2PaymentsPost201ResponseProcessorInformationAchVerification
        """
        return self._ach_verification

    @ach_verification.setter
    def ach_verification(self, ach_verification):
        """
        Sets the ach_verification of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.

        :param ach_verification: The ach_verification of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        :type: PtsV2PaymentsPost201ResponseProcessorInformationAchVerification
        """

        self._ach_verification = ach_verification

    @property
    def network_transaction_id(self):
        """
        Gets the network_transaction_id of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        Same value as `processorInformation.transactionId`

        :return: The network_transaction_id of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        :rtype: str
        """
        return self._network_transaction_id

    @network_transaction_id.setter
    def network_transaction_id(self, network_transaction_id):
        """
        Sets the network_transaction_id of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        Same value as `processorInformation.transactionId`

        :param network_transaction_id: The network_transaction_id of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        :type: str
        """

        self._network_transaction_id = network_transaction_id

    @property
    def settlement_date(self):
        """
        Gets the settlement_date of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        Field contains a settlement date. The date is in mmdd format, where: mm = month and dd = day. 

        :return: The settlement_date of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        :rtype: str
        """
        return self._settlement_date

    @settlement_date.setter
    def settlement_date(self, settlement_date):
        """
        Sets the settlement_date of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        Field contains a settlement date. The date is in mmdd format, where: mm = month and dd = day. 

        :param settlement_date: The settlement_date of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        :type: str
        """

        self._settlement_date = settlement_date

    @property
    def update_time_utc(self):
        """
        Gets the update_time_utc of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        The date and time when the transaction was last updated, in Internet date and time format. 

        :return: The update_time_utc of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        :rtype: str
        """
        return self._update_time_utc

    @update_time_utc.setter
    def update_time_utc(self, update_time_utc):
        """
        Sets the update_time_utc of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        The date and time when the transaction was last updated, in Internet date and time format. 

        :param update_time_utc: The update_time_utc of this PtsV2PaymentsRefundPost201ResponseProcessorInformation.
        :type: str
        """

        self._update_time_utc = update_time_utc

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PtsV2PaymentsRefundPost201ResponseProcessorInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
