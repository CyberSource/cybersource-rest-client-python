# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2001Keys(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organization_id': 'str',
        'merchant_name': 'str',
        'key_id': 'str',
        'key_type': 'str',
        'status': 'str',
        'expiration_date': 'date',
        'date_added': 'date',
        'added_by': 'str',
        'date_modified': 'date',
        'modified_by': 'str',
        'version': 'str',
        'serial_number': 'str',
        'issuer_name': 'str'
    }

    attribute_map = {
        'organization_id': 'organizationId',
        'merchant_name': 'merchantName',
        'key_id': 'keyId',
        'key_type': 'keyType',
        'status': 'status',
        'expiration_date': 'expirationDate',
        'date_added': 'dateAdded',
        'added_by': 'addedBy',
        'date_modified': 'dateModified',
        'modified_by': 'modifiedBy',
        'version': 'version',
        'serial_number': 'serialNumber',
        'issuer_name': 'issuerName'
    }

    def __init__(self, organization_id=None, merchant_name=None, key_id=None, key_type=None, status=None, expiration_date=None, date_added=None, added_by=None, date_modified=None, modified_by=None, version=None, serial_number=None, issuer_name=None):
        """
        InlineResponse2001Keys - a model defined in Swagger
        """

        self._organization_id = None
        self._merchant_name = None
        self._key_id = None
        self._key_type = None
        self._status = None
        self._expiration_date = None
        self._date_added = None
        self._added_by = None
        self._date_modified = None
        self._modified_by = None
        self._version = None
        self._serial_number = None
        self._issuer_name = None

        if organization_id is not None:
          self.organization_id = organization_id
        if merchant_name is not None:
          self.merchant_name = merchant_name
        if key_id is not None:
          self.key_id = key_id
        if key_type is not None:
          self.key_type = key_type
        if status is not None:
          self.status = status
        if expiration_date is not None:
          self.expiration_date = expiration_date
        if date_added is not None:
          self.date_added = date_added
        if added_by is not None:
          self.added_by = added_by
        if date_modified is not None:
          self.date_modified = date_modified
        if modified_by is not None:
          self.modified_by = modified_by
        if version is not None:
          self.version = version
        if serial_number is not None:
          self.serial_number = serial_number
        if issuer_name is not None:
          self.issuer_name = issuer_name

    @property
    def organization_id(self):
        """
        Gets the organization_id of this InlineResponse2001Keys.
        Merchant Id

        :return: The organization_id of this InlineResponse2001Keys.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this InlineResponse2001Keys.
        Merchant Id

        :param organization_id: The organization_id of this InlineResponse2001Keys.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def merchant_name(self):
        """
        Gets the merchant_name of this InlineResponse2001Keys.
        Merchant Name

        :return: The merchant_name of this InlineResponse2001Keys.
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """
        Sets the merchant_name of this InlineResponse2001Keys.
        Merchant Name

        :param merchant_name: The merchant_name of this InlineResponse2001Keys.
        :type: str
        """

        self._merchant_name = merchant_name

    @property
    def key_id(self):
        """
        Gets the key_id of this InlineResponse2001Keys.
        Key Id

        :return: The key_id of this InlineResponse2001Keys.
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """
        Sets the key_id of this InlineResponse2001Keys.
        Key Id

        :param key_id: The key_id of this InlineResponse2001Keys.
        :type: str
        """

        self._key_id = key_id

    @property
    def key_type(self):
        """
        Gets the key_type of this InlineResponse2001Keys.
        Key Type

        :return: The key_type of this InlineResponse2001Keys.
        :rtype: str
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type):
        """
        Sets the key_type of this InlineResponse2001Keys.
        Key Type

        :param key_type: The key_type of this InlineResponse2001Keys.
        :type: str
        """

        self._key_type = key_type

    @property
    def status(self):
        """
        Gets the status of this InlineResponse2001Keys.
        Status can be active/inactive

        :return: The status of this InlineResponse2001Keys.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this InlineResponse2001Keys.
        Status can be active/inactive

        :param status: The status of this InlineResponse2001Keys.
        :type: str
        """

        self._status = status

    @property
    def expiration_date(self):
        """
        Gets the expiration_date of this InlineResponse2001Keys.
        Expiry Date. example - 2028-07-15 22:11:56 UTC

        :return: The expiration_date of this InlineResponse2001Keys.
        :rtype: date
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """
        Sets the expiration_date of this InlineResponse2001Keys.
        Expiry Date. example - 2028-07-15 22:11:56 UTC

        :param expiration_date: The expiration_date of this InlineResponse2001Keys.
        :type: date
        """

        self._expiration_date = expiration_date

    @property
    def date_added(self):
        """
        Gets the date_added of this InlineResponse2001Keys.
        Date Addded. example - 2018-04-25 22:11:56 UTC

        :return: The date_added of this InlineResponse2001Keys.
        :rtype: date
        """
        return self._date_added

    @date_added.setter
    def date_added(self, date_added):
        """
        Sets the date_added of this InlineResponse2001Keys.
        Date Addded. example - 2018-04-25 22:11:56 UTC

        :param date_added: The date_added of this InlineResponse2001Keys.
        :type: date
        """

        self._date_added = date_added

    @property
    def added_by(self):
        """
        Gets the added_by of this InlineResponse2001Keys.
        Added By

        :return: The added_by of this InlineResponse2001Keys.
        :rtype: str
        """
        return self._added_by

    @added_by.setter
    def added_by(self, added_by):
        """
        Sets the added_by of this InlineResponse2001Keys.
        Added By

        :param added_by: The added_by of this InlineResponse2001Keys.
        :type: str
        """

        self._added_by = added_by

    @property
    def date_modified(self):
        """
        Gets the date_modified of this InlineResponse2001Keys.
        Modified Date.

        :return: The date_modified of this InlineResponse2001Keys.
        :rtype: date
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """
        Sets the date_modified of this InlineResponse2001Keys.
        Modified Date.

        :param date_modified: The date_modified of this InlineResponse2001Keys.
        :type: date
        """

        self._date_modified = date_modified

    @property
    def modified_by(self):
        """
        Gets the modified_by of this InlineResponse2001Keys.
        Modified By

        :return: The modified_by of this InlineResponse2001Keys.
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """
        Sets the modified_by of this InlineResponse2001Keys.
        Modified By

        :param modified_by: The modified_by of this InlineResponse2001Keys.
        :type: str
        """

        self._modified_by = modified_by

    @property
    def version(self):
        """
        Gets the version of this InlineResponse2001Keys.
        Version

        :return: The version of this InlineResponse2001Keys.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this InlineResponse2001Keys.
        Version

        :param version: The version of this InlineResponse2001Keys.
        :type: str
        """

        self._version = version

    @property
    def serial_number(self):
        """
        Gets the serial_number of this InlineResponse2001Keys.
        Serial Number

        :return: The serial_number of this InlineResponse2001Keys.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """
        Sets the serial_number of this InlineResponse2001Keys.
        Serial Number

        :param serial_number: The serial_number of this InlineResponse2001Keys.
        :type: str
        """

        self._serial_number = serial_number

    @property
    def issuer_name(self):
        """
        Gets the issuer_name of this InlineResponse2001Keys.
        Issuer Name

        :return: The issuer_name of this InlineResponse2001Keys.
        :rtype: str
        """
        return self._issuer_name

    @issuer_name.setter
    def issuer_name(self, issuer_name):
        """
        Sets the issuer_name of this InlineResponse2001Keys.
        Issuer Name

        :param issuer_name: The issuer_name of this InlineResponse2001Keys.
        :type: str
        """

        self._issuer_name = issuer_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2001Keys):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
