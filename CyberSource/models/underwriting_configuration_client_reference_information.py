# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class UnderwritingConfigurationClientReferenceInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_request_id': 'str',
        'application_name': 'str'
    }

    attribute_map = {
        'client_request_id': 'clientRequestId',
        'application_name': 'applicationName'
    }

    def __init__(self, client_request_id=None, application_name=None):
        """
        UnderwritingConfigurationClientReferenceInformation - a model defined in Swagger
        """

        self._client_request_id = None
        self._application_name = None

        if client_request_id is not None:
          self.client_request_id = client_request_id
        if application_name is not None:
          self.application_name = application_name

    @property
    def client_request_id(self):
        """
        Gets the client_request_id of this UnderwritingConfigurationClientReferenceInformation.
        client-generated request reference or tracking number. It is recommended that you send a unique value for each request so that you can perform meaningful searches for the request. 

        :return: The client_request_id of this UnderwritingConfigurationClientReferenceInformation.
        :rtype: str
        """
        return self._client_request_id

    @client_request_id.setter
    def client_request_id(self, client_request_id):
        """
        Sets the client_request_id of this UnderwritingConfigurationClientReferenceInformation.
        client-generated request reference or tracking number. It is recommended that you send a unique value for each request so that you can perform meaningful searches for the request. 

        :param client_request_id: The client_request_id of this UnderwritingConfigurationClientReferenceInformation.
        :type: str
        """

        self._client_request_id = client_request_id

    @property
    def application_name(self):
        """
        Gets the application_name of this UnderwritingConfigurationClientReferenceInformation.
        The name of the application (such as Boarding Workflow or Anet Boarding) that the client uses to send a request to merchant evaluation service.       

        :return: The application_name of this UnderwritingConfigurationClientReferenceInformation.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """
        Sets the application_name of this UnderwritingConfigurationClientReferenceInformation.
        The name of the application (such as Boarding Workflow or Anet Boarding) that the client uses to send a request to merchant evaluation service.       

        :param application_name: The application_name of this UnderwritingConfigurationClientReferenceInformation.
        :type: str
        """

        self._application_name = application_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UnderwritingConfigurationClientReferenceInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
