# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class InlineResponse2013SetupsPaymentsAlternativePaymentMethods(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'configuration_status': 'InlineResponse2013SetupsPaymentsAlternativePaymentMethodsConfigurationStatus',
        'subscription_status': 'InlineResponse2013SetupsPaymentsAlternativePaymentMethodsConfigurationStatus',
        'status': 'str',
        'submit_time_utc': 'datetime'
    }

    attribute_map = {
        'configuration_status': 'configurationStatus',
        'subscription_status': 'subscriptionStatus',
        'status': 'status',
        'submit_time_utc': 'submitTimeUtc'
    }

    def __init__(self, configuration_status=None, subscription_status=None, status=None, submit_time_utc=None):
        """
        InlineResponse2013SetupsPaymentsAlternativePaymentMethods - a model defined in Swagger
        """

        self._configuration_status = None
        self._subscription_status = None
        self._status = None
        self._submit_time_utc = None

        if configuration_status is not None:
          self.configuration_status = configuration_status
        if subscription_status is not None:
          self.subscription_status = subscription_status
        if status is not None:
          self.status = status
        if submit_time_utc is not None:
          self.submit_time_utc = submit_time_utc

    @property
    def configuration_status(self):
        """
        Gets the configuration_status of this InlineResponse2013SetupsPaymentsAlternativePaymentMethods.

        :return: The configuration_status of this InlineResponse2013SetupsPaymentsAlternativePaymentMethods.
        :rtype: InlineResponse2013SetupsPaymentsAlternativePaymentMethodsConfigurationStatus
        """
        return self._configuration_status

    @configuration_status.setter
    def configuration_status(self, configuration_status):
        """
        Sets the configuration_status of this InlineResponse2013SetupsPaymentsAlternativePaymentMethods.

        :param configuration_status: The configuration_status of this InlineResponse2013SetupsPaymentsAlternativePaymentMethods.
        :type: InlineResponse2013SetupsPaymentsAlternativePaymentMethodsConfigurationStatus
        """

        self._configuration_status = configuration_status

    @property
    def subscription_status(self):
        """
        Gets the subscription_status of this InlineResponse2013SetupsPaymentsAlternativePaymentMethods.

        :return: The subscription_status of this InlineResponse2013SetupsPaymentsAlternativePaymentMethods.
        :rtype: InlineResponse2013SetupsPaymentsAlternativePaymentMethodsConfigurationStatus
        """
        return self._subscription_status

    @subscription_status.setter
    def subscription_status(self, subscription_status):
        """
        Sets the subscription_status of this InlineResponse2013SetupsPaymentsAlternativePaymentMethods.

        :param subscription_status: The subscription_status of this InlineResponse2013SetupsPaymentsAlternativePaymentMethods.
        :type: InlineResponse2013SetupsPaymentsAlternativePaymentMethodsConfigurationStatus
        """

        self._subscription_status = subscription_status

    @property
    def status(self):
        """
        Gets the status of this InlineResponse2013SetupsPaymentsAlternativePaymentMethods.
        Possible values: - PROCESSED - PARTIAL_PROCESSED

        :return: The status of this InlineResponse2013SetupsPaymentsAlternativePaymentMethods.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this InlineResponse2013SetupsPaymentsAlternativePaymentMethods.
        Possible values: - PROCESSED - PARTIAL_PROCESSED

        :param status: The status of this InlineResponse2013SetupsPaymentsAlternativePaymentMethods.
        :type: str
        """

        self._status = status

    @property
    def submit_time_utc(self):
        """
        Gets the submit_time_utc of this InlineResponse2013SetupsPaymentsAlternativePaymentMethods.
        Time of request in UTC. `Format: YYYY-MM-DDThh:mm:ssZ` Example: 2024-09-08T09:37:38+0000 

        :return: The submit_time_utc of this InlineResponse2013SetupsPaymentsAlternativePaymentMethods.
        :rtype: datetime
        """
        return self._submit_time_utc

    @submit_time_utc.setter
    def submit_time_utc(self, submit_time_utc):
        """
        Sets the submit_time_utc of this InlineResponse2013SetupsPaymentsAlternativePaymentMethods.
        Time of request in UTC. `Format: YYYY-MM-DDThh:mm:ssZ` Example: 2024-09-08T09:37:38+0000 

        :param submit_time_utc: The submit_time_utc of this InlineResponse2013SetupsPaymentsAlternativePaymentMethods.
        :type: datetime
        """

        self._submit_time_utc = submit_time_utc

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2013SetupsPaymentsAlternativePaymentMethods):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
