# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Notificationsubscriptionsv1webhooksRetryPolicy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'algorithm': 'str',
        'first_retry': 'int',
        'interval': 'int',
        'number_of_retries': 'int',
        'deactivate_flag': 'str',
        'repeat_sequence_count': 'int',
        'repeat_sequence_wait_time': 'int',
        'additional_attributes': 'list[dict(str, str)]'
    }

    attribute_map = {
        'algorithm': 'algorithm',
        'first_retry': 'firstRetry',
        'interval': 'interval',
        'number_of_retries': 'numberOfRetries',
        'deactivate_flag': 'deactivateFlag',
        'repeat_sequence_count': 'repeatSequenceCount',
        'repeat_sequence_wait_time': 'repeatSequenceWaitTime',
        'additional_attributes': 'additionalAttributes'
    }

    def __init__(self, algorithm=None, first_retry=None, interval=None, number_of_retries=None, deactivate_flag=None, repeat_sequence_count=None, repeat_sequence_wait_time=None, additional_attributes=None):
        """
        Notificationsubscriptionsv1webhooksRetryPolicy - a model defined in Swagger
        """

        self._algorithm = None
        self._first_retry = None
        self._interval = None
        self._number_of_retries = None
        self._deactivate_flag = None
        self._repeat_sequence_count = None
        self._repeat_sequence_wait_time = None
        self._additional_attributes = None

        if algorithm is not None:
          self.algorithm = algorithm
        if first_retry is not None:
          self.first_retry = first_retry
        if interval is not None:
          self.interval = interval
        if number_of_retries is not None:
          self.number_of_retries = number_of_retries
        if deactivate_flag is not None:
          self.deactivate_flag = deactivate_flag
        if repeat_sequence_count is not None:
          self.repeat_sequence_count = repeat_sequence_count
        if repeat_sequence_wait_time is not None:
          self.repeat_sequence_wait_time = repeat_sequence_wait_time
        if additional_attributes is not None:
          self.additional_attributes = additional_attributes

    @property
    def algorithm(self):
        """
        Gets the algorithm of this Notificationsubscriptionsv1webhooksRetryPolicy.
        This is used to calculate the Retry Sequence.  Sample calculations using firstRetry=10, interval=30, maxNumberOfRetries=3 Arithmetic = a+r(n-1) Retry 1 - 10 minutes Retry 2 - 10+30x1 = 40 minutes Retry 3 - 10+30x2 = 70 minutes  Geometric = ar^(n-1) Retry 1 - 10 minutes Retry 2 - 10x30^1 = 300 minutes Retry 3 - 10x30^2 = 9,000 minutes 

        :return: The algorithm of this Notificationsubscriptionsv1webhooksRetryPolicy.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """
        Sets the algorithm of this Notificationsubscriptionsv1webhooksRetryPolicy.
        This is used to calculate the Retry Sequence.  Sample calculations using firstRetry=10, interval=30, maxNumberOfRetries=3 Arithmetic = a+r(n-1) Retry 1 - 10 minutes Retry 2 - 10+30x1 = 40 minutes Retry 3 - 10+30x2 = 70 minutes  Geometric = ar^(n-1) Retry 1 - 10 minutes Retry 2 - 10x30^1 = 300 minutes Retry 3 - 10x30^2 = 9,000 minutes 

        :param algorithm: The algorithm of this Notificationsubscriptionsv1webhooksRetryPolicy.
        :type: str
        """

        self._algorithm = algorithm

    @property
    def first_retry(self):
        """
        Gets the first_retry of this Notificationsubscriptionsv1webhooksRetryPolicy.
        When to initiate first retry, after the initial call failed. (in mins).

        :return: The first_retry of this Notificationsubscriptionsv1webhooksRetryPolicy.
        :rtype: int
        """
        return self._first_retry

    @first_retry.setter
    def first_retry(self, first_retry):
        """
        Sets the first_retry of this Notificationsubscriptionsv1webhooksRetryPolicy.
        When to initiate first retry, after the initial call failed. (in mins).

        :param first_retry: The first_retry of this Notificationsubscriptionsv1webhooksRetryPolicy.
        :type: int
        """

        self._first_retry = first_retry

    @property
    def interval(self):
        """
        Gets the interval of this Notificationsubscriptionsv1webhooksRetryPolicy.
        The interval between retries (in mins).

        :return: The interval of this Notificationsubscriptionsv1webhooksRetryPolicy.
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """
        Sets the interval of this Notificationsubscriptionsv1webhooksRetryPolicy.
        The interval between retries (in mins).

        :param interval: The interval of this Notificationsubscriptionsv1webhooksRetryPolicy.
        :type: int
        """

        self._interval = interval

    @property
    def number_of_retries(self):
        """
        Gets the number_of_retries of this Notificationsubscriptionsv1webhooksRetryPolicy.
        The number of retries per sequence.

        :return: The number_of_retries of this Notificationsubscriptionsv1webhooksRetryPolicy.
        :rtype: int
        """
        return self._number_of_retries

    @number_of_retries.setter
    def number_of_retries(self, number_of_retries):
        """
        Sets the number_of_retries of this Notificationsubscriptionsv1webhooksRetryPolicy.
        The number of retries per sequence.

        :param number_of_retries: The number_of_retries of this Notificationsubscriptionsv1webhooksRetryPolicy.
        :type: int
        """

        self._number_of_retries = number_of_retries

    @property
    def deactivate_flag(self):
        """
        Gets the deactivate_flag of this Notificationsubscriptionsv1webhooksRetryPolicy.
        Deactivate the subscription if your retries fail to deliver.  If this is set to `true`, the automatic suspend and resume feature will occur. This would prevent new webhooks from attempting to deliver and to queue up until your healthCheckUrl returns 200 again, then all messages will be sent.  If this is set to `false`, new individual messages will continue to retry and exhaust all failures, but the subscription will stay active. 

        :return: The deactivate_flag of this Notificationsubscriptionsv1webhooksRetryPolicy.
        :rtype: str
        """
        return self._deactivate_flag

    @deactivate_flag.setter
    def deactivate_flag(self, deactivate_flag):
        """
        Sets the deactivate_flag of this Notificationsubscriptionsv1webhooksRetryPolicy.
        Deactivate the subscription if your retries fail to deliver.  If this is set to `true`, the automatic suspend and resume feature will occur. This would prevent new webhooks from attempting to deliver and to queue up until your healthCheckUrl returns 200 again, then all messages will be sent.  If this is set to `false`, new individual messages will continue to retry and exhaust all failures, but the subscription will stay active. 

        :param deactivate_flag: The deactivate_flag of this Notificationsubscriptionsv1webhooksRetryPolicy.
        :type: str
        """

        self._deactivate_flag = deactivate_flag

    @property
    def repeat_sequence_count(self):
        """
        Gets the repeat_sequence_count of this Notificationsubscriptionsv1webhooksRetryPolicy.
        The number of times to repeat the complete retry sequence. 0 => don't repeat the retry sequence 1 => repeat the retry sequence once (R1, R2, R3)+ (R1, R2, R3) 2 => repeat the retry sequence twice (R1, R2, R3) + (R1, R2, R3) + (R1, R2, R3) 

        :return: The repeat_sequence_count of this Notificationsubscriptionsv1webhooksRetryPolicy.
        :rtype: int
        """
        return self._repeat_sequence_count

    @repeat_sequence_count.setter
    def repeat_sequence_count(self, repeat_sequence_count):
        """
        Sets the repeat_sequence_count of this Notificationsubscriptionsv1webhooksRetryPolicy.
        The number of times to repeat the complete retry sequence. 0 => don't repeat the retry sequence 1 => repeat the retry sequence once (R1, R2, R3)+ (R1, R2, R3) 2 => repeat the retry sequence twice (R1, R2, R3) + (R1, R2, R3) + (R1, R2, R3) 

        :param repeat_sequence_count: The repeat_sequence_count of this Notificationsubscriptionsv1webhooksRetryPolicy.
        :type: int
        """

        self._repeat_sequence_count = repeat_sequence_count

    @property
    def repeat_sequence_wait_time(self):
        """
        Gets the repeat_sequence_wait_time of this Notificationsubscriptionsv1webhooksRetryPolicy.
        The time to wait to before repeating the complete retry sequence. Amount of time to wait between each sequence. Sample calculation using repeatSequenceWaitTime=10 (R1, R2, R3) + (10) + (R1, R2, R3) + (10) + (R1, R2, R3) 

        :return: The repeat_sequence_wait_time of this Notificationsubscriptionsv1webhooksRetryPolicy.
        :rtype: int
        """
        return self._repeat_sequence_wait_time

    @repeat_sequence_wait_time.setter
    def repeat_sequence_wait_time(self, repeat_sequence_wait_time):
        """
        Sets the repeat_sequence_wait_time of this Notificationsubscriptionsv1webhooksRetryPolicy.
        The time to wait to before repeating the complete retry sequence. Amount of time to wait between each sequence. Sample calculation using repeatSequenceWaitTime=10 (R1, R2, R3) + (10) + (R1, R2, R3) + (10) + (R1, R2, R3) 

        :param repeat_sequence_wait_time: The repeat_sequence_wait_time of this Notificationsubscriptionsv1webhooksRetryPolicy.
        :type: int
        """

        self._repeat_sequence_wait_time = repeat_sequence_wait_time

    @property
    def additional_attributes(self):
        """
        Gets the additional_attributes of this Notificationsubscriptionsv1webhooksRetryPolicy.
        Additional data, if any.

        :return: The additional_attributes of this Notificationsubscriptionsv1webhooksRetryPolicy.
        :rtype: list[dict(str, str)]
        """
        return self._additional_attributes

    @additional_attributes.setter
    def additional_attributes(self, additional_attributes):
        """
        Sets the additional_attributes of this Notificationsubscriptionsv1webhooksRetryPolicy.
        Additional data, if any.

        :param additional_attributes: The additional_attributes of this Notificationsubscriptionsv1webhooksRetryPolicy.
        :type: list[dict(str, str)]
        """

        self._additional_attributes = additional_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Notificationsubscriptionsv1webhooksRetryPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
