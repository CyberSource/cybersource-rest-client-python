# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class Ptsv2paymentsAgreementInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agreement_id': 'str',
        'id': 'str'
    }

    attribute_map = {
        'agreement_id': 'agreementId',
        'id': 'id'
    }

    def __init__(self, agreement_id=None, id=None):
        """
        Ptsv2paymentsAgreementInformation - a model defined in Swagger
        """

        self._agreement_id = None
        self._id = None

        if agreement_id is not None:
          self.agreement_id = agreement_id
        if id is not None:
          self.id = id

    @property
    def agreement_id(self):
        """
        Gets the agreement_id of this Ptsv2paymentsAgreementInformation.
        Identifier for the mandate being signed for. This mandate id is required for all the subsequent transactions. 

        :return: The agreement_id of this Ptsv2paymentsAgreementInformation.
        :rtype: str
        """
        return self._agreement_id

    @agreement_id.setter
    def agreement_id(self, agreement_id):
        """
        Sets the agreement_id of this Ptsv2paymentsAgreementInformation.
        Identifier for the mandate being signed for. This mandate id is required for all the subsequent transactions. 

        :param agreement_id: The agreement_id of this Ptsv2paymentsAgreementInformation.
        :type: str
        """

        self._agreement_id = agreement_id

    @property
    def id(self):
        """
        Gets the id of this Ptsv2paymentsAgreementInformation.
        The processor specific billing agreement ID. References an approved recurring payment for goods or services. This value is sent by merchant via Cybersource to processor. The value sent in this field is procured by the merchant from the processor. 

        :return: The id of this Ptsv2paymentsAgreementInformation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Ptsv2paymentsAgreementInformation.
        The processor specific billing agreement ID. References an approved recurring payment for goods or services. This value is sent by merchant via Cybersource to processor. The value sent in this field is procured by the merchant from the processor. 

        :param id: The id of this Ptsv2paymentsAgreementInformation.
        :type: str
        """

        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Ptsv2paymentsAgreementInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
