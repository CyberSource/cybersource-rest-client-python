# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class Ptsv1pushfundstransferRecipientInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_information': 'Ptsv1pushfundstransferRecipientInformationPaymentInformation',
        'address1': 'str',
        'address2': 'str',
        'locality': 'str',
        'postal_code': 'str',
        'administrative_area': 'str',
        'country': 'str',
        'first_name': 'str',
        'middle_name': 'str',
        'last_name': 'str',
        'phone_number': 'str',
        'email': 'str',
        'personal_identification': 'Ptsv1pushfundstransferRecipientInformationPersonalIdentification',
        'building_number': 'str',
        'street_name': 'str',
        'type': 'str'
    }

    attribute_map = {
        'payment_information': 'paymentInformation',
        'address1': 'address1',
        'address2': 'address2',
        'locality': 'locality',
        'postal_code': 'postalCode',
        'administrative_area': 'administrativeArea',
        'country': 'country',
        'first_name': 'firstName',
        'middle_name': 'middleName',
        'last_name': 'lastName',
        'phone_number': 'phoneNumber',
        'email': 'email',
        'personal_identification': 'personalIdentification',
        'building_number': 'buildingNumber',
        'street_name': 'streetName',
        'type': 'type'
    }

    def __init__(self, payment_information=None, address1=None, address2=None, locality=None, postal_code=None, administrative_area=None, country=None, first_name=None, middle_name=None, last_name=None, phone_number=None, email=None, personal_identification=None, building_number=None, street_name=None, type=None):
        """
        Ptsv1pushfundstransferRecipientInformation - a model defined in Swagger
        """

        self._payment_information = None
        self._address1 = None
        self._address2 = None
        self._locality = None
        self._postal_code = None
        self._administrative_area = None
        self._country = None
        self._first_name = None
        self._middle_name = None
        self._last_name = None
        self._phone_number = None
        self._email = None
        self._personal_identification = None
        self._building_number = None
        self._street_name = None
        self._type = None

        if payment_information is not None:
          self.payment_information = payment_information
        if address1 is not None:
          self.address1 = address1
        if address2 is not None:
          self.address2 = address2
        if locality is not None:
          self.locality = locality
        if postal_code is not None:
          self.postal_code = postal_code
        if administrative_area is not None:
          self.administrative_area = administrative_area
        if country is not None:
          self.country = country
        if first_name is not None:
          self.first_name = first_name
        if middle_name is not None:
          self.middle_name = middle_name
        if last_name is not None:
          self.last_name = last_name
        if phone_number is not None:
          self.phone_number = phone_number
        if email is not None:
          self.email = email
        if personal_identification is not None:
          self.personal_identification = personal_identification
        if building_number is not None:
          self.building_number = building_number
        if street_name is not None:
          self.street_name = street_name
        if type is not None:
          self.type = type

    @property
    def payment_information(self):
        """
        Gets the payment_information of this Ptsv1pushfundstransferRecipientInformation.

        :return: The payment_information of this Ptsv1pushfundstransferRecipientInformation.
        :rtype: Ptsv1pushfundstransferRecipientInformationPaymentInformation
        """
        return self._payment_information

    @payment_information.setter
    def payment_information(self, payment_information):
        """
        Sets the payment_information of this Ptsv1pushfundstransferRecipientInformation.

        :param payment_information: The payment_information of this Ptsv1pushfundstransferRecipientInformation.
        :type: Ptsv1pushfundstransferRecipientInformationPaymentInformation
        """

        self._payment_information = payment_information

    @property
    def address1(self):
        """
        Gets the address1 of this Ptsv1pushfundstransferRecipientInformation.
        First line of the recipient's address. Required for card payments 

        :return: The address1 of this Ptsv1pushfundstransferRecipientInformation.
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """
        Sets the address1 of this Ptsv1pushfundstransferRecipientInformation.
        First line of the recipient's address. Required for card payments 

        :param address1: The address1 of this Ptsv1pushfundstransferRecipientInformation.
        :type: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """
        Gets the address2 of this Ptsv1pushfundstransferRecipientInformation.
        Second line of the recipient's address 

        :return: The address2 of this Ptsv1pushfundstransferRecipientInformation.
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """
        Sets the address2 of this Ptsv1pushfundstransferRecipientInformation.
        Second line of the recipient's address 

        :param address2: The address2 of this Ptsv1pushfundstransferRecipientInformation.
        :type: str
        """

        self._address2 = address2

    @property
    def locality(self):
        """
        Gets the locality of this Ptsv1pushfundstransferRecipientInformation.
        Recipient city. 

        :return: The locality of this Ptsv1pushfundstransferRecipientInformation.
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """
        Sets the locality of this Ptsv1pushfundstransferRecipientInformation.
        Recipient city. 

        :param locality: The locality of this Ptsv1pushfundstransferRecipientInformation.
        :type: str
        """

        self._locality = locality

    @property
    def postal_code(self):
        """
        Gets the postal_code of this Ptsv1pushfundstransferRecipientInformation.
        Recipient postal code.   For USA, this must be a valid value of 5 digits or 5 digits hyphen 4 digits, for example '63368', '63368-5555'. For other regions, this can be alphanumeric, length 1-10.  Mandatory for card payments. 

        :return: The postal_code of this Ptsv1pushfundstransferRecipientInformation.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """
        Sets the postal_code of this Ptsv1pushfundstransferRecipientInformation.
        Recipient postal code.   For USA, this must be a valid value of 5 digits or 5 digits hyphen 4 digits, for example '63368', '63368-5555'. For other regions, this can be alphanumeric, length 1-10.  Mandatory for card payments. 

        :param postal_code: The postal_code of this Ptsv1pushfundstransferRecipientInformation.
        :type: str
        """

        self._postal_code = postal_code

    @property
    def administrative_area(self):
        """
        Gets the administrative_area of this Ptsv1pushfundstransferRecipientInformation.
        The recipient's province, state or territory. Conditional, required if recipient's country is USA or CAN. Must be an ISO 3166-2 uppercase alpha 2 or 3 character country subdivision code. For example, Missouri is MO.  See https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf  Required for card payments. 

        :return: The administrative_area of this Ptsv1pushfundstransferRecipientInformation.
        :rtype: str
        """
        return self._administrative_area

    @administrative_area.setter
    def administrative_area(self, administrative_area):
        """
        Sets the administrative_area of this Ptsv1pushfundstransferRecipientInformation.
        The recipient's province, state or territory. Conditional, required if recipient's country is USA or CAN. Must be an ISO 3166-2 uppercase alpha 2 or 3 character country subdivision code. For example, Missouri is MO.  See https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf  Required for card payments. 

        :param administrative_area: The administrative_area of this Ptsv1pushfundstransferRecipientInformation.
        :type: str
        """

        self._administrative_area = administrative_area

    @property
    def country(self):
        """
        Gets the country of this Ptsv1pushfundstransferRecipientInformation.
        Recipient country code. Use the ISO Standard Alpha Country Codes.  https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf 

        :return: The country of this Ptsv1pushfundstransferRecipientInformation.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this Ptsv1pushfundstransferRecipientInformation.
        Recipient country code. Use the ISO Standard Alpha Country Codes.  https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf 

        :param country: The country of this Ptsv1pushfundstransferRecipientInformation.
        :type: str
        """

        self._country = country

    @property
    def first_name(self):
        """
        Gets the first_name of this Ptsv1pushfundstransferRecipientInformation.
        First name of recipient. 

        :return: The first_name of this Ptsv1pushfundstransferRecipientInformation.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this Ptsv1pushfundstransferRecipientInformation.
        First name of recipient. 

        :param first_name: The first_name of this Ptsv1pushfundstransferRecipientInformation.
        :type: str
        """

        self._first_name = first_name

    @property
    def middle_name(self):
        """
        Gets the middle_name of this Ptsv1pushfundstransferRecipientInformation.
        Sender's middle name. This field is a passthrough, which means that CyberSource does not verify the value or modify it in any way before sending it to the processor. If the field is not required for the transaction, CyberSource does not forward it to the processor. 

        :return: The middle_name of this Ptsv1pushfundstransferRecipientInformation.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """
        Sets the middle_name of this Ptsv1pushfundstransferRecipientInformation.
        Sender's middle name. This field is a passthrough, which means that CyberSource does not verify the value or modify it in any way before sending it to the processor. If the field is not required for the transaction, CyberSource does not forward it to the processor. 

        :param middle_name: The middle_name of this Ptsv1pushfundstransferRecipientInformation.
        :type: str
        """

        self._middle_name = middle_name

    @property
    def last_name(self):
        """
        Gets the last_name of this Ptsv1pushfundstransferRecipientInformation.
        Last name of recipient. 

        :return: The last_name of this Ptsv1pushfundstransferRecipientInformation.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this Ptsv1pushfundstransferRecipientInformation.
        Last name of recipient. 

        :param last_name: The last_name of this Ptsv1pushfundstransferRecipientInformation.
        :type: str
        """

        self._last_name = last_name

    @property
    def phone_number(self):
        """
        Gets the phone_number of this Ptsv1pushfundstransferRecipientInformation.
        Customer's phone number.  It is recommended that you include the country code when the order is from outside the U.S. 

        :return: The phone_number of this Ptsv1pushfundstransferRecipientInformation.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """
        Sets the phone_number of this Ptsv1pushfundstransferRecipientInformation.
        Customer's phone number.  It is recommended that you include the country code when the order is from outside the U.S. 

        :param phone_number: The phone_number of this Ptsv1pushfundstransferRecipientInformation.
        :type: str
        """

        self._phone_number = phone_number

    @property
    def email(self):
        """
        Gets the email of this Ptsv1pushfundstransferRecipientInformation.
        Customer's email address, including the full domain name. 

        :return: The email of this Ptsv1pushfundstransferRecipientInformation.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Ptsv1pushfundstransferRecipientInformation.
        Customer's email address, including the full domain name. 

        :param email: The email of this Ptsv1pushfundstransferRecipientInformation.
        :type: str
        """

        self._email = email

    @property
    def personal_identification(self):
        """
        Gets the personal_identification of this Ptsv1pushfundstransferRecipientInformation.

        :return: The personal_identification of this Ptsv1pushfundstransferRecipientInformation.
        :rtype: Ptsv1pushfundstransferRecipientInformationPersonalIdentification
        """
        return self._personal_identification

    @personal_identification.setter
    def personal_identification(self, personal_identification):
        """
        Sets the personal_identification of this Ptsv1pushfundstransferRecipientInformation.

        :param personal_identification: The personal_identification of this Ptsv1pushfundstransferRecipientInformation.
        :type: Ptsv1pushfundstransferRecipientInformationPersonalIdentification
        """

        self._personal_identification = personal_identification

    @property
    def building_number(self):
        """
        Gets the building_number of this Ptsv1pushfundstransferRecipientInformation.
        Building number in the street address.  For example, if the street address is: Rua da Quitanda 187 then the building number is 187.  Applicable to domestic Colombia transactions only. 

        :return: The building_number of this Ptsv1pushfundstransferRecipientInformation.
        :rtype: str
        """
        return self._building_number

    @building_number.setter
    def building_number(self, building_number):
        """
        Sets the building_number of this Ptsv1pushfundstransferRecipientInformation.
        Building number in the street address.  For example, if the street address is: Rua da Quitanda 187 then the building number is 187.  Applicable to domestic Colombia transactions only. 

        :param building_number: The building_number of this Ptsv1pushfundstransferRecipientInformation.
        :type: str
        """

        self._building_number = building_number

    @property
    def street_name(self):
        """
        Gets the street_name of this Ptsv1pushfundstransferRecipientInformation.
        This field contains the street name of the recipient's address.  Applicable to domestic Colombia transactions only. 

        :return: The street_name of this Ptsv1pushfundstransferRecipientInformation.
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """
        Sets the street_name of this Ptsv1pushfundstransferRecipientInformation.
        This field contains the street name of the recipient's address.  Applicable to domestic Colombia transactions only. 

        :param street_name: The street_name of this Ptsv1pushfundstransferRecipientInformation.
        :type: str
        """

        self._street_name = street_name

    @property
    def type(self):
        """
        Gets the type of this Ptsv1pushfundstransferRecipientInformation.
        `B` for Business or `I` for individual. 

        :return: The type of this Ptsv1pushfundstransferRecipientInformation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Ptsv1pushfundstransferRecipientInformation.
        `B` for Business or `I` for individual. 

        :param type: The type of this Ptsv1pushfundstransferRecipientInformation.
        :type: str
        """

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Ptsv1pushfundstransferRecipientInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
