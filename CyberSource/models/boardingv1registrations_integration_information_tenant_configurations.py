# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Boardingv1registrationsIntegrationInformationTenantConfigurations(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'solution_id': 'str',
        'tenant_information': 'Boardingv1registrationsIntegrationInformationTenantInformation'
    }

    attribute_map = {
        'solution_id': 'solutionId',
        'tenant_information': 'tenantInformation'
    }

    def __init__(self, solution_id=None, tenant_information=None):
        """
        Boardingv1registrationsIntegrationInformationTenantConfigurations - a model defined in Swagger
        """

        self._solution_id = None
        self._tenant_information = None

        self.solution_id = solution_id
        if tenant_information is not None:
          self.tenant_information = tenant_information

    @property
    def solution_id(self):
        """
        Gets the solution_id of this Boardingv1registrationsIntegrationInformationTenantConfigurations.
        The solutionId is the unique identifier for this system resource. Partner can use it to reference the specific solution through out the system. 

        :return: The solution_id of this Boardingv1registrationsIntegrationInformationTenantConfigurations.
        :rtype: str
        """
        return self._solution_id

    @solution_id.setter
    def solution_id(self, solution_id):
        """
        Sets the solution_id of this Boardingv1registrationsIntegrationInformationTenantConfigurations.
        The solutionId is the unique identifier for this system resource. Partner can use it to reference the specific solution through out the system. 

        :param solution_id: The solution_id of this Boardingv1registrationsIntegrationInformationTenantConfigurations.
        :type: str
        """
        if solution_id is None:
            raise ValueError("Invalid value for `solution_id`, must not be `None`")
        if solution_id is not None and not re.search('^[0-9a-zA-Z_]+$', solution_id):
            raise ValueError("Invalid value for `solution_id`, must be a follow pattern or equal to `/^[0-9a-zA-Z_]+$/`")

        self._solution_id = solution_id

    @property
    def tenant_information(self):
        """
        Gets the tenant_information of this Boardingv1registrationsIntegrationInformationTenantConfigurations.

        :return: The tenant_information of this Boardingv1registrationsIntegrationInformationTenantConfigurations.
        :rtype: Boardingv1registrationsIntegrationInformationTenantInformation
        """
        return self._tenant_information

    @tenant_information.setter
    def tenant_information(self, tenant_information):
        """
        Sets the tenant_information of this Boardingv1registrationsIntegrationInformationTenantConfigurations.

        :param tenant_information: The tenant_information of this Boardingv1registrationsIntegrationInformationTenantConfigurations.
        :type: Boardingv1registrationsIntegrationInformationTenantInformation
        """

        self._tenant_information = tenant_information

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Boardingv1registrationsIntegrationInformationTenantConfigurations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
