# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class InlineResponse2011PayoutInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'push_funds': 'InlineResponse2011PayoutInformationPushFunds',
        'pull_funds': 'InlineResponse2011PayoutInformationPullFunds',
        'geo_restriction_indicator': 'str'
    }

    attribute_map = {
        'push_funds': 'pushFunds',
        'pull_funds': 'pullFunds',
        'geo_restriction_indicator': 'geoRestrictionIndicator'
    }

    def __init__(self, push_funds=None, pull_funds=None, geo_restriction_indicator=None):
        """
        InlineResponse2011PayoutInformation - a model defined in Swagger
        """

        self._push_funds = None
        self._pull_funds = None
        self._geo_restriction_indicator = None

        if push_funds is not None:
          self.push_funds = push_funds
        if pull_funds is not None:
          self.pull_funds = pull_funds
        if geo_restriction_indicator is not None:
          self.geo_restriction_indicator = geo_restriction_indicator

    @property
    def push_funds(self):
        """
        Gets the push_funds of this InlineResponse2011PayoutInformation.

        :return: The push_funds of this InlineResponse2011PayoutInformation.
        :rtype: InlineResponse2011PayoutInformationPushFunds
        """
        return self._push_funds

    @push_funds.setter
    def push_funds(self, push_funds):
        """
        Sets the push_funds of this InlineResponse2011PayoutInformation.

        :param push_funds: The push_funds of this InlineResponse2011PayoutInformation.
        :type: InlineResponse2011PayoutInformationPushFunds
        """

        self._push_funds = push_funds

    @property
    def pull_funds(self):
        """
        Gets the pull_funds of this InlineResponse2011PayoutInformation.

        :return: The pull_funds of this InlineResponse2011PayoutInformation.
        :rtype: InlineResponse2011PayoutInformationPullFunds
        """
        return self._pull_funds

    @pull_funds.setter
    def pull_funds(self, pull_funds):
        """
        Sets the pull_funds of this InlineResponse2011PayoutInformation.

        :param pull_funds: The pull_funds of this InlineResponse2011PayoutInformation.
        :type: InlineResponse2011PayoutInformationPullFunds
        """

        self._pull_funds = pull_funds

    @property
    def geo_restriction_indicator(self):
        """
        Gets the geo_restriction_indicator of this InlineResponse2011PayoutInformation.
        This field indicates if the recipient issuer can accept transactions from the originator country. Possible values:   - `Y`   - `N` 

        :return: The geo_restriction_indicator of this InlineResponse2011PayoutInformation.
        :rtype: str
        """
        return self._geo_restriction_indicator

    @geo_restriction_indicator.setter
    def geo_restriction_indicator(self, geo_restriction_indicator):
        """
        Sets the geo_restriction_indicator of this InlineResponse2011PayoutInformation.
        This field indicates if the recipient issuer can accept transactions from the originator country. Possible values:   - `Y`   - `N` 

        :param geo_restriction_indicator: The geo_restriction_indicator of this InlineResponse2011PayoutInformation.
        :type: str
        """

        self._geo_restriction_indicator = geo_restriction_indicator

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2011PayoutInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
