# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class Ptsv2intentsPaymentInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_type': 'Ptsv2intentsPaymentInformationPaymentType',
        'tokenized_payment_method': 'Ptsv2intentsPaymentInformationTokenizedPaymentMethod',
        'industry_type': 'str',
        'e_wallet': 'Ptsv2intentsPaymentInformationEWallet'
    }

    attribute_map = {
        'payment_type': 'paymentType',
        'tokenized_payment_method': 'tokenizedPaymentMethod',
        'industry_type': 'industryType',
        'e_wallet': 'eWallet'
    }

    def __init__(self, payment_type=None, tokenized_payment_method=None, industry_type=None, e_wallet=None):
        """
        Ptsv2intentsPaymentInformation - a model defined in Swagger
        """

        self._payment_type = None
        self._tokenized_payment_method = None
        self._industry_type = None
        self._e_wallet = None

        if payment_type is not None:
          self.payment_type = payment_type
        if tokenized_payment_method is not None:
          self.tokenized_payment_method = tokenized_payment_method
        if industry_type is not None:
          self.industry_type = industry_type
        if e_wallet is not None:
          self.e_wallet = e_wallet

    @property
    def payment_type(self):
        """
        Gets the payment_type of this Ptsv2intentsPaymentInformation.

        :return: The payment_type of this Ptsv2intentsPaymentInformation.
        :rtype: Ptsv2intentsPaymentInformationPaymentType
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """
        Sets the payment_type of this Ptsv2intentsPaymentInformation.

        :param payment_type: The payment_type of this Ptsv2intentsPaymentInformation.
        :type: Ptsv2intentsPaymentInformationPaymentType
        """

        self._payment_type = payment_type

    @property
    def tokenized_payment_method(self):
        """
        Gets the tokenized_payment_method of this Ptsv2intentsPaymentInformation.

        :return: The tokenized_payment_method of this Ptsv2intentsPaymentInformation.
        :rtype: Ptsv2intentsPaymentInformationTokenizedPaymentMethod
        """
        return self._tokenized_payment_method

    @tokenized_payment_method.setter
    def tokenized_payment_method(self, tokenized_payment_method):
        """
        Sets the tokenized_payment_method of this Ptsv2intentsPaymentInformation.

        :param tokenized_payment_method: The tokenized_payment_method of this Ptsv2intentsPaymentInformation.
        :type: Ptsv2intentsPaymentInformationTokenizedPaymentMethod
        """

        self._tokenized_payment_method = tokenized_payment_method

    @property
    def industry_type(self):
        """
        Gets the industry_type of this Ptsv2intentsPaymentInformation.
        Indicates the industry type. Possible Values: - \"Events\" - \"Ticketing\" - \"Fuel\" - \"GAMING\" - \"DIGITAL GOODS\" - \"TELCO\" - \"Token Service Providers\" - \"Gambling\" - \"CFDs\" - \"car rental\" - \"hotel\" - \"transportation\" - \"travel package\" - \"Cruise Line\" - \"P2P\" - \"Retail\" - \"Food\" - \"Groceries\" - \"Ride Sharing\" - \"Taxi\" - \"Remittance\" - \"Crypto\" - \"Marketplaces\" 

        :return: The industry_type of this Ptsv2intentsPaymentInformation.
        :rtype: str
        """
        return self._industry_type

    @industry_type.setter
    def industry_type(self, industry_type):
        """
        Sets the industry_type of this Ptsv2intentsPaymentInformation.
        Indicates the industry type. Possible Values: - \"Events\" - \"Ticketing\" - \"Fuel\" - \"GAMING\" - \"DIGITAL GOODS\" - \"TELCO\" - \"Token Service Providers\" - \"Gambling\" - \"CFDs\" - \"car rental\" - \"hotel\" - \"transportation\" - \"travel package\" - \"Cruise Line\" - \"P2P\" - \"Retail\" - \"Food\" - \"Groceries\" - \"Ride Sharing\" - \"Taxi\" - \"Remittance\" - \"Crypto\" - \"Marketplaces\" 

        :param industry_type: The industry_type of this Ptsv2intentsPaymentInformation.
        :type: str
        """

        self._industry_type = industry_type

    @property
    def e_wallet(self):
        """
        Gets the e_wallet of this Ptsv2intentsPaymentInformation.

        :return: The e_wallet of this Ptsv2intentsPaymentInformation.
        :rtype: Ptsv2intentsPaymentInformationEWallet
        """
        return self._e_wallet

    @e_wallet.setter
    def e_wallet(self, e_wallet):
        """
        Sets the e_wallet of this Ptsv2intentsPaymentInformation.

        :param e_wallet: The e_wallet of this Ptsv2intentsPaymentInformation.
        :type: Ptsv2intentsPaymentInformationEWallet
        """

        self._e_wallet = e_wallet

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Ptsv2intentsPaymentInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
