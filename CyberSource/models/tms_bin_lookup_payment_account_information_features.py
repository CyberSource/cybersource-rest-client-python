# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class TmsBinLookupPaymentAccountInformationFeatures(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_funding_source': 'str',
        'account_funding_source_sub_type': 'str',
        'card_product': 'str',
        'message_type': 'str',
        'acceptance_level': 'str',
        'card_platform': 'str',
        'combo_card': 'str',
        'corporate_purchase': 'bool',
        'health_card': 'bool',
        'shared_bin': 'bool',
        'pos_domestic_only': 'bool',
        'gambling_allowed': 'bool',
        'commercial_card_level2': 'bool',
        'commercial_card_level3': 'bool',
        'exempt_bin': 'bool',
        'account_level_management': 'bool',
        'online_gambling_block': 'bool',
        'auto_substantiation': 'bool',
        'flex_credential': 'bool'
    }

    attribute_map = {
        'account_funding_source': 'accountFundingSource',
        'account_funding_source_sub_type': 'accountFundingSourceSubType',
        'card_product': 'cardProduct',
        'message_type': 'messageType',
        'acceptance_level': 'acceptanceLevel',
        'card_platform': 'cardPlatform',
        'combo_card': 'comboCard',
        'corporate_purchase': 'corporatePurchase',
        'health_card': 'healthCard',
        'shared_bin': 'sharedBIN',
        'pos_domestic_only': 'posDomesticOnly',
        'gambling_allowed': 'gamblingAllowed',
        'commercial_card_level2': 'commercialCardLevel2',
        'commercial_card_level3': 'commercialCardLevel3',
        'exempt_bin': 'exemptBIN',
        'account_level_management': 'accountLevelManagement',
        'online_gambling_block': 'onlineGamblingBlock',
        'auto_substantiation': 'autoSubstantiation',
        'flex_credential': 'flexCredential'
    }

    def __init__(self, account_funding_source=None, account_funding_source_sub_type=None, card_product=None, message_type=None, acceptance_level=None, card_platform=None, combo_card=None, corporate_purchase=None, health_card=None, shared_bin=None, pos_domestic_only=None, gambling_allowed=None, commercial_card_level2=None, commercial_card_level3=None, exempt_bin=None, account_level_management=None, online_gambling_block=None, auto_substantiation=None, flex_credential=None):
        """
        TmsBinLookupPaymentAccountInformationFeatures - a model defined in Swagger
        """

        self._account_funding_source = None
        self._account_funding_source_sub_type = None
        self._card_product = None
        self._message_type = None
        self._acceptance_level = None
        self._card_platform = None
        self._combo_card = None
        self._corporate_purchase = None
        self._health_card = None
        self._shared_bin = None
        self._pos_domestic_only = None
        self._gambling_allowed = None
        self._commercial_card_level2 = None
        self._commercial_card_level3 = None
        self._exempt_bin = None
        self._account_level_management = None
        self._online_gambling_block = None
        self._auto_substantiation = None
        self._flex_credential = None

        if account_funding_source is not None:
          self.account_funding_source = account_funding_source
        if account_funding_source_sub_type is not None:
          self.account_funding_source_sub_type = account_funding_source_sub_type
        if card_product is not None:
          self.card_product = card_product
        if message_type is not None:
          self.message_type = message_type
        if acceptance_level is not None:
          self.acceptance_level = acceptance_level
        if card_platform is not None:
          self.card_platform = card_platform
        if combo_card is not None:
          self.combo_card = combo_card
        if corporate_purchase is not None:
          self.corporate_purchase = corporate_purchase
        if health_card is not None:
          self.health_card = health_card
        if shared_bin is not None:
          self.shared_bin = shared_bin
        if pos_domestic_only is not None:
          self.pos_domestic_only = pos_domestic_only
        if gambling_allowed is not None:
          self.gambling_allowed = gambling_allowed
        if commercial_card_level2 is not None:
          self.commercial_card_level2 = commercial_card_level2
        if commercial_card_level3 is not None:
          self.commercial_card_level3 = commercial_card_level3
        if exempt_bin is not None:
          self.exempt_bin = exempt_bin
        if account_level_management is not None:
          self.account_level_management = account_level_management
        if online_gambling_block is not None:
          self.online_gambling_block = online_gambling_block
        if auto_substantiation is not None:
          self.auto_substantiation = auto_substantiation
        if flex_credential is not None:
          self.flex_credential = flex_credential

    @property
    def account_funding_source(self):
        """
        Gets the account_funding_source of this TmsBinLookupPaymentAccountInformationFeatures.
        This field contains the account funding source. Possible values:   - `CREDIT`   - `DEBIT`   - `PREPAID`   - `DEFERRED DEBIT`   - `CHARGE` 

        :return: The account_funding_source of this TmsBinLookupPaymentAccountInformationFeatures.
        :rtype: str
        """
        return self._account_funding_source

    @account_funding_source.setter
    def account_funding_source(self, account_funding_source):
        """
        Sets the account_funding_source of this TmsBinLookupPaymentAccountInformationFeatures.
        This field contains the account funding source. Possible values:   - `CREDIT`   - `DEBIT`   - `PREPAID`   - `DEFERRED DEBIT`   - `CHARGE` 

        :param account_funding_source: The account_funding_source of this TmsBinLookupPaymentAccountInformationFeatures.
        :type: str
        """

        self._account_funding_source = account_funding_source

    @property
    def account_funding_source_sub_type(self):
        """
        Gets the account_funding_source_sub_type of this TmsBinLookupPaymentAccountInformationFeatures.
        This field contains the type of prepaid card. Possible values:   - `Reloadable`   - `Non-reloadable` 

        :return: The account_funding_source_sub_type of this TmsBinLookupPaymentAccountInformationFeatures.
        :rtype: str
        """
        return self._account_funding_source_sub_type

    @account_funding_source_sub_type.setter
    def account_funding_source_sub_type(self, account_funding_source_sub_type):
        """
        Sets the account_funding_source_sub_type of this TmsBinLookupPaymentAccountInformationFeatures.
        This field contains the type of prepaid card. Possible values:   - `Reloadable`   - `Non-reloadable` 

        :param account_funding_source_sub_type: The account_funding_source_sub_type of this TmsBinLookupPaymentAccountInformationFeatures.
        :type: str
        """

        self._account_funding_source_sub_type = account_funding_source_sub_type

    @property
    def card_product(self):
        """
        Gets the card_product of this TmsBinLookupPaymentAccountInformationFeatures.
        This field contains the type of issuer product. Example values:   - Visa Classic   - Visa Signature   - Visa Infinite 

        :return: The card_product of this TmsBinLookupPaymentAccountInformationFeatures.
        :rtype: str
        """
        return self._card_product

    @card_product.setter
    def card_product(self, card_product):
        """
        Sets the card_product of this TmsBinLookupPaymentAccountInformationFeatures.
        This field contains the type of issuer product. Example values:   - Visa Classic   - Visa Signature   - Visa Infinite 

        :param card_product: The card_product of this TmsBinLookupPaymentAccountInformationFeatures.
        :type: str
        """

        self._card_product = card_product

    @property
    def message_type(self):
        """
        Gets the message_type of this TmsBinLookupPaymentAccountInformationFeatures.
        This field contains the type of BIN based authentication. Possible values:   - `S`: Single Message   - `D`: Dual Message 

        :return: The message_type of this TmsBinLookupPaymentAccountInformationFeatures.
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """
        Sets the message_type of this TmsBinLookupPaymentAccountInformationFeatures.
        This field contains the type of BIN based authentication. Possible values:   - `S`: Single Message   - `D`: Dual Message 

        :param message_type: The message_type of this TmsBinLookupPaymentAccountInformationFeatures.
        :type: str
        """

        self._message_type = message_type

    @property
    def acceptance_level(self):
        """
        Gets the acceptance_level of this TmsBinLookupPaymentAccountInformationFeatures.
        This field contains the acceptance level of the PAN. Possible values:   - `0` : Normal   - `1` : Monitor   - `2` : Refuse   - `3` : Not Allowed   - `4` : Private   - `5` : Test 

        :return: The acceptance_level of this TmsBinLookupPaymentAccountInformationFeatures.
        :rtype: str
        """
        return self._acceptance_level

    @acceptance_level.setter
    def acceptance_level(self, acceptance_level):
        """
        Sets the acceptance_level of this TmsBinLookupPaymentAccountInformationFeatures.
        This field contains the acceptance level of the PAN. Possible values:   - `0` : Normal   - `1` : Monitor   - `2` : Refuse   - `3` : Not Allowed   - `4` : Private   - `5` : Test 

        :param acceptance_level: The acceptance_level of this TmsBinLookupPaymentAccountInformationFeatures.
        :type: str
        """

        self._acceptance_level = acceptance_level

    @property
    def card_platform(self):
        """
        Gets the card_platform of this TmsBinLookupPaymentAccountInformationFeatures.
        This field contains the type of card platform. Possible values:   - `BUSINESS`   - `CONSUMER`   - `CORPORATE`   - `COMMERCIAL`   - `GOVERNMENT` 

        :return: The card_platform of this TmsBinLookupPaymentAccountInformationFeatures.
        :rtype: str
        """
        return self._card_platform

    @card_platform.setter
    def card_platform(self, card_platform):
        """
        Sets the card_platform of this TmsBinLookupPaymentAccountInformationFeatures.
        This field contains the type of card platform. Possible values:   - `BUSINESS`   - `CONSUMER`   - `CORPORATE`   - `COMMERCIAL`   - `GOVERNMENT` 

        :param card_platform: The card_platform of this TmsBinLookupPaymentAccountInformationFeatures.
        :type: str
        """

        self._card_platform = card_platform

    @property
    def combo_card(self):
        """
        Gets the combo_card of this TmsBinLookupPaymentAccountInformationFeatures.
        This field indicates the type of combo card. Possible values:   - 0 (Not a combo card)   - 1 (Credit and Prepaid Combo card)   - 2 (Credit and Debit Combo card)   - 3 (Prepaid Credit and Prepaid Debit combo card) 

        :return: The combo_card of this TmsBinLookupPaymentAccountInformationFeatures.
        :rtype: str
        """
        return self._combo_card

    @combo_card.setter
    def combo_card(self, combo_card):
        """
        Sets the combo_card of this TmsBinLookupPaymentAccountInformationFeatures.
        This field indicates the type of combo card. Possible values:   - 0 (Not a combo card)   - 1 (Credit and Prepaid Combo card)   - 2 (Credit and Debit Combo card)   - 3 (Prepaid Credit and Prepaid Debit combo card) 

        :param combo_card: The combo_card of this TmsBinLookupPaymentAccountInformationFeatures.
        :type: str
        """

        self._combo_card = combo_card

    @property
    def corporate_purchase(self):
        """
        Gets the corporate_purchase of this TmsBinLookupPaymentAccountInformationFeatures.
        This field indicates if the instrument can be used for corporate purchasing. This field is only applicable for American Express cards. Possible values:   - `true`   - `false` 

        :return: The corporate_purchase of this TmsBinLookupPaymentAccountInformationFeatures.
        :rtype: bool
        """
        return self._corporate_purchase

    @corporate_purchase.setter
    def corporate_purchase(self, corporate_purchase):
        """
        Sets the corporate_purchase of this TmsBinLookupPaymentAccountInformationFeatures.
        This field indicates if the instrument can be used for corporate purchasing. This field is only applicable for American Express cards. Possible values:   - `true`   - `false` 

        :param corporate_purchase: The corporate_purchase of this TmsBinLookupPaymentAccountInformationFeatures.
        :type: bool
        """

        self._corporate_purchase = corporate_purchase

    @property
    def health_card(self):
        """
        Gets the health_card of this TmsBinLookupPaymentAccountInformationFeatures.
        This field indicates if the BIN is for healthcare (HSA/FSA). Currently, this field is only supported for Visa BINs. Possible values:     - `true`     - `false` 

        :return: The health_card of this TmsBinLookupPaymentAccountInformationFeatures.
        :rtype: bool
        """
        return self._health_card

    @health_card.setter
    def health_card(self, health_card):
        """
        Sets the health_card of this TmsBinLookupPaymentAccountInformationFeatures.
        This field indicates if the BIN is for healthcare (HSA/FSA). Currently, this field is only supported for Visa BINs. Possible values:     - `true`     - `false` 

        :param health_card: The health_card of this TmsBinLookupPaymentAccountInformationFeatures.
        :type: bool
        """

        self._health_card = health_card

    @property
    def shared_bin(self):
        """
        Gets the shared_bin of this TmsBinLookupPaymentAccountInformationFeatures.
        This field indicates if the BIN is shared by multiple issuers Possible values:     - `true`     - `false` 

        :return: The shared_bin of this TmsBinLookupPaymentAccountInformationFeatures.
        :rtype: bool
        """
        return self._shared_bin

    @shared_bin.setter
    def shared_bin(self, shared_bin):
        """
        Sets the shared_bin of this TmsBinLookupPaymentAccountInformationFeatures.
        This field indicates if the BIN is shared by multiple issuers Possible values:     - `true`     - `false` 

        :param shared_bin: The shared_bin of this TmsBinLookupPaymentAccountInformationFeatures.
        :type: bool
        """

        self._shared_bin = shared_bin

    @property
    def pos_domestic_only(self):
        """
        Gets the pos_domestic_only of this TmsBinLookupPaymentAccountInformationFeatures.
        This field indicates if the BIN is valid only for POS domestic usage. Possible values:     - `true`     - `false` 

        :return: The pos_domestic_only of this TmsBinLookupPaymentAccountInformationFeatures.
        :rtype: bool
        """
        return self._pos_domestic_only

    @pos_domestic_only.setter
    def pos_domestic_only(self, pos_domestic_only):
        """
        Sets the pos_domestic_only of this TmsBinLookupPaymentAccountInformationFeatures.
        This field indicates if the BIN is valid only for POS domestic usage. Possible values:     - `true`     - `false` 

        :param pos_domestic_only: The pos_domestic_only of this TmsBinLookupPaymentAccountInformationFeatures.
        :type: bool
        """

        self._pos_domestic_only = pos_domestic_only

    @property
    def gambling_allowed(self):
        """
        Gets the gambling_allowed of this TmsBinLookupPaymentAccountInformationFeatures.
        This field indicates if gambling transactions are allowed on the BIN. Possible values:     - `true`     - `false` 

        :return: The gambling_allowed of this TmsBinLookupPaymentAccountInformationFeatures.
        :rtype: bool
        """
        return self._gambling_allowed

    @gambling_allowed.setter
    def gambling_allowed(self, gambling_allowed):
        """
        Sets the gambling_allowed of this TmsBinLookupPaymentAccountInformationFeatures.
        This field indicates if gambling transactions are allowed on the BIN. Possible values:     - `true`     - `false` 

        :param gambling_allowed: The gambling_allowed of this TmsBinLookupPaymentAccountInformationFeatures.
        :type: bool
        """

        self._gambling_allowed = gambling_allowed

    @property
    def commercial_card_level2(self):
        """
        Gets the commercial_card_level2 of this TmsBinLookupPaymentAccountInformationFeatures.
        This field indicates if a transaction on the instrument qualifies for level 2 interchange rates. Possible values:     - `true`     - `false` 

        :return: The commercial_card_level2 of this TmsBinLookupPaymentAccountInformationFeatures.
        :rtype: bool
        """
        return self._commercial_card_level2

    @commercial_card_level2.setter
    def commercial_card_level2(self, commercial_card_level2):
        """
        Sets the commercial_card_level2 of this TmsBinLookupPaymentAccountInformationFeatures.
        This field indicates if a transaction on the instrument qualifies for level 2 interchange rates. Possible values:     - `true`     - `false` 

        :param commercial_card_level2: The commercial_card_level2 of this TmsBinLookupPaymentAccountInformationFeatures.
        :type: bool
        """

        self._commercial_card_level2 = commercial_card_level2

    @property
    def commercial_card_level3(self):
        """
        Gets the commercial_card_level3 of this TmsBinLookupPaymentAccountInformationFeatures.
        This field indicates if a transaction on the instrument qualifies for level 3 interchange rates. Possible values:     - `true`     - `false` 

        :return: The commercial_card_level3 of this TmsBinLookupPaymentAccountInformationFeatures.
        :rtype: bool
        """
        return self._commercial_card_level3

    @commercial_card_level3.setter
    def commercial_card_level3(self, commercial_card_level3):
        """
        Sets the commercial_card_level3 of this TmsBinLookupPaymentAccountInformationFeatures.
        This field indicates if a transaction on the instrument qualifies for level 3 interchange rates. Possible values:     - `true`     - `false` 

        :param commercial_card_level3: The commercial_card_level3 of this TmsBinLookupPaymentAccountInformationFeatures.
        :type: bool
        """

        self._commercial_card_level3 = commercial_card_level3

    @property
    def exempt_bin(self):
        """
        Gets the exempt_bin of this TmsBinLookupPaymentAccountInformationFeatures.
        This field indicates if a transaction on the instrument qualifies for government exempt interchange fee. Possible values:     - `true`     - `false` 

        :return: The exempt_bin of this TmsBinLookupPaymentAccountInformationFeatures.
        :rtype: bool
        """
        return self._exempt_bin

    @exempt_bin.setter
    def exempt_bin(self, exempt_bin):
        """
        Sets the exempt_bin of this TmsBinLookupPaymentAccountInformationFeatures.
        This field indicates if a transaction on the instrument qualifies for government exempt interchange fee. Possible values:     - `true`     - `false` 

        :param exempt_bin: The exempt_bin of this TmsBinLookupPaymentAccountInformationFeatures.
        :type: bool
        """

        self._exempt_bin = exempt_bin

    @property
    def account_level_management(self):
        """
        Gets the account_level_management of this TmsBinLookupPaymentAccountInformationFeatures.
        This field indicates if the BIN participates in Account Level Management (ALM). Possible values:     - `true`     - `false` 

        :return: The account_level_management of this TmsBinLookupPaymentAccountInformationFeatures.
        :rtype: bool
        """
        return self._account_level_management

    @account_level_management.setter
    def account_level_management(self, account_level_management):
        """
        Sets the account_level_management of this TmsBinLookupPaymentAccountInformationFeatures.
        This field indicates if the BIN participates in Account Level Management (ALM). Possible values:     - `true`     - `false` 

        :param account_level_management: The account_level_management of this TmsBinLookupPaymentAccountInformationFeatures.
        :type: bool
        """

        self._account_level_management = account_level_management

    @property
    def online_gambling_block(self):
        """
        Gets the online_gambling_block of this TmsBinLookupPaymentAccountInformationFeatures.
        This field indicates if online gambling is blocked on the BIN. Possible values:     - `true`     - `false` 

        :return: The online_gambling_block of this TmsBinLookupPaymentAccountInformationFeatures.
        :rtype: bool
        """
        return self._online_gambling_block

    @online_gambling_block.setter
    def online_gambling_block(self, online_gambling_block):
        """
        Sets the online_gambling_block of this TmsBinLookupPaymentAccountInformationFeatures.
        This field indicates if online gambling is blocked on the BIN. Possible values:     - `true`     - `false` 

        :param online_gambling_block: The online_gambling_block of this TmsBinLookupPaymentAccountInformationFeatures.
        :type: bool
        """

        self._online_gambling_block = online_gambling_block

    @property
    def auto_substantiation(self):
        """
        Gets the auto_substantiation of this TmsBinLookupPaymentAccountInformationFeatures.
        This field indicates if auto-substantiation is enabled on the BIN. Possible values:     - `true`     - `false` 

        :return: The auto_substantiation of this TmsBinLookupPaymentAccountInformationFeatures.
        :rtype: bool
        """
        return self._auto_substantiation

    @auto_substantiation.setter
    def auto_substantiation(self, auto_substantiation):
        """
        Sets the auto_substantiation of this TmsBinLookupPaymentAccountInformationFeatures.
        This field indicates if auto-substantiation is enabled on the BIN. Possible values:     - `true`     - `false` 

        :param auto_substantiation: The auto_substantiation of this TmsBinLookupPaymentAccountInformationFeatures.
        :type: bool
        """

        self._auto_substantiation = auto_substantiation

    @property
    def flex_credential(self):
        """
        Gets the flex_credential of this TmsBinLookupPaymentAccountInformationFeatures.
        This field indicates if the instrument is a flex credential. Possible values:     - `true`     - `false` 

        :return: The flex_credential of this TmsBinLookupPaymentAccountInformationFeatures.
        :rtype: bool
        """
        return self._flex_credential

    @flex_credential.setter
    def flex_credential(self, flex_credential):
        """
        Sets the flex_credential of this TmsBinLookupPaymentAccountInformationFeatures.
        This field indicates if the instrument is a flex credential. Possible values:     - `true`     - `false` 

        :param flex_credential: The flex_credential of this TmsBinLookupPaymentAccountInformationFeatures.
        :type: bool
        """

        self._flex_credential = flex_credential

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TmsBinLookupPaymentAccountInformationFeatures):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
