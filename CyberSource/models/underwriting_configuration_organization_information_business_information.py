# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class UnderwritingConfigurationOrganizationInformationBusinessInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'business_identifier': 'str',
        'country_registration': 'str',
        'legal_name': 'str',
        'doing_business_as': 'str',
        'business_description': 'str',
        'registration_number': 'str',
        'stock_exchange': 'str',
        'ticker_symbol': 'str',
        'start_date': 'date',
        'merchant_category_code': 'str',
        'mcc_description': 'str',
        'website_url': 'str',
        'business_type': 'str',
        'local_mcc': 'list[str]',
        'country_phone_number': 'str',
        'phone_number': 'str',
        'email': 'str',
        'what_your_company_does': 'str',
        'address': 'UnderwritingConfigurationOrganizationInformationBusinessInformationAddress',
        'trading_address': 'UnderwritingConfigurationOrganizationInformationBusinessInformationTradingAddress',
        'business_contact': 'UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessContact',
        'business_details': 'UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails',
        'owner_information': 'list[UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation]',
        'director_information': 'list[UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation]'
    }

    attribute_map = {
        'business_identifier': 'businessIdentifier',
        'country_registration': 'countryRegistration',
        'legal_name': 'legalName',
        'doing_business_as': 'doingBusinessAs',
        'business_description': 'businessDescription',
        'registration_number': 'registrationNumber',
        'stock_exchange': 'stockExchange',
        'ticker_symbol': 'tickerSymbol',
        'start_date': 'startDate',
        'merchant_category_code': 'merchantCategoryCode',
        'mcc_description': 'mccDescription',
        'website_url': 'websiteURL',
        'business_type': 'businessType',
        'local_mcc': 'localMCC',
        'country_phone_number': 'countryPhoneNumber',
        'phone_number': 'phoneNumber',
        'email': 'email',
        'what_your_company_does': 'whatYourCompanyDoes',
        'address': 'address',
        'trading_address': 'tradingAddress',
        'business_contact': 'businessContact',
        'business_details': 'businessDetails',
        'owner_information': 'ownerInformation',
        'director_information': 'directorInformation'
    }

    def __init__(self, business_identifier=None, country_registration=None, legal_name=None, doing_business_as=None, business_description=None, registration_number=None, stock_exchange=None, ticker_symbol=None, start_date=None, merchant_category_code=None, mcc_description=None, website_url=None, business_type=None, local_mcc=None, country_phone_number=None, phone_number=None, email=None, what_your_company_does=None, address=None, trading_address=None, business_contact=None, business_details=None, owner_information=None, director_information=None):
        """
        UnderwritingConfigurationOrganizationInformationBusinessInformation - a model defined in Swagger
        """

        self._business_identifier = None
        self._country_registration = None
        self._legal_name = None
        self._doing_business_as = None
        self._business_description = None
        self._registration_number = None
        self._stock_exchange = None
        self._ticker_symbol = None
        self._start_date = None
        self._merchant_category_code = None
        self._mcc_description = None
        self._website_url = None
        self._business_type = None
        self._local_mcc = None
        self._country_phone_number = None
        self._phone_number = None
        self._email = None
        self._what_your_company_does = None
        self._address = None
        self._trading_address = None
        self._business_contact = None
        self._business_details = None
        self._owner_information = None
        self._director_information = None

        self.business_identifier = business_identifier
        self.country_registration = country_registration
        self.legal_name = legal_name
        self.doing_business_as = doing_business_as
        self.business_description = business_description
        if registration_number is not None:
          self.registration_number = registration_number
        if stock_exchange is not None:
          self.stock_exchange = stock_exchange
        if ticker_symbol is not None:
          self.ticker_symbol = ticker_symbol
        self.start_date = start_date
        self.merchant_category_code = merchant_category_code
        if mcc_description is not None:
          self.mcc_description = mcc_description
        if website_url is not None:
          self.website_url = website_url
        self.business_type = business_type
        if local_mcc is not None:
          self.local_mcc = local_mcc
        self.country_phone_number = country_phone_number
        self.phone_number = phone_number
        self.email = email
        if what_your_company_does is not None:
          self.what_your_company_does = what_your_company_does
        if address is not None:
          self.address = address
        if trading_address is not None:
          self.trading_address = trading_address
        if business_contact is not None:
          self.business_contact = business_contact
        if business_details is not None:
          self.business_details = business_details
        if owner_information is not None:
          self.owner_information = owner_information
        if director_information is not None:
          self.director_information = director_information

    @property
    def business_identifier(self):
        """
        Gets the business_identifier of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        Tax ID for the business

        :return: The business_identifier of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :rtype: str
        """
        return self._business_identifier

    @business_identifier.setter
    def business_identifier(self, business_identifier):
        """
        Sets the business_identifier of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        Tax ID for the business

        :param business_identifier: The business_identifier of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :type: str
        """

        self._business_identifier = business_identifier

    @property
    def country_registration(self):
        """
        Gets the country_registration of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        Country where the business is registered. Two character country code, ISO 3166-1 alpha-2.

        :return: The country_registration of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :rtype: str
        """
        return self._country_registration

    @country_registration.setter
    def country_registration(self, country_registration):
        """
        Sets the country_registration of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        Country where the business is registered. Two character country code, ISO 3166-1 alpha-2.

        :param country_registration: The country_registration of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :type: str
        """

        self._country_registration = country_registration

    @property
    def legal_name(self):
        """
        Gets the legal_name of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        The legally registered name of the business

        :return: The legal_name of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :rtype: str
        """
        return self._legal_name

    @legal_name.setter
    def legal_name(self, legal_name):
        """
        Sets the legal_name of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        The legally registered name of the business

        :param legal_name: The legal_name of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :type: str
        """

        self._legal_name = legal_name

    @property
    def doing_business_as(self):
        """
        Gets the doing_business_as of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        The DBA of the business.

        :return: The doing_business_as of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :rtype: str
        """
        return self._doing_business_as

    @doing_business_as.setter
    def doing_business_as(self, doing_business_as):
        """
        Sets the doing_business_as of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        The DBA of the business.

        :param doing_business_as: The doing_business_as of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :type: str
        """

        self._doing_business_as = doing_business_as

    @property
    def business_description(self):
        """
        Gets the business_description of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        Short description of the Business

        :return: The business_description of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :rtype: str
        """
        return self._business_description

    @business_description.setter
    def business_description(self, business_description):
        """
        Sets the business_description of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        Short description of the Business

        :param business_description: The business_description of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :type: str
        """

        self._business_description = business_description

    @property
    def registration_number(self):
        """
        Gets the registration_number of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        Registration ID for Enterprise Merchant

        :return: The registration_number of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :rtype: str
        """
        return self._registration_number

    @registration_number.setter
    def registration_number(self, registration_number):
        """
        Sets the registration_number of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        Registration ID for Enterprise Merchant

        :param registration_number: The registration_number of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :type: str
        """

        self._registration_number = registration_number

    @property
    def stock_exchange(self):
        """
        Gets the stock_exchange of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        Which stock exchange is the company trading in?

        :return: The stock_exchange of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :rtype: str
        """
        return self._stock_exchange

    @stock_exchange.setter
    def stock_exchange(self, stock_exchange):
        """
        Sets the stock_exchange of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        Which stock exchange is the company trading in?

        :param stock_exchange: The stock_exchange of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :type: str
        """

        self._stock_exchange = stock_exchange

    @property
    def ticker_symbol(self):
        """
        Gets the ticker_symbol of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        Stock Symbol on the exchange

        :return: The ticker_symbol of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :rtype: str
        """
        return self._ticker_symbol

    @ticker_symbol.setter
    def ticker_symbol(self, ticker_symbol):
        """
        Sets the ticker_symbol of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        Stock Symbol on the exchange

        :param ticker_symbol: The ticker_symbol of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :type: str
        """

        self._ticker_symbol = ticker_symbol

    @property
    def start_date(self):
        """
        Gets the start_date of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        When did Business start. Format: YYYY-MM-DD Example 2016-08-11 equals August 11, 2016

        :return: The start_date of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """
        Sets the start_date of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        When did Business start. Format: YYYY-MM-DD Example 2016-08-11 equals August 11, 2016

        :param start_date: The start_date of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :type: date
        """

        self._start_date = start_date

    @property
    def merchant_category_code(self):
        """
        Gets the merchant_category_code of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        Industry standard Merchant Category Code (MCC)

        :return: The merchant_category_code of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :rtype: str
        """
        return self._merchant_category_code

    @merchant_category_code.setter
    def merchant_category_code(self, merchant_category_code):
        """
        Sets the merchant_category_code of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        Industry standard Merchant Category Code (MCC)

        :param merchant_category_code: The merchant_category_code of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :type: str
        """

        self._merchant_category_code = merchant_category_code

    @property
    def mcc_description(self):
        """
        Gets the mcc_description of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        MCC Description

        :return: The mcc_description of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :rtype: str
        """
        return self._mcc_description

    @mcc_description.setter
    def mcc_description(self, mcc_description):
        """
        Sets the mcc_description of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        MCC Description

        :param mcc_description: The mcc_description of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :type: str
        """

        self._mcc_description = mcc_description

    @property
    def website_url(self):
        """
        Gets the website_url of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        Website for the Business

        :return: The website_url of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :rtype: str
        """
        return self._website_url

    @website_url.setter
    def website_url(self, website_url):
        """
        Sets the website_url of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        Website for the Business

        :param website_url: The website_url of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :type: str
        """

        self._website_url = website_url

    @property
    def business_type(self):
        """
        Gets the business_type of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        Business type  Possible values: - PARTNERSHIP - SOLE_PROPRIETORSHIP - CORPORATION - LLC - NON_PROFIT - TRUST

        :return: The business_type of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :rtype: str
        """
        return self._business_type

    @business_type.setter
    def business_type(self, business_type):
        """
        Sets the business_type of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        Business type  Possible values: - PARTNERSHIP - SOLE_PROPRIETORSHIP - CORPORATION - LLC - NON_PROFIT - TRUST

        :param business_type: The business_type of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :type: str
        """

        self._business_type = business_type

    @property
    def local_mcc(self):
        """
        Gets the local_mcc of this UnderwritingConfigurationOrganizationInformationBusinessInformation.

        :return: The local_mcc of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :rtype: list[str]
        """
        return self._local_mcc

    @local_mcc.setter
    def local_mcc(self, local_mcc):
        """
        Sets the local_mcc of this UnderwritingConfigurationOrganizationInformationBusinessInformation.

        :param local_mcc: The local_mcc of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :type: list[str]
        """

        self._local_mcc = local_mcc

    @property
    def country_phone_number(self):
        """
        Gets the country_phone_number of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        Country of the Business phone number. Two character country code, ISO 3166-1 alpha-2.

        :return: The country_phone_number of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :rtype: str
        """
        return self._country_phone_number

    @country_phone_number.setter
    def country_phone_number(self, country_phone_number):
        """
        Sets the country_phone_number of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        Country of the Business phone number. Two character country code, ISO 3166-1 alpha-2.

        :param country_phone_number: The country_phone_number of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :type: str
        """

        self._country_phone_number = country_phone_number

    @property
    def phone_number(self):
        """
        Gets the phone_number of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        Business Phone Number

        :return: The phone_number of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """
        Sets the phone_number of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        Business Phone Number

        :param phone_number: The phone_number of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :type: str
        """

        self._phone_number = phone_number

    @property
    def email(self):
        """
        Gets the email of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        Business Email Address

        :return: The email of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        Business Email Address

        :param email: The email of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :type: str
        """

        self._email = email

    @property
    def what_your_company_does(self):
        """
        Gets the what_your_company_does of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        What your company does and how you market your service

        :return: The what_your_company_does of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :rtype: str
        """
        return self._what_your_company_does

    @what_your_company_does.setter
    def what_your_company_does(self, what_your_company_does):
        """
        Sets the what_your_company_does of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        What your company does and how you market your service

        :param what_your_company_does: The what_your_company_does of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :type: str
        """

        self._what_your_company_does = what_your_company_does

    @property
    def address(self):
        """
        Gets the address of this UnderwritingConfigurationOrganizationInformationBusinessInformation.

        :return: The address of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :rtype: UnderwritingConfigurationOrganizationInformationBusinessInformationAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this UnderwritingConfigurationOrganizationInformationBusinessInformation.

        :param address: The address of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :type: UnderwritingConfigurationOrganizationInformationBusinessInformationAddress
        """

        self._address = address

    @property
    def trading_address(self):
        """
        Gets the trading_address of this UnderwritingConfigurationOrganizationInformationBusinessInformation.

        :return: The trading_address of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :rtype: UnderwritingConfigurationOrganizationInformationBusinessInformationTradingAddress
        """
        return self._trading_address

    @trading_address.setter
    def trading_address(self, trading_address):
        """
        Sets the trading_address of this UnderwritingConfigurationOrganizationInformationBusinessInformation.

        :param trading_address: The trading_address of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :type: UnderwritingConfigurationOrganizationInformationBusinessInformationTradingAddress
        """

        self._trading_address = trading_address

    @property
    def business_contact(self):
        """
        Gets the business_contact of this UnderwritingConfigurationOrganizationInformationBusinessInformation.

        :return: The business_contact of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :rtype: UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessContact
        """
        return self._business_contact

    @business_contact.setter
    def business_contact(self, business_contact):
        """
        Sets the business_contact of this UnderwritingConfigurationOrganizationInformationBusinessInformation.

        :param business_contact: The business_contact of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :type: UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessContact
        """

        self._business_contact = business_contact

    @property
    def business_details(self):
        """
        Gets the business_details of this UnderwritingConfigurationOrganizationInformationBusinessInformation.

        :return: The business_details of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :rtype: UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails
        """
        return self._business_details

    @business_details.setter
    def business_details(self, business_details):
        """
        Sets the business_details of this UnderwritingConfigurationOrganizationInformationBusinessInformation.

        :param business_details: The business_details of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :type: UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails
        """

        self._business_details = business_details

    @property
    def owner_information(self):
        """
        Gets the owner_information of this UnderwritingConfigurationOrganizationInformationBusinessInformation.

        :return: The owner_information of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :rtype: list[UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation]
        """
        return self._owner_information

    @owner_information.setter
    def owner_information(self, owner_information):
        """
        Sets the owner_information of this UnderwritingConfigurationOrganizationInformationBusinessInformation.

        :param owner_information: The owner_information of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :type: list[UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation]
        """

        self._owner_information = owner_information

    @property
    def director_information(self):
        """
        Gets the director_information of this UnderwritingConfigurationOrganizationInformationBusinessInformation.

        :return: The director_information of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :rtype: list[UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation]
        """
        return self._director_information

    @director_information.setter
    def director_information(self, director_information):
        """
        Sets the director_information of this UnderwritingConfigurationOrganizationInformationBusinessInformation.

        :param director_information: The director_information of this UnderwritingConfigurationOrganizationInformationBusinessInformation.
        :type: list[UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation]
        """

        self._director_information = director_information

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UnderwritingConfigurationOrganizationInformationBusinessInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
