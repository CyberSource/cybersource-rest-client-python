# coding: utf-8

"""
    CyberSource Flex API

    Simple PAN tokenization service

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2002(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_batches': 'list[InlineResponse2002TransactionBatches]',
        'links': 'InlineResponse2002Links',
        'submit_time_utc': 'str'
    }

    attribute_map = {
        'transaction_batches': 'transactionBatches',
        'links': '_links',
        'submit_time_utc': 'submitTimeUtc'
    }

    def __init__(self, transaction_batches=None, links=None, submit_time_utc=None):
        """
        InlineResponse2002 - a model defined in Swagger
        """

        self._transaction_batches = None
        self._links = None
        self._submit_time_utc = None

        if transaction_batches is not None:
          self.transaction_batches = transaction_batches
        if links is not None:
          self.links = links
        if submit_time_utc is not None:
          self.submit_time_utc = submit_time_utc

    @property
    def transaction_batches(self):
        """
        Gets the transaction_batches of this InlineResponse2002.

        :return: The transaction_batches of this InlineResponse2002.
        :rtype: list[InlineResponse2002TransactionBatches]
        """
        return self._transaction_batches

    @transaction_batches.setter
    def transaction_batches(self, transaction_batches):
        """
        Sets the transaction_batches of this InlineResponse2002.

        :param transaction_batches: The transaction_batches of this InlineResponse2002.
        :type: list[InlineResponse2002TransactionBatches]
        """

        self._transaction_batches = transaction_batches

    @property
    def links(self):
        """
        Gets the links of this InlineResponse2002.

        :return: The links of this InlineResponse2002.
        :rtype: InlineResponse2002Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this InlineResponse2002.

        :param links: The links of this InlineResponse2002.
        :type: InlineResponse2002Links
        """

        self._links = links

    @property
    def submit_time_utc(self):
        """
        Gets the submit_time_utc of this InlineResponse2002.
        Time of request in UTC. `Format: YYYY-MM-DDThh:mm:ssZ`  Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the time. The Z indicates UTC. 

        :return: The submit_time_utc of this InlineResponse2002.
        :rtype: str
        """
        return self._submit_time_utc

    @submit_time_utc.setter
    def submit_time_utc(self, submit_time_utc):
        """
        Sets the submit_time_utc of this InlineResponse2002.
        Time of request in UTC. `Format: YYYY-MM-DDThh:mm:ssZ`  Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the time. The Z indicates UTC. 

        :param submit_time_utc: The submit_time_utc of this InlineResponse2002.
        :type: str
        """

        self._submit_time_utc = submit_time_utc

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2002):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
