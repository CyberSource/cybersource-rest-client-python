# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class Ptsv2intentsTravelInformationAgency(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_date': 'str',
        'end_date': 'str',
        'change_of_guest': 'str',
        'country_code': 'str',
        'locality': 'str',
        'postal_code': 'str'
    }

    attribute_map = {
        'start_date': 'startDate',
        'end_date': 'endDate',
        'change_of_guest': 'changeOfGuest',
        'country_code': 'countryCode',
        'locality': 'locality',
        'postal_code': 'postalCode'
    }

    def __init__(self, start_date=None, end_date=None, change_of_guest=None, country_code=None, locality=None, postal_code=None):
        """
        Ptsv2intentsTravelInformationAgency - a model defined in Swagger
        """

        self._start_date = None
        self._end_date = None
        self._change_of_guest = None
        self._country_code = None
        self._locality = None
        self._postal_code = None

        if start_date is not None:
          self.start_date = start_date
        if end_date is not None:
          self.end_date = end_date
        if change_of_guest is not None:
          self.change_of_guest = change_of_guest
        if country_code is not None:
          self.country_code = country_code
        if locality is not None:
          self.locality = locality
        if postal_code is not None:
          self.postal_code = postal_code

    @property
    def start_date(self):
        """
        Gets the start_date of this Ptsv2intentsTravelInformationAgency.
        The start date of the agency's service. 

        :return: The start_date of this Ptsv2intentsTravelInformationAgency.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """
        Sets the start_date of this Ptsv2intentsTravelInformationAgency.
        The start date of the agency's service. 

        :param start_date: The start_date of this Ptsv2intentsTravelInformationAgency.
        :type: str
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """
        Gets the end_date of this Ptsv2intentsTravelInformationAgency.
        The end date of the agency's service. 

        :return: The end_date of this Ptsv2intentsTravelInformationAgency.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """
        Sets the end_date of this Ptsv2intentsTravelInformationAgency.
        The end date of the agency's service. 

        :param end_date: The end_date of this Ptsv2intentsTravelInformationAgency.
        :type: str
        """

        self._end_date = end_date

    @property
    def change_of_guest(self):
        """
        Gets the change_of_guest of this Ptsv2intentsTravelInformationAgency.
        Indicates if there is a change of guest. 

        :return: The change_of_guest of this Ptsv2intentsTravelInformationAgency.
        :rtype: str
        """
        return self._change_of_guest

    @change_of_guest.setter
    def change_of_guest(self, change_of_guest):
        """
        Sets the change_of_guest of this Ptsv2intentsTravelInformationAgency.
        Indicates if there is a change of guest. 

        :param change_of_guest: The change_of_guest of this Ptsv2intentsTravelInformationAgency.
        :type: str
        """

        self._change_of_guest = change_of_guest

    @property
    def country_code(self):
        """
        Gets the country_code of this Ptsv2intentsTravelInformationAgency.
        The country code of the agency. 

        :return: The country_code of this Ptsv2intentsTravelInformationAgency.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """
        Sets the country_code of this Ptsv2intentsTravelInformationAgency.
        The country code of the agency. 

        :param country_code: The country_code of this Ptsv2intentsTravelInformationAgency.
        :type: str
        """

        self._country_code = country_code

    @property
    def locality(self):
        """
        Gets the locality of this Ptsv2intentsTravelInformationAgency.
        The locality of the agency. 

        :return: The locality of this Ptsv2intentsTravelInformationAgency.
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """
        Sets the locality of this Ptsv2intentsTravelInformationAgency.
        The locality of the agency. 

        :param locality: The locality of this Ptsv2intentsTravelInformationAgency.
        :type: str
        """

        self._locality = locality

    @property
    def postal_code(self):
        """
        Gets the postal_code of this Ptsv2intentsTravelInformationAgency.
        The postal code of the agency. 

        :return: The postal_code of this Ptsv2intentsTravelInformationAgency.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """
        Sets the postal_code of this Ptsv2intentsTravelInformationAgency.
        The postal code of the agency. 

        :param postal_code: The postal_code of this Ptsv2intentsTravelInformationAgency.
        :type: str
        """

        self._postal_code = postal_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Ptsv2intentsTravelInformationAgency):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
