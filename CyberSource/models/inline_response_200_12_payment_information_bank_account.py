# coding: utf-8

"""
    CyberSource Flex API

    Simple PAN tokenization service

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse20012PaymentInformationBankAccount(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'suffix': 'str',
        'prefix': 'str',
        'check_number': 'str',
        'type': 'str',
        'name': 'str',
        'check_digit': 'str',
        'encoder_id': 'str'
    }

    attribute_map = {
        'suffix': 'suffix',
        'prefix': 'prefix',
        'check_number': 'checkNumber',
        'type': 'type',
        'name': 'name',
        'check_digit': 'checkDigit',
        'encoder_id': 'encoderId'
    }

    def __init__(self, suffix=None, prefix=None, check_number=None, type=None, name=None, check_digit=None, encoder_id=None):
        """
        InlineResponse20012PaymentInformationBankAccount - a model defined in Swagger
        """

        self._suffix = None
        self._prefix = None
        self._check_number = None
        self._type = None
        self._name = None
        self._check_digit = None
        self._encoder_id = None

        if suffix is not None:
          self.suffix = suffix
        if prefix is not None:
          self.prefix = prefix
        if check_number is not None:
          self.check_number = check_number
        if type is not None:
          self.type = type
        if name is not None:
          self.name = name
        if check_digit is not None:
          self.check_digit = check_digit
        if encoder_id is not None:
          self.encoder_id = encoder_id

    @property
    def suffix(self):
        """
        Gets the suffix of this InlineResponse20012PaymentInformationBankAccount.
        The description for this field is not available.

        :return: The suffix of this InlineResponse20012PaymentInformationBankAccount.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """
        Sets the suffix of this InlineResponse20012PaymentInformationBankAccount.
        The description for this field is not available.

        :param suffix: The suffix of this InlineResponse20012PaymentInformationBankAccount.
        :type: str
        """

        self._suffix = suffix

    @property
    def prefix(self):
        """
        Gets the prefix of this InlineResponse20012PaymentInformationBankAccount.
        The description for this field is not available.

        :return: The prefix of this InlineResponse20012PaymentInformationBankAccount.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """
        Sets the prefix of this InlineResponse20012PaymentInformationBankAccount.
        The description for this field is not available.

        :param prefix: The prefix of this InlineResponse20012PaymentInformationBankAccount.
        :type: str
        """

        self._prefix = prefix

    @property
    def check_number(self):
        """
        Gets the check_number of this InlineResponse20012PaymentInformationBankAccount.
        The description for this field is not available.

        :return: The check_number of this InlineResponse20012PaymentInformationBankAccount.
        :rtype: str
        """
        return self._check_number

    @check_number.setter
    def check_number(self, check_number):
        """
        Sets the check_number of this InlineResponse20012PaymentInformationBankAccount.
        The description for this field is not available.

        :param check_number: The check_number of this InlineResponse20012PaymentInformationBankAccount.
        :type: str
        """

        self._check_number = check_number

    @property
    def type(self):
        """
        Gets the type of this InlineResponse20012PaymentInformationBankAccount.
        The description for this field is not available.

        :return: The type of this InlineResponse20012PaymentInformationBankAccount.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this InlineResponse20012PaymentInformationBankAccount.
        The description for this field is not available.

        :param type: The type of this InlineResponse20012PaymentInformationBankAccount.
        :type: str
        """

        self._type = type

    @property
    def name(self):
        """
        Gets the name of this InlineResponse20012PaymentInformationBankAccount.
        The description for this field is not available.

        :return: The name of this InlineResponse20012PaymentInformationBankAccount.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this InlineResponse20012PaymentInformationBankAccount.
        The description for this field is not available.

        :param name: The name of this InlineResponse20012PaymentInformationBankAccount.
        :type: str
        """

        self._name = name

    @property
    def check_digit(self):
        """
        Gets the check_digit of this InlineResponse20012PaymentInformationBankAccount.
        The description for this field is not available.

        :return: The check_digit of this InlineResponse20012PaymentInformationBankAccount.
        :rtype: str
        """
        return self._check_digit

    @check_digit.setter
    def check_digit(self, check_digit):
        """
        Sets the check_digit of this InlineResponse20012PaymentInformationBankAccount.
        The description for this field is not available.

        :param check_digit: The check_digit of this InlineResponse20012PaymentInformationBankAccount.
        :type: str
        """

        self._check_digit = check_digit

    @property
    def encoder_id(self):
        """
        Gets the encoder_id of this InlineResponse20012PaymentInformationBankAccount.
        The description for this field is not available.

        :return: The encoder_id of this InlineResponse20012PaymentInformationBankAccount.
        :rtype: str
        """
        return self._encoder_id

    @encoder_id.setter
    def encoder_id(self, encoder_id):
        """
        Sets the encoder_id of this InlineResponse20012PaymentInformationBankAccount.
        The description for this field is not available.

        :param encoder_id: The encoder_id of this InlineResponse20012PaymentInformationBankAccount.
        :type: str
        """

        self._encoder_id = encoder_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse20012PaymentInformationBankAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
