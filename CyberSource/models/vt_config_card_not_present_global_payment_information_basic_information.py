# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class VTConfigCardNotPresentGlobalPaymentInformationBasicInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_standard_entry_class_code': 'str',
        'default_country_code': 'str',
        'default_currency_code': 'str',
        'default_transaction_type': 'str',
        'default_payment_type': 'str',
        'default_transaction_source': 'str',
        'display_retail': 'bool',
        'display_moto': 'bool',
        'display_internet': 'bool'
    }

    attribute_map = {
        'default_standard_entry_class_code': 'defaultStandardEntryClassCode',
        'default_country_code': 'defaultCountryCode',
        'default_currency_code': 'defaultCurrencyCode',
        'default_transaction_type': 'defaultTransactionType',
        'default_payment_type': 'defaultPaymentType',
        'default_transaction_source': 'defaultTransactionSource',
        'display_retail': 'displayRetail',
        'display_moto': 'displayMoto',
        'display_internet': 'displayInternet'
    }

    def __init__(self, default_standard_entry_class_code=None, default_country_code=None, default_currency_code=None, default_transaction_type=None, default_payment_type=None, default_transaction_source=None, display_retail=None, display_moto=None, display_internet=None):
        """
        VTConfigCardNotPresentGlobalPaymentInformationBasicInformation - a model defined in Swagger
        """

        self._default_standard_entry_class_code = None
        self._default_country_code = None
        self._default_currency_code = None
        self._default_transaction_type = None
        self._default_payment_type = None
        self._default_transaction_source = None
        self._display_retail = None
        self._display_moto = None
        self._display_internet = None

        if default_standard_entry_class_code is not None:
          self.default_standard_entry_class_code = default_standard_entry_class_code
        if default_country_code is not None:
          self.default_country_code = default_country_code
        if default_currency_code is not None:
          self.default_currency_code = default_currency_code
        if default_transaction_type is not None:
          self.default_transaction_type = default_transaction_type
        if default_payment_type is not None:
          self.default_payment_type = default_payment_type
        if default_transaction_source is not None:
          self.default_transaction_source = default_transaction_source
        if display_retail is not None:
          self.display_retail = display_retail
        if display_moto is not None:
          self.display_moto = display_moto
        if display_internet is not None:
          self.display_internet = display_internet

    @property
    def default_standard_entry_class_code(self):
        """
        Gets the default_standard_entry_class_code of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.

        :return: The default_standard_entry_class_code of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.
        :rtype: str
        """
        return self._default_standard_entry_class_code

    @default_standard_entry_class_code.setter
    def default_standard_entry_class_code(self, default_standard_entry_class_code):
        """
        Sets the default_standard_entry_class_code of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.

        :param default_standard_entry_class_code: The default_standard_entry_class_code of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.
        :type: str
        """

        self._default_standard_entry_class_code = default_standard_entry_class_code

    @property
    def default_country_code(self):
        """
        Gets the default_country_code of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.
        ISO 4217 format

        :return: The default_country_code of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.
        :rtype: str
        """
        return self._default_country_code

    @default_country_code.setter
    def default_country_code(self, default_country_code):
        """
        Sets the default_country_code of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.
        ISO 4217 format

        :param default_country_code: The default_country_code of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.
        :type: str
        """

        self._default_country_code = default_country_code

    @property
    def default_currency_code(self):
        """
        Gets the default_currency_code of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.
        Three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)

        :return: The default_currency_code of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.
        :rtype: str
        """
        return self._default_currency_code

    @default_currency_code.setter
    def default_currency_code(self, default_currency_code):
        """
        Sets the default_currency_code of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.
        Three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)

        :param default_currency_code: The default_currency_code of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.
        :type: str
        """

        self._default_currency_code = default_currency_code

    @property
    def default_transaction_type(self):
        """
        Gets the default_transaction_type of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.
        Possible values: - AUTHORIZATION - SALE

        :return: The default_transaction_type of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.
        :rtype: str
        """
        return self._default_transaction_type

    @default_transaction_type.setter
    def default_transaction_type(self, default_transaction_type):
        """
        Sets the default_transaction_type of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.
        Possible values: - AUTHORIZATION - SALE

        :param default_transaction_type: The default_transaction_type of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.
        :type: str
        """

        self._default_transaction_type = default_transaction_type

    @property
    def default_payment_type(self):
        """
        Gets the default_payment_type of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.
        Possible values: - CREDIT_CARD - ECHECK

        :return: The default_payment_type of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.
        :rtype: str
        """
        return self._default_payment_type

    @default_payment_type.setter
    def default_payment_type(self, default_payment_type):
        """
        Sets the default_payment_type of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.
        Possible values: - CREDIT_CARD - ECHECK

        :param default_payment_type: The default_payment_type of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.
        :type: str
        """

        self._default_payment_type = default_payment_type

    @property
    def default_transaction_source(self):
        """
        Gets the default_transaction_source of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.

        :return: The default_transaction_source of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.
        :rtype: str
        """
        return self._default_transaction_source

    @default_transaction_source.setter
    def default_transaction_source(self, default_transaction_source):
        """
        Sets the default_transaction_source of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.

        :param default_transaction_source: The default_transaction_source of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.
        :type: str
        """

        self._default_transaction_source = default_transaction_source

    @property
    def display_retail(self):
        """
        Gets the display_retail of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.

        :return: The display_retail of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.
        :rtype: bool
        """
        return self._display_retail

    @display_retail.setter
    def display_retail(self, display_retail):
        """
        Sets the display_retail of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.

        :param display_retail: The display_retail of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.
        :type: bool
        """

        self._display_retail = display_retail

    @property
    def display_moto(self):
        """
        Gets the display_moto of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.

        :return: The display_moto of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.
        :rtype: bool
        """
        return self._display_moto

    @display_moto.setter
    def display_moto(self, display_moto):
        """
        Sets the display_moto of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.

        :param display_moto: The display_moto of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.
        :type: bool
        """

        self._display_moto = display_moto

    @property
    def display_internet(self):
        """
        Gets the display_internet of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.

        :return: The display_internet of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.
        :rtype: bool
        """
        return self._display_internet

    @display_internet.setter
    def display_internet(self, display_internet):
        """
        Sets the display_internet of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.

        :param display_internet: The display_internet of this VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.
        :type: bool
        """

        self._display_internet = display_internet

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VTConfigCardNotPresentGlobalPaymentInformationBasicInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
