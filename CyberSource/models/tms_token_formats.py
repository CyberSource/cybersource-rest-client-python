# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class TmsTokenFormats(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer': 'str',
        'payment_instrument': 'str',
        'instrument_identifier_card': 'str',
        'instrument_identifier_bank_account': 'str'
    }

    attribute_map = {
        'customer': 'customer',
        'payment_instrument': 'paymentInstrument',
        'instrument_identifier_card': 'instrumentIdentifierCard',
        'instrument_identifier_bank_account': 'instrumentIdentifierBankAccount'
    }

    def __init__(self, customer=None, payment_instrument=None, instrument_identifier_card=None, instrument_identifier_bank_account=None):
        """
        TmsTokenFormats - a model defined in Swagger
        """

        self._customer = None
        self._payment_instrument = None
        self._instrument_identifier_card = None
        self._instrument_identifier_bank_account = None

        if customer is not None:
          self.customer = customer
        if payment_instrument is not None:
          self.payment_instrument = payment_instrument
        if instrument_identifier_card is not None:
          self.instrument_identifier_card = instrument_identifier_card
        if instrument_identifier_bank_account is not None:
          self.instrument_identifier_bank_account = instrument_identifier_bank_account

    @property
    def customer(self):
        """
        Gets the customer of this TmsTokenFormats.
        Format for customer tokens.  Possible Values:   - '16_DIGIT'   - '19_DIGIT'   - '22_DIGIT'   - '32_HEX' 

        :return: The customer of this TmsTokenFormats.
        :rtype: str
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """
        Sets the customer of this TmsTokenFormats.
        Format for customer tokens.  Possible Values:   - '16_DIGIT'   - '19_DIGIT'   - '22_DIGIT'   - '32_HEX' 

        :param customer: The customer of this TmsTokenFormats.
        :type: str
        """

        self._customer = customer

    @property
    def payment_instrument(self):
        """
        Gets the payment_instrument of this TmsTokenFormats.
        Format for payment instrument tokens.  Possible Values:   - '16_DIGIT'   - '19_DIGIT'   - '22_DIGIT'   - '32_HEX' 

        :return: The payment_instrument of this TmsTokenFormats.
        :rtype: str
        """
        return self._payment_instrument

    @payment_instrument.setter
    def payment_instrument(self, payment_instrument):
        """
        Sets the payment_instrument of this TmsTokenFormats.
        Format for payment instrument tokens.  Possible Values:   - '16_DIGIT'   - '19_DIGIT'   - '22_DIGIT'   - '32_HEX' 

        :param payment_instrument: The payment_instrument of this TmsTokenFormats.
        :type: str
        """

        self._payment_instrument = payment_instrument

    @property
    def instrument_identifier_card(self):
        """
        Gets the instrument_identifier_card of this TmsTokenFormats.
        Format for card based instrument identifier tokens.  Possible Values:   - '16_DIGIT'   - '16_DIGIT_LAST_4'   - '19_DIGIT'   - '19_DIGIT_LAST_4'   - '22_DIGIT'   - '32_HEX' 

        :return: The instrument_identifier_card of this TmsTokenFormats.
        :rtype: str
        """
        return self._instrument_identifier_card

    @instrument_identifier_card.setter
    def instrument_identifier_card(self, instrument_identifier_card):
        """
        Sets the instrument_identifier_card of this TmsTokenFormats.
        Format for card based instrument identifier tokens.  Possible Values:   - '16_DIGIT'   - '16_DIGIT_LAST_4'   - '19_DIGIT'   - '19_DIGIT_LAST_4'   - '22_DIGIT'   - '32_HEX' 

        :param instrument_identifier_card: The instrument_identifier_card of this TmsTokenFormats.
        :type: str
        """

        self._instrument_identifier_card = instrument_identifier_card

    @property
    def instrument_identifier_bank_account(self):
        """
        Gets the instrument_identifier_bank_account of this TmsTokenFormats.
        Format for bank account based instrument identifier tokens.  Possible Values:    - '16_DIGIT'   - '19_DIGIT'   - '22_DIGIT'   - '32_HEX' 

        :return: The instrument_identifier_bank_account of this TmsTokenFormats.
        :rtype: str
        """
        return self._instrument_identifier_bank_account

    @instrument_identifier_bank_account.setter
    def instrument_identifier_bank_account(self, instrument_identifier_bank_account):
        """
        Sets the instrument_identifier_bank_account of this TmsTokenFormats.
        Format for bank account based instrument identifier tokens.  Possible Values:    - '16_DIGIT'   - '19_DIGIT'   - '22_DIGIT'   - '32_HEX' 

        :param instrument_identifier_bank_account: The instrument_identifier_bank_account of this TmsTokenFormats.
        :type: str
        """

        self._instrument_identifier_bank_account = instrument_identifier_bank_account

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TmsTokenFormats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
