# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'merchant_id': 'str',
        'logo_url': 'str',
        'redirect_success_url': 'str',
        'redirect_cancel_url': 'str',
        'redirect_failure_url': 'str',
        'additional_configurations': 'list[PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations]'
    }

    attribute_map = {
        'merchant_id': 'merchantId',
        'logo_url': 'logoUrl',
        'redirect_success_url': 'redirectSuccessUrl',
        'redirect_cancel_url': 'redirectCancelUrl',
        'redirect_failure_url': 'redirectFailureUrl',
        'additional_configurations': 'additionalConfigurations'
    }

    def __init__(self, merchant_id=None, logo_url=None, redirect_success_url=None, redirect_cancel_url=None, redirect_failure_url=None, additional_configurations=None):
        """
        PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods - a model defined in Swagger
        """

        self._merchant_id = None
        self._logo_url = None
        self._redirect_success_url = None
        self._redirect_cancel_url = None
        self._redirect_failure_url = None
        self._additional_configurations = None

        if merchant_id is not None:
          self.merchant_id = merchant_id
        if logo_url is not None:
          self.logo_url = logo_url
        if redirect_success_url is not None:
          self.redirect_success_url = redirect_success_url
        if redirect_cancel_url is not None:
          self.redirect_cancel_url = redirect_cancel_url
        if redirect_failure_url is not None:
          self.redirect_failure_url = redirect_failure_url
        if additional_configurations is not None:
          self.additional_configurations = additional_configurations

    @property
    def merchant_id(self):
        """
        Gets the merchant_id of this PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.
        Merchant ID for the payment method. This is a unique identifier for the merchant. example. mid12345678 

        :return: The merchant_id of this PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """
        Sets the merchant_id of this PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.
        Merchant ID for the payment method. This is a unique identifier for the merchant. example. mid12345678 

        :param merchant_id: The merchant_id of this PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def logo_url(self):
        """
        Gets the logo_url of this PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.
        URL of the logo for the payment method. This is used for branding purposes. example: http://www.test.com 

        :return: The logo_url of this PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """
        Sets the logo_url of this PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.
        URL of the logo for the payment method. This is used for branding purposes. example: http://www.test.com 

        :param logo_url: The logo_url of this PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.
        :type: str
        """

        self._logo_url = logo_url

    @property
    def redirect_success_url(self):
        """
        Gets the redirect_success_url of this PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.
        URL to redirect to after a successful transaction. This is where the user will be sent after completing the payment. example: http://www.test.com/success 

        :return: The redirect_success_url of this PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.
        :rtype: str
        """
        return self._redirect_success_url

    @redirect_success_url.setter
    def redirect_success_url(self, redirect_success_url):
        """
        Sets the redirect_success_url of this PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.
        URL to redirect to after a successful transaction. This is where the user will be sent after completing the payment. example: http://www.test.com/success 

        :param redirect_success_url: The redirect_success_url of this PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.
        :type: str
        """

        self._redirect_success_url = redirect_success_url

    @property
    def redirect_cancel_url(self):
        """
        Gets the redirect_cancel_url of this PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.
        URL to redirect to if the user cancels the transaction. This is where the user will be sent if they choose to cancel the payment. example: http://www.test.com/cancel 

        :return: The redirect_cancel_url of this PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.
        :rtype: str
        """
        return self._redirect_cancel_url

    @redirect_cancel_url.setter
    def redirect_cancel_url(self, redirect_cancel_url):
        """
        Sets the redirect_cancel_url of this PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.
        URL to redirect to if the user cancels the transaction. This is where the user will be sent if they choose to cancel the payment. example: http://www.test.com/cancel 

        :param redirect_cancel_url: The redirect_cancel_url of this PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.
        :type: str
        """

        self._redirect_cancel_url = redirect_cancel_url

    @property
    def redirect_failure_url(self):
        """
        Gets the redirect_failure_url of this PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.
        URL to redirect to if the transaction fails. This is where the user will be sent if there is an error during the payment process. example: http://www.test.com/failure 

        :return: The redirect_failure_url of this PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.
        :rtype: str
        """
        return self._redirect_failure_url

    @redirect_failure_url.setter
    def redirect_failure_url(self, redirect_failure_url):
        """
        Sets the redirect_failure_url of this PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.
        URL to redirect to if the transaction fails. This is where the user will be sent if there is an error during the payment process. example: http://www.test.com/failure 

        :param redirect_failure_url: The redirect_failure_url of this PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.
        :type: str
        """

        self._redirect_failure_url = redirect_failure_url

    @property
    def additional_configurations(self):
        """
        Gets the additional_configurations of this PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.
        Additional configurations for the payment method. This can include various settings specific to the payment method. 

        :return: The additional_configurations of this PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.
        :rtype: list[PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations]
        """
        return self._additional_configurations

    @additional_configurations.setter
    def additional_configurations(self, additional_configurations):
        """
        Sets the additional_configurations of this PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.
        Additional configurations for the payment method. This can include various settings specific to the payment method. 

        :param additional_configurations: The additional_configurations of this PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.
        :type: list[PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations]
        """

        self._additional_configurations = additional_configurations

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
