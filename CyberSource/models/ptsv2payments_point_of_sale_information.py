# coding: utf-8

"""
    CyberSource Flex API

    Simple PAN tokenization service

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Ptsv2paymentsPointOfSaleInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'terminal_id': 'str',
        'terminal_serial_number': 'str',
        'lane_number': 'str',
        'card_present': 'bool',
        'cat_level': 'int',
        'entry_mode': 'str',
        'terminal_capability': 'int',
        'pin_entry_capability': 'int',
        'operating_environment': 'str',
        'emv': 'Ptsv2paymentsPointOfSaleInformationEmv',
        'amex_capn_data': 'str',
        'track_data': 'str'
    }

    attribute_map = {
        'terminal_id': 'terminalId',
        'terminal_serial_number': 'terminalSerialNumber',
        'lane_number': 'laneNumber',
        'card_present': 'cardPresent',
        'cat_level': 'catLevel',
        'entry_mode': 'entryMode',
        'terminal_capability': 'terminalCapability',
        'pin_entry_capability': 'pinEntryCapability',
        'operating_environment': 'operatingEnvironment',
        'emv': 'emv',
        'amex_capn_data': 'amexCapnData',
        'track_data': 'trackData'
    }

    def __init__(self, terminal_id=None, terminal_serial_number=None, lane_number=None, card_present=None, cat_level=None, entry_mode=None, terminal_capability=None, pin_entry_capability=None, operating_environment=None, emv=None, amex_capn_data=None, track_data=None):
        """
        Ptsv2paymentsPointOfSaleInformation - a model defined in Swagger
        """

        self._terminal_id = None
        self._terminal_serial_number = None
        self._lane_number = None
        self._card_present = None
        self._cat_level = None
        self._entry_mode = None
        self._terminal_capability = None
        self._pin_entry_capability = None
        self._operating_environment = None
        self._emv = None
        self._amex_capn_data = None
        self._track_data = None

        if terminal_id is not None:
          self.terminal_id = terminal_id
        if terminal_serial_number is not None:
          self.terminal_serial_number = terminal_serial_number
        if lane_number is not None:
          self.lane_number = lane_number
        if card_present is not None:
          self.card_present = card_present
        if cat_level is not None:
          self.cat_level = cat_level
        if entry_mode is not None:
          self.entry_mode = entry_mode
        if terminal_capability is not None:
          self.terminal_capability = terminal_capability
        if pin_entry_capability is not None:
          self.pin_entry_capability = pin_entry_capability
        if operating_environment is not None:
          self.operating_environment = operating_environment
        if emv is not None:
          self.emv = emv
        if amex_capn_data is not None:
          self.amex_capn_data = amex_capn_data
        if track_data is not None:
          self.track_data = track_data

    @property
    def terminal_id(self):
        """
        Gets the terminal_id of this Ptsv2paymentsPointOfSaleInformation.
        Identifier for the terminal at your retail location. You can define this value yourself, but consult the processor for requirements.  For Payouts: This field is applicable for CtV. 

        :return: The terminal_id of this Ptsv2paymentsPointOfSaleInformation.
        :rtype: str
        """
        return self._terminal_id

    @terminal_id.setter
    def terminal_id(self, terminal_id):
        """
        Sets the terminal_id of this Ptsv2paymentsPointOfSaleInformation.
        Identifier for the terminal at your retail location. You can define this value yourself, but consult the processor for requirements.  For Payouts: This field is applicable for CtV. 

        :param terminal_id: The terminal_id of this Ptsv2paymentsPointOfSaleInformation.
        :type: str
        """
        if terminal_id is not None and len(terminal_id) > 8:
            raise ValueError("Invalid value for `terminal_id`, length must be less than or equal to `8`")

        self._terminal_id = terminal_id

    @property
    def terminal_serial_number(self):
        """
        Gets the terminal_serial_number of this Ptsv2paymentsPointOfSaleInformation.
        Description of this field is not available.

        :return: The terminal_serial_number of this Ptsv2paymentsPointOfSaleInformation.
        :rtype: str
        """
        return self._terminal_serial_number

    @terminal_serial_number.setter
    def terminal_serial_number(self, terminal_serial_number):
        """
        Sets the terminal_serial_number of this Ptsv2paymentsPointOfSaleInformation.
        Description of this field is not available.

        :param terminal_serial_number: The terminal_serial_number of this Ptsv2paymentsPointOfSaleInformation.
        :type: str
        """

        self._terminal_serial_number = terminal_serial_number

    @property
    def lane_number(self):
        """
        Gets the lane_number of this Ptsv2paymentsPointOfSaleInformation.
        Identifier for an alternate terminal at your retail location. You define the value for this field.  This field is supported only for MasterCard transactions on FDC Nashville Global. Use the _terminalID_ field to identify the main terminal at your retail location. If your retail location has multiple terminals, use this _alternateTerminalID_ field to identify the terminal used for the transaction.  This field is a pass-through, which means that CyberSource does not check the value or modify the value in any way before sending it to the processor. 

        :return: The lane_number of this Ptsv2paymentsPointOfSaleInformation.
        :rtype: str
        """
        return self._lane_number

    @lane_number.setter
    def lane_number(self, lane_number):
        """
        Sets the lane_number of this Ptsv2paymentsPointOfSaleInformation.
        Identifier for an alternate terminal at your retail location. You define the value for this field.  This field is supported only for MasterCard transactions on FDC Nashville Global. Use the _terminalID_ field to identify the main terminal at your retail location. If your retail location has multiple terminals, use this _alternateTerminalID_ field to identify the terminal used for the transaction.  This field is a pass-through, which means that CyberSource does not check the value or modify the value in any way before sending it to the processor. 

        :param lane_number: The lane_number of this Ptsv2paymentsPointOfSaleInformation.
        :type: str
        """
        if lane_number is not None and len(lane_number) > 8:
            raise ValueError("Invalid value for `lane_number`, length must be less than or equal to `8`")

        self._lane_number = lane_number

    @property
    def card_present(self):
        """
        Gets the card_present of this Ptsv2paymentsPointOfSaleInformation.
        Indicates whether the card is present at the time of the transaction. Possible values:   - **true**: Card is present.  - **false**: Card is not present. 

        :return: The card_present of this Ptsv2paymentsPointOfSaleInformation.
        :rtype: bool
        """
        return self._card_present

    @card_present.setter
    def card_present(self, card_present):
        """
        Sets the card_present of this Ptsv2paymentsPointOfSaleInformation.
        Indicates whether the card is present at the time of the transaction. Possible values:   - **true**: Card is present.  - **false**: Card is not present. 

        :param card_present: The card_present of this Ptsv2paymentsPointOfSaleInformation.
        :type: bool
        """

        self._card_present = card_present

    @property
    def cat_level(self):
        """
        Gets the cat_level of this Ptsv2paymentsPointOfSaleInformation.
        Type of cardholder-activated terminal. Possible values:   - 1: Automated dispensing machine  - 2: Self-service terminal  - 3: Limited amount terminal  - 4: In-flight commerce (IFC) terminal  - 5: Radio frequency device  - 6: Mobile acceptance terminal  - 7: Electronic cash register  - 8: E-commerce device at your location  - 9: Terminal or cash register that uses a dialup connection to connect to the transaction processing network  * Applicable only for CTV for Payouts. 

        :return: The cat_level of this Ptsv2paymentsPointOfSaleInformation.
        :rtype: int
        """
        return self._cat_level

    @cat_level.setter
    def cat_level(self, cat_level):
        """
        Sets the cat_level of this Ptsv2paymentsPointOfSaleInformation.
        Type of cardholder-activated terminal. Possible values:   - 1: Automated dispensing machine  - 2: Self-service terminal  - 3: Limited amount terminal  - 4: In-flight commerce (IFC) terminal  - 5: Radio frequency device  - 6: Mobile acceptance terminal  - 7: Electronic cash register  - 8: E-commerce device at your location  - 9: Terminal or cash register that uses a dialup connection to connect to the transaction processing network  * Applicable only for CTV for Payouts. 

        :param cat_level: The cat_level of this Ptsv2paymentsPointOfSaleInformation.
        :type: int
        """
        if cat_level is not None and cat_level > 9:
            raise ValueError("Invalid value for `cat_level`, must be a value less than or equal to `9`")
        if cat_level is not None and cat_level < 1:
            raise ValueError("Invalid value for `cat_level`, must be a value greater than or equal to `1`")

        self._cat_level = cat_level

    @property
    def entry_mode(self):
        """
        Gets the entry_mode of this Ptsv2paymentsPointOfSaleInformation.
        Method of entering credit card information into the POS terminal. Possible values:   - contact: Read from direct contact with chip card.  - contactless: Read from a contactless interface using chip data.  - keyed: Manually keyed into POS terminal.  - msd: Read from a contactless interface using magnetic stripe data (MSD).  - swiped: Read from credit card magnetic stripe.  The contact, contactless, and msd values are supported only for EMV transactions. * Applicable only for CTV for Payouts. 

        :return: The entry_mode of this Ptsv2paymentsPointOfSaleInformation.
        :rtype: str
        """
        return self._entry_mode

    @entry_mode.setter
    def entry_mode(self, entry_mode):
        """
        Sets the entry_mode of this Ptsv2paymentsPointOfSaleInformation.
        Method of entering credit card information into the POS terminal. Possible values:   - contact: Read from direct contact with chip card.  - contactless: Read from a contactless interface using chip data.  - keyed: Manually keyed into POS terminal.  - msd: Read from a contactless interface using magnetic stripe data (MSD).  - swiped: Read from credit card magnetic stripe.  The contact, contactless, and msd values are supported only for EMV transactions. * Applicable only for CTV for Payouts. 

        :param entry_mode: The entry_mode of this Ptsv2paymentsPointOfSaleInformation.
        :type: str
        """
        if entry_mode is not None and len(entry_mode) > 11:
            raise ValueError("Invalid value for `entry_mode`, length must be less than or equal to `11`")

        self._entry_mode = entry_mode

    @property
    def terminal_capability(self):
        """
        Gets the terminal_capability of this Ptsv2paymentsPointOfSaleInformation.
        POS terminal’s capability. Possible values:   - 1: Terminal has a magnetic stripe reader only.  - 2: Terminal has a magnetic stripe reader and manual entry capability.  - 3: Terminal has manual entry capability only.  - 4: Terminal can read chip cards.  - 5: Terminal can read contactless chip cards.  The values of 4 and 5 are supported only for EMV transactions. * Applicable only for CTV for Payouts.   

        :return: The terminal_capability of this Ptsv2paymentsPointOfSaleInformation.
        :rtype: int
        """
        return self._terminal_capability

    @terminal_capability.setter
    def terminal_capability(self, terminal_capability):
        """
        Sets the terminal_capability of this Ptsv2paymentsPointOfSaleInformation.
        POS terminal’s capability. Possible values:   - 1: Terminal has a magnetic stripe reader only.  - 2: Terminal has a magnetic stripe reader and manual entry capability.  - 3: Terminal has manual entry capability only.  - 4: Terminal can read chip cards.  - 5: Terminal can read contactless chip cards.  The values of 4 and 5 are supported only for EMV transactions. * Applicable only for CTV for Payouts.   

        :param terminal_capability: The terminal_capability of this Ptsv2paymentsPointOfSaleInformation.
        :type: int
        """
        if terminal_capability is not None and terminal_capability > 5:
            raise ValueError("Invalid value for `terminal_capability`, must be a value less than or equal to `5`")
        if terminal_capability is not None and terminal_capability < 1:
            raise ValueError("Invalid value for `terminal_capability`, must be a value greater than or equal to `1`")

        self._terminal_capability = terminal_capability

    @property
    def pin_entry_capability(self):
        """
        Gets the pin_entry_capability of this Ptsv2paymentsPointOfSaleInformation.
        A one-digit code that identifies the capability of terminal to capture PINs.  This code does not necessarily mean that a PIN was entered or is included in this message.  For Payouts: This field is applicable for CtV. 

        :return: The pin_entry_capability of this Ptsv2paymentsPointOfSaleInformation.
        :rtype: int
        """
        return self._pin_entry_capability

    @pin_entry_capability.setter
    def pin_entry_capability(self, pin_entry_capability):
        """
        Sets the pin_entry_capability of this Ptsv2paymentsPointOfSaleInformation.
        A one-digit code that identifies the capability of terminal to capture PINs.  This code does not necessarily mean that a PIN was entered or is included in this message.  For Payouts: This field is applicable for CtV. 

        :param pin_entry_capability: The pin_entry_capability of this Ptsv2paymentsPointOfSaleInformation.
        :type: int
        """
        if pin_entry_capability is not None and pin_entry_capability > 1:
            raise ValueError("Invalid value for `pin_entry_capability`, must be a value less than or equal to `1`")
        if pin_entry_capability is not None and pin_entry_capability < 1:
            raise ValueError("Invalid value for `pin_entry_capability`, must be a value greater than or equal to `1`")

        self._pin_entry_capability = pin_entry_capability

    @property
    def operating_environment(self):
        """
        Gets the operating_environment of this Ptsv2paymentsPointOfSaleInformation.
        Operating environment. Possible values:   - 0: No terminal used or unknown environment.  - 1: On merchant premises, attended.  - 2: On merchant premises, unattended, or cardholder terminal. Examples: oil, kiosks, self-checkout, home       computer, mobile telephone, personal digital assistant (PDA). Cardholder terminal is supported only for       MasterCard transactions on **CyberSource through VisaNet**.  - 3: Off merchant premises, attended. Examples: portable POS devices at trade shows, at service calls, or in       taxis.  - 4: Off merchant premises, unattended, or cardholder terminal. Examples: vending machines, home computer,       mobile telephone, PDA. Cardholder terminal is supported only for MasterCard transactions on **CyberSource       through VisaNet**.  - 5: On premises of cardholder, unattended.  - 9: Unknown delivery mode.  - S: Electronic delivery of product. Examples: music, software, or eTickets that are downloaded over the       internet.  - T: Physical delivery of product. Examples: music or software that is delivered by mail or by a courier.  This field is supported only for **American Express Direct** and **CyberSource through VisaNet**.  **CyberSource through VisaNet**  For MasterCard transactions, the only valid values are 2 and 4. 

        :return: The operating_environment of this Ptsv2paymentsPointOfSaleInformation.
        :rtype: str
        """
        return self._operating_environment

    @operating_environment.setter
    def operating_environment(self, operating_environment):
        """
        Sets the operating_environment of this Ptsv2paymentsPointOfSaleInformation.
        Operating environment. Possible values:   - 0: No terminal used or unknown environment.  - 1: On merchant premises, attended.  - 2: On merchant premises, unattended, or cardholder terminal. Examples: oil, kiosks, self-checkout, home       computer, mobile telephone, personal digital assistant (PDA). Cardholder terminal is supported only for       MasterCard transactions on **CyberSource through VisaNet**.  - 3: Off merchant premises, attended. Examples: portable POS devices at trade shows, at service calls, or in       taxis.  - 4: Off merchant premises, unattended, or cardholder terminal. Examples: vending machines, home computer,       mobile telephone, PDA. Cardholder terminal is supported only for MasterCard transactions on **CyberSource       through VisaNet**.  - 5: On premises of cardholder, unattended.  - 9: Unknown delivery mode.  - S: Electronic delivery of product. Examples: music, software, or eTickets that are downloaded over the       internet.  - T: Physical delivery of product. Examples: music or software that is delivered by mail or by a courier.  This field is supported only for **American Express Direct** and **CyberSource through VisaNet**.  **CyberSource through VisaNet**  For MasterCard transactions, the only valid values are 2 and 4. 

        :param operating_environment: The operating_environment of this Ptsv2paymentsPointOfSaleInformation.
        :type: str
        """
        if operating_environment is not None and len(operating_environment) > 1:
            raise ValueError("Invalid value for `operating_environment`, length must be less than or equal to `1`")

        self._operating_environment = operating_environment

    @property
    def emv(self):
        """
        Gets the emv of this Ptsv2paymentsPointOfSaleInformation.

        :return: The emv of this Ptsv2paymentsPointOfSaleInformation.
        :rtype: Ptsv2paymentsPointOfSaleInformationEmv
        """
        return self._emv

    @emv.setter
    def emv(self, emv):
        """
        Sets the emv of this Ptsv2paymentsPointOfSaleInformation.

        :param emv: The emv of this Ptsv2paymentsPointOfSaleInformation.
        :type: Ptsv2paymentsPointOfSaleInformationEmv
        """

        self._emv = emv

    @property
    def amex_capn_data(self):
        """
        Gets the amex_capn_data of this Ptsv2paymentsPointOfSaleInformation.
        Point-of-sale details for the transaction. This value is returned only for **American Express Direct**. CyberSource generates this value, which consists of a series of codes that identify terminal capability, security data, and specific conditions present at the time the transaction occurred. To comply with the CAPN requirements, this  value must be included in all subsequent follow-on requests, such as captures and follow-on credits.  When you perform authorizations, captures, and credits through CyberSource, CyberSource passes this value from the authorization service to the subsequent services for you. However, when you perform authorizations through CyberSource and perform subsequent services through other financial institutions, you must ensure that your requests for captures and credits include this value. 

        :return: The amex_capn_data of this Ptsv2paymentsPointOfSaleInformation.
        :rtype: str
        """
        return self._amex_capn_data

    @amex_capn_data.setter
    def amex_capn_data(self, amex_capn_data):
        """
        Sets the amex_capn_data of this Ptsv2paymentsPointOfSaleInformation.
        Point-of-sale details for the transaction. This value is returned only for **American Express Direct**. CyberSource generates this value, which consists of a series of codes that identify terminal capability, security data, and specific conditions present at the time the transaction occurred. To comply with the CAPN requirements, this  value must be included in all subsequent follow-on requests, such as captures and follow-on credits.  When you perform authorizations, captures, and credits through CyberSource, CyberSource passes this value from the authorization service to the subsequent services for you. However, when you perform authorizations through CyberSource and perform subsequent services through other financial institutions, you must ensure that your requests for captures and credits include this value. 

        :param amex_capn_data: The amex_capn_data of this Ptsv2paymentsPointOfSaleInformation.
        :type: str
        """
        if amex_capn_data is not None and len(amex_capn_data) > 12:
            raise ValueError("Invalid value for `amex_capn_data`, length must be less than or equal to `12`")

        self._amex_capn_data = amex_capn_data

    @property
    def track_data(self):
        """
        Gets the track_data of this Ptsv2paymentsPointOfSaleInformation.
        Card’s track 1 and 2 data. For all processors except FDMS Nashville, this value consists of one of the following:   - Track 1 data  - Track 2 data  - Data for both tracks 1 and 2  For FDMS Nashville, this value consists of one of the following:  - Track 1 data  - Data for both tracks 1 and 2  Example: %B4111111111111111^SMITH/JOHN ^1612101976110000868000000?;4111111111111111=16121019761186800000? 

        :return: The track_data of this Ptsv2paymentsPointOfSaleInformation.
        :rtype: str
        """
        return self._track_data

    @track_data.setter
    def track_data(self, track_data):
        """
        Sets the track_data of this Ptsv2paymentsPointOfSaleInformation.
        Card’s track 1 and 2 data. For all processors except FDMS Nashville, this value consists of one of the following:   - Track 1 data  - Track 2 data  - Data for both tracks 1 and 2  For FDMS Nashville, this value consists of one of the following:  - Track 1 data  - Data for both tracks 1 and 2  Example: %B4111111111111111^SMITH/JOHN ^1612101976110000868000000?;4111111111111111=16121019761186800000? 

        :param track_data: The track_data of this Ptsv2paymentsPointOfSaleInformation.
        :type: str
        """

        self._track_data = track_data

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Ptsv2paymentsPointOfSaleInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
