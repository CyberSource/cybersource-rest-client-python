# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Boardingv1registrationsProductInformationSelectedProductsPaymentsPayoutsConfigurationInformationConfigurationsProcessorAccount(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'originator_merchant_id': 'str',
        'originator_terminal_id': 'list[str]',
        'supported_currencies': 'list[str]'
    }

    attribute_map = {
        'originator_merchant_id': 'originatorMerchantId',
        'originator_terminal_id': 'originatorTerminalId',
        'supported_currencies': 'supportedCurrencies'
    }

    def __init__(self, originator_merchant_id=None, originator_terminal_id=None, supported_currencies=None):
        """
        Boardingv1registrationsProductInformationSelectedProductsPaymentsPayoutsConfigurationInformationConfigurationsProcessorAccount - a model defined in Swagger
        """

        self._originator_merchant_id = None
        self._originator_terminal_id = None
        self._supported_currencies = None

        self.originator_merchant_id = originator_merchant_id
        self.originator_terminal_id = originator_terminal_id
        if supported_currencies is not None:
          self.supported_currencies = supported_currencies

    @property
    def originator_merchant_id(self):
        """
        Gets the originator_merchant_id of this Boardingv1registrationsProductInformationSelectedProductsPaymentsPayoutsConfigurationInformationConfigurationsProcessorAccount.
        TBD

        :return: The originator_merchant_id of this Boardingv1registrationsProductInformationSelectedProductsPaymentsPayoutsConfigurationInformationConfigurationsProcessorAccount.
        :rtype: str
        """
        return self._originator_merchant_id

    @originator_merchant_id.setter
    def originator_merchant_id(self, originator_merchant_id):
        """
        Sets the originator_merchant_id of this Boardingv1registrationsProductInformationSelectedProductsPaymentsPayoutsConfigurationInformationConfigurationsProcessorAccount.
        TBD

        :param originator_merchant_id: The originator_merchant_id of this Boardingv1registrationsProductInformationSelectedProductsPaymentsPayoutsConfigurationInformationConfigurationsProcessorAccount.
        :type: str
        """
        if originator_merchant_id is None:
            raise ValueError("Invalid value for `originator_merchant_id`, must not be `None`")

        self._originator_merchant_id = originator_merchant_id

    @property
    def originator_terminal_id(self):
        """
        Gets the originator_terminal_id of this Boardingv1registrationsProductInformationSelectedProductsPaymentsPayoutsConfigurationInformationConfigurationsProcessorAccount.
        TBD

        :return: The originator_terminal_id of this Boardingv1registrationsProductInformationSelectedProductsPaymentsPayoutsConfigurationInformationConfigurationsProcessorAccount.
        :rtype: list[str]
        """
        return self._originator_terminal_id

    @originator_terminal_id.setter
    def originator_terminal_id(self, originator_terminal_id):
        """
        Sets the originator_terminal_id of this Boardingv1registrationsProductInformationSelectedProductsPaymentsPayoutsConfigurationInformationConfigurationsProcessorAccount.
        TBD

        :param originator_terminal_id: The originator_terminal_id of this Boardingv1registrationsProductInformationSelectedProductsPaymentsPayoutsConfigurationInformationConfigurationsProcessorAccount.
        :type: list[str]
        """
        if originator_terminal_id is None:
            raise ValueError("Invalid value for `originator_terminal_id`, must not be `None`")

        self._originator_terminal_id = originator_terminal_id

    @property
    def supported_currencies(self):
        """
        Gets the supported_currencies of this Boardingv1registrationsProductInformationSelectedProductsPaymentsPayoutsConfigurationInformationConfigurationsProcessorAccount.
        Three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)

        :return: The supported_currencies of this Boardingv1registrationsProductInformationSelectedProductsPaymentsPayoutsConfigurationInformationConfigurationsProcessorAccount.
        :rtype: list[str]
        """
        return self._supported_currencies

    @supported_currencies.setter
    def supported_currencies(self, supported_currencies):
        """
        Sets the supported_currencies of this Boardingv1registrationsProductInformationSelectedProductsPaymentsPayoutsConfigurationInformationConfigurationsProcessorAccount.
        Three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)

        :param supported_currencies: The supported_currencies of this Boardingv1registrationsProductInformationSelectedProductsPaymentsPayoutsConfigurationInformationConfigurationsProcessorAccount.
        :type: list[str]
        """

        self._supported_currencies = supported_currencies

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Boardingv1registrationsProductInformationSelectedProductsPaymentsPayoutsConfigurationInformationConfigurationsProcessorAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
