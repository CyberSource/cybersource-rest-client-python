# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Boardingv1registrationsProductInformationSelectedProductsPayments(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'card_processing': 'Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessing',
        'card_present_connect': 'Boardingv1registrationsProductInformationSelectedProductsPaymentsCardPresentConnect',
        'cybs_ready_terminal': 'Boardingv1registrationsProductInformationSelectedProductsPaymentsCybsReadyTerminal',
        'e_check': 'Boardingv1registrationsProductInformationSelectedProductsPaymentsECheck',
        'payer_authentication': 'Boardingv1registrationsProductInformationSelectedProductsPaymentsPayerAuthentication',
        'digital_payments': 'Boardingv1registrationsProductInformationSelectedProductsPaymentsDigitalPayments',
        'secure_acceptance': 'Boardingv1registrationsProductInformationSelectedProductsPaymentsSecureAcceptance',
        'virtual_terminal': 'Boardingv1registrationsProductInformationSelectedProductsPaymentsVirtualTerminal',
        'currency_conversion': 'Boardingv1registrationsProductInformationSelectedProductsPaymentsCurrencyConversion',
        'tax': 'Boardingv1registrationsProductInformationSelectedProductsPaymentsTax',
        'customer_invoicing': 'Boardingv1registrationsProductInformationSelectedProductsPaymentsTax',
        'recurring_billing': 'Boardingv1registrationsProductInformationSelectedProductsPaymentsTax',
        'payment_orchestration': 'Boardingv1registrationsProductInformationSelectedProductsPaymentsTax',
        'payouts': 'Boardingv1registrationsProductInformationSelectedProductsPaymentsPayouts',
        'differential_fee': 'Boardingv1registrationsProductInformationSelectedProductsPaymentsDifferentialFee',
        'pay_by_link': 'Boardingv1registrationsProductInformationSelectedProductsPaymentsTax',
        'unified_checkout': 'Boardingv1registrationsProductInformationSelectedProductsPaymentsTax'
    }

    attribute_map = {
        'card_processing': 'cardProcessing',
        'card_present_connect': 'cardPresentConnect',
        'cybs_ready_terminal': 'cybsReadyTerminal',
        'e_check': 'eCheck',
        'payer_authentication': 'payerAuthentication',
        'digital_payments': 'digitalPayments',
        'secure_acceptance': 'secureAcceptance',
        'virtual_terminal': 'virtualTerminal',
        'currency_conversion': 'currencyConversion',
        'tax': 'tax',
        'customer_invoicing': 'customerInvoicing',
        'recurring_billing': 'recurringBilling',
        'payment_orchestration': 'paymentOrchestration',
        'payouts': 'payouts',
        'differential_fee': 'differentialFee',
        'pay_by_link': 'payByLink',
        'unified_checkout': 'unifiedCheckout'
    }

    def __init__(self, card_processing=None, card_present_connect=None, cybs_ready_terminal=None, e_check=None, payer_authentication=None, digital_payments=None, secure_acceptance=None, virtual_terminal=None, currency_conversion=None, tax=None, customer_invoicing=None, recurring_billing=None, payment_orchestration=None, payouts=None, differential_fee=None, pay_by_link=None, unified_checkout=None):
        """
        Boardingv1registrationsProductInformationSelectedProductsPayments - a model defined in Swagger
        """

        self._card_processing = None
        self._card_present_connect = None
        self._cybs_ready_terminal = None
        self._e_check = None
        self._payer_authentication = None
        self._digital_payments = None
        self._secure_acceptance = None
        self._virtual_terminal = None
        self._currency_conversion = None
        self._tax = None
        self._customer_invoicing = None
        self._recurring_billing = None
        self._payment_orchestration = None
        self._payouts = None
        self._differential_fee = None
        self._pay_by_link = None
        self._unified_checkout = None

        if card_processing is not None:
          self.card_processing = card_processing
        if card_present_connect is not None:
          self.card_present_connect = card_present_connect
        if cybs_ready_terminal is not None:
          self.cybs_ready_terminal = cybs_ready_terminal
        if e_check is not None:
          self.e_check = e_check
        if payer_authentication is not None:
          self.payer_authentication = payer_authentication
        if digital_payments is not None:
          self.digital_payments = digital_payments
        if secure_acceptance is not None:
          self.secure_acceptance = secure_acceptance
        if virtual_terminal is not None:
          self.virtual_terminal = virtual_terminal
        if currency_conversion is not None:
          self.currency_conversion = currency_conversion
        if tax is not None:
          self.tax = tax
        if customer_invoicing is not None:
          self.customer_invoicing = customer_invoicing
        if recurring_billing is not None:
          self.recurring_billing = recurring_billing
        if payment_orchestration is not None:
          self.payment_orchestration = payment_orchestration
        if payouts is not None:
          self.payouts = payouts
        if differential_fee is not None:
          self.differential_fee = differential_fee
        if pay_by_link is not None:
          self.pay_by_link = pay_by_link
        if unified_checkout is not None:
          self.unified_checkout = unified_checkout

    @property
    def card_processing(self):
        """
        Gets the card_processing of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :return: The card_processing of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :rtype: Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessing
        """
        return self._card_processing

    @card_processing.setter
    def card_processing(self, card_processing):
        """
        Sets the card_processing of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :param card_processing: The card_processing of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :type: Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessing
        """

        self._card_processing = card_processing

    @property
    def card_present_connect(self):
        """
        Gets the card_present_connect of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :return: The card_present_connect of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :rtype: Boardingv1registrationsProductInformationSelectedProductsPaymentsCardPresentConnect
        """
        return self._card_present_connect

    @card_present_connect.setter
    def card_present_connect(self, card_present_connect):
        """
        Sets the card_present_connect of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :param card_present_connect: The card_present_connect of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :type: Boardingv1registrationsProductInformationSelectedProductsPaymentsCardPresentConnect
        """

        self._card_present_connect = card_present_connect

    @property
    def cybs_ready_terminal(self):
        """
        Gets the cybs_ready_terminal of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :return: The cybs_ready_terminal of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :rtype: Boardingv1registrationsProductInformationSelectedProductsPaymentsCybsReadyTerminal
        """
        return self._cybs_ready_terminal

    @cybs_ready_terminal.setter
    def cybs_ready_terminal(self, cybs_ready_terminal):
        """
        Sets the cybs_ready_terminal of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :param cybs_ready_terminal: The cybs_ready_terminal of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :type: Boardingv1registrationsProductInformationSelectedProductsPaymentsCybsReadyTerminal
        """

        self._cybs_ready_terminal = cybs_ready_terminal

    @property
    def e_check(self):
        """
        Gets the e_check of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :return: The e_check of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :rtype: Boardingv1registrationsProductInformationSelectedProductsPaymentsECheck
        """
        return self._e_check

    @e_check.setter
    def e_check(self, e_check):
        """
        Sets the e_check of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :param e_check: The e_check of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :type: Boardingv1registrationsProductInformationSelectedProductsPaymentsECheck
        """

        self._e_check = e_check

    @property
    def payer_authentication(self):
        """
        Gets the payer_authentication of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :return: The payer_authentication of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :rtype: Boardingv1registrationsProductInformationSelectedProductsPaymentsPayerAuthentication
        """
        return self._payer_authentication

    @payer_authentication.setter
    def payer_authentication(self, payer_authentication):
        """
        Sets the payer_authentication of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :param payer_authentication: The payer_authentication of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :type: Boardingv1registrationsProductInformationSelectedProductsPaymentsPayerAuthentication
        """

        self._payer_authentication = payer_authentication

    @property
    def digital_payments(self):
        """
        Gets the digital_payments of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :return: The digital_payments of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :rtype: Boardingv1registrationsProductInformationSelectedProductsPaymentsDigitalPayments
        """
        return self._digital_payments

    @digital_payments.setter
    def digital_payments(self, digital_payments):
        """
        Sets the digital_payments of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :param digital_payments: The digital_payments of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :type: Boardingv1registrationsProductInformationSelectedProductsPaymentsDigitalPayments
        """

        self._digital_payments = digital_payments

    @property
    def secure_acceptance(self):
        """
        Gets the secure_acceptance of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :return: The secure_acceptance of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :rtype: Boardingv1registrationsProductInformationSelectedProductsPaymentsSecureAcceptance
        """
        return self._secure_acceptance

    @secure_acceptance.setter
    def secure_acceptance(self, secure_acceptance):
        """
        Sets the secure_acceptance of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :param secure_acceptance: The secure_acceptance of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :type: Boardingv1registrationsProductInformationSelectedProductsPaymentsSecureAcceptance
        """

        self._secure_acceptance = secure_acceptance

    @property
    def virtual_terminal(self):
        """
        Gets the virtual_terminal of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :return: The virtual_terminal of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :rtype: Boardingv1registrationsProductInformationSelectedProductsPaymentsVirtualTerminal
        """
        return self._virtual_terminal

    @virtual_terminal.setter
    def virtual_terminal(self, virtual_terminal):
        """
        Sets the virtual_terminal of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :param virtual_terminal: The virtual_terminal of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :type: Boardingv1registrationsProductInformationSelectedProductsPaymentsVirtualTerminal
        """

        self._virtual_terminal = virtual_terminal

    @property
    def currency_conversion(self):
        """
        Gets the currency_conversion of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :return: The currency_conversion of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :rtype: Boardingv1registrationsProductInformationSelectedProductsPaymentsCurrencyConversion
        """
        return self._currency_conversion

    @currency_conversion.setter
    def currency_conversion(self, currency_conversion):
        """
        Sets the currency_conversion of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :param currency_conversion: The currency_conversion of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :type: Boardingv1registrationsProductInformationSelectedProductsPaymentsCurrencyConversion
        """

        self._currency_conversion = currency_conversion

    @property
    def tax(self):
        """
        Gets the tax of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :return: The tax of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :rtype: Boardingv1registrationsProductInformationSelectedProductsPaymentsTax
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """
        Sets the tax of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :param tax: The tax of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :type: Boardingv1registrationsProductInformationSelectedProductsPaymentsTax
        """

        self._tax = tax

    @property
    def customer_invoicing(self):
        """
        Gets the customer_invoicing of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :return: The customer_invoicing of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :rtype: Boardingv1registrationsProductInformationSelectedProductsPaymentsTax
        """
        return self._customer_invoicing

    @customer_invoicing.setter
    def customer_invoicing(self, customer_invoicing):
        """
        Sets the customer_invoicing of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :param customer_invoicing: The customer_invoicing of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :type: Boardingv1registrationsProductInformationSelectedProductsPaymentsTax
        """

        self._customer_invoicing = customer_invoicing

    @property
    def recurring_billing(self):
        """
        Gets the recurring_billing of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :return: The recurring_billing of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :rtype: Boardingv1registrationsProductInformationSelectedProductsPaymentsTax
        """
        return self._recurring_billing

    @recurring_billing.setter
    def recurring_billing(self, recurring_billing):
        """
        Sets the recurring_billing of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :param recurring_billing: The recurring_billing of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :type: Boardingv1registrationsProductInformationSelectedProductsPaymentsTax
        """

        self._recurring_billing = recurring_billing

    @property
    def payment_orchestration(self):
        """
        Gets the payment_orchestration of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :return: The payment_orchestration of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :rtype: Boardingv1registrationsProductInformationSelectedProductsPaymentsTax
        """
        return self._payment_orchestration

    @payment_orchestration.setter
    def payment_orchestration(self, payment_orchestration):
        """
        Sets the payment_orchestration of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :param payment_orchestration: The payment_orchestration of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :type: Boardingv1registrationsProductInformationSelectedProductsPaymentsTax
        """

        self._payment_orchestration = payment_orchestration

    @property
    def payouts(self):
        """
        Gets the payouts of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :return: The payouts of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :rtype: Boardingv1registrationsProductInformationSelectedProductsPaymentsPayouts
        """
        return self._payouts

    @payouts.setter
    def payouts(self, payouts):
        """
        Sets the payouts of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :param payouts: The payouts of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :type: Boardingv1registrationsProductInformationSelectedProductsPaymentsPayouts
        """

        self._payouts = payouts

    @property
    def differential_fee(self):
        """
        Gets the differential_fee of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :return: The differential_fee of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :rtype: Boardingv1registrationsProductInformationSelectedProductsPaymentsDifferentialFee
        """
        return self._differential_fee

    @differential_fee.setter
    def differential_fee(self, differential_fee):
        """
        Sets the differential_fee of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :param differential_fee: The differential_fee of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :type: Boardingv1registrationsProductInformationSelectedProductsPaymentsDifferentialFee
        """

        self._differential_fee = differential_fee

    @property
    def pay_by_link(self):
        """
        Gets the pay_by_link of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :return: The pay_by_link of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :rtype: Boardingv1registrationsProductInformationSelectedProductsPaymentsTax
        """
        return self._pay_by_link

    @pay_by_link.setter
    def pay_by_link(self, pay_by_link):
        """
        Sets the pay_by_link of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :param pay_by_link: The pay_by_link of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :type: Boardingv1registrationsProductInformationSelectedProductsPaymentsTax
        """

        self._pay_by_link = pay_by_link

    @property
    def unified_checkout(self):
        """
        Gets the unified_checkout of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :return: The unified_checkout of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :rtype: Boardingv1registrationsProductInformationSelectedProductsPaymentsTax
        """
        return self._unified_checkout

    @unified_checkout.setter
    def unified_checkout(self, unified_checkout):
        """
        Sets the unified_checkout of this Boardingv1registrationsProductInformationSelectedProductsPayments.

        :param unified_checkout: The unified_checkout of this Boardingv1registrationsProductInformationSelectedProductsPayments.
        :type: Boardingv1registrationsProductInformationSelectedProductsPaymentsTax
        """

        self._unified_checkout = unified_checkout

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Boardingv1registrationsProductInformationSelectedProductsPayments):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
