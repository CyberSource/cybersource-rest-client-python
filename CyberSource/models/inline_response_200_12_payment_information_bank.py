# coding: utf-8

"""
    CyberSource Flex API

    Simple PAN tokenization service

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse20012PaymentInformationBank(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'routing_number': 'str',
        'branch_code': 'str',
        'swift_code': 'str',
        'bank_code': 'str',
        'iban': 'str',
        'account': 'InlineResponse20012PaymentInformationBankAccount',
        'mandate': 'InlineResponse20012PaymentInformationBankMandate'
    }

    attribute_map = {
        'routing_number': 'routingNumber',
        'branch_code': 'branchCode',
        'swift_code': 'swiftCode',
        'bank_code': 'bankCode',
        'iban': 'iban',
        'account': 'account',
        'mandate': 'mandate'
    }

    def __init__(self, routing_number=None, branch_code=None, swift_code=None, bank_code=None, iban=None, account=None, mandate=None):
        """
        InlineResponse20012PaymentInformationBank - a model defined in Swagger
        """

        self._routing_number = None
        self._branch_code = None
        self._swift_code = None
        self._bank_code = None
        self._iban = None
        self._account = None
        self._mandate = None

        if routing_number is not None:
          self.routing_number = routing_number
        if branch_code is not None:
          self.branch_code = branch_code
        if swift_code is not None:
          self.swift_code = swift_code
        if bank_code is not None:
          self.bank_code = bank_code
        if iban is not None:
          self.iban = iban
        if account is not None:
          self.account = account
        if mandate is not None:
          self.mandate = mandate

    @property
    def routing_number(self):
        """
        Gets the routing_number of this InlineResponse20012PaymentInformationBank.
        The description for this field is not available.

        :return: The routing_number of this InlineResponse20012PaymentInformationBank.
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """
        Sets the routing_number of this InlineResponse20012PaymentInformationBank.
        The description for this field is not available.

        :param routing_number: The routing_number of this InlineResponse20012PaymentInformationBank.
        :type: str
        """

        self._routing_number = routing_number

    @property
    def branch_code(self):
        """
        Gets the branch_code of this InlineResponse20012PaymentInformationBank.
        The description for this field is not available.

        :return: The branch_code of this InlineResponse20012PaymentInformationBank.
        :rtype: str
        """
        return self._branch_code

    @branch_code.setter
    def branch_code(self, branch_code):
        """
        Sets the branch_code of this InlineResponse20012PaymentInformationBank.
        The description for this field is not available.

        :param branch_code: The branch_code of this InlineResponse20012PaymentInformationBank.
        :type: str
        """

        self._branch_code = branch_code

    @property
    def swift_code(self):
        """
        Gets the swift_code of this InlineResponse20012PaymentInformationBank.
        The description for this field is not available.

        :return: The swift_code of this InlineResponse20012PaymentInformationBank.
        :rtype: str
        """
        return self._swift_code

    @swift_code.setter
    def swift_code(self, swift_code):
        """
        Sets the swift_code of this InlineResponse20012PaymentInformationBank.
        The description for this field is not available.

        :param swift_code: The swift_code of this InlineResponse20012PaymentInformationBank.
        :type: str
        """

        self._swift_code = swift_code

    @property
    def bank_code(self):
        """
        Gets the bank_code of this InlineResponse20012PaymentInformationBank.
        The description for this field is not available.

        :return: The bank_code of this InlineResponse20012PaymentInformationBank.
        :rtype: str
        """
        return self._bank_code

    @bank_code.setter
    def bank_code(self, bank_code):
        """
        Sets the bank_code of this InlineResponse20012PaymentInformationBank.
        The description for this field is not available.

        :param bank_code: The bank_code of this InlineResponse20012PaymentInformationBank.
        :type: str
        """

        self._bank_code = bank_code

    @property
    def iban(self):
        """
        Gets the iban of this InlineResponse20012PaymentInformationBank.
        The description for this field is not available.

        :return: The iban of this InlineResponse20012PaymentInformationBank.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """
        Sets the iban of this InlineResponse20012PaymentInformationBank.
        The description for this field is not available.

        :param iban: The iban of this InlineResponse20012PaymentInformationBank.
        :type: str
        """

        self._iban = iban

    @property
    def account(self):
        """
        Gets the account of this InlineResponse20012PaymentInformationBank.

        :return: The account of this InlineResponse20012PaymentInformationBank.
        :rtype: InlineResponse20012PaymentInformationBankAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this InlineResponse20012PaymentInformationBank.

        :param account: The account of this InlineResponse20012PaymentInformationBank.
        :type: InlineResponse20012PaymentInformationBankAccount
        """

        self._account = account

    @property
    def mandate(self):
        """
        Gets the mandate of this InlineResponse20012PaymentInformationBank.

        :return: The mandate of this InlineResponse20012PaymentInformationBank.
        :rtype: InlineResponse20012PaymentInformationBankMandate
        """
        return self._mandate

    @mandate.setter
    def mandate(self, mandate):
        """
        Sets the mandate of this InlineResponse20012PaymentInformationBank.

        :param mandate: The mandate of this InlineResponse20012PaymentInformationBank.
        :type: InlineResponse20012PaymentInformationBankMandate
        """

        self._mandate = mandate

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse20012PaymentInformationBank):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
