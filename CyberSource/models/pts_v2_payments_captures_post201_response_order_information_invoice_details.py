# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class PtsV2PaymentsCapturesPost201ResponseOrderInformationInvoiceDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'level3_transmission_status': 'str'
    }

    attribute_map = {
        'level3_transmission_status': 'level3TransmissionStatus'
    }

    def __init__(self, level3_transmission_status=None):
        """
        PtsV2PaymentsCapturesPost201ResponseOrderInformationInvoiceDetails - a model defined in Swagger
        """

        self._level3_transmission_status = None

        if level3_transmission_status is not None:
          self.level3_transmission_status = level3_transmission_status

    @property
    def level3_transmission_status(self):
        """
        Gets the level3_transmission_status of this PtsV2PaymentsCapturesPost201ResponseOrderInformationInvoiceDetails.
        Indicates whether CyberSource sent the Level III information to the processor. The possible values are:  If your account is not enabled for Level III data or if you did not include the purchasing level field in your request, CyberSource does not include the Level III data in the request sent to the processor.  Possible values: - **Y** for true - **N** for false 

        :return: The level3_transmission_status of this PtsV2PaymentsCapturesPost201ResponseOrderInformationInvoiceDetails.
        :rtype: str
        """
        return self._level3_transmission_status

    @level3_transmission_status.setter
    def level3_transmission_status(self, level3_transmission_status):
        """
        Sets the level3_transmission_status of this PtsV2PaymentsCapturesPost201ResponseOrderInformationInvoiceDetails.
        Indicates whether CyberSource sent the Level III information to the processor. The possible values are:  If your account is not enabled for Level III data or if you did not include the purchasing level field in your request, CyberSource does not include the Level III data in the request sent to the processor.  Possible values: - **Y** for true - **N** for false 

        :param level3_transmission_status: The level3_transmission_status of this PtsV2PaymentsCapturesPost201ResponseOrderInformationInvoiceDetails.
        :type: str
        """

        self._level3_transmission_status = level3_transmission_status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PtsV2PaymentsCapturesPost201ResponseOrderInformationInvoiceDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
