# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'processors': 'dict(str, Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors)',
        'ignore_address_verification_system': 'bool',
        'visa_straight_through_processing_only': 'bool',
        'amex_transaction_advice_addendum1': 'str',
        'installment': 'Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentInstallment'
    }

    attribute_map = {
        'processors': 'processors',
        'ignore_address_verification_system': 'ignoreAddressVerificationSystem',
        'visa_straight_through_processing_only': 'visaStraightThroughProcessingOnly',
        'amex_transaction_advice_addendum1': 'amexTransactionAdviceAddendum1',
        'installment': 'installment'
    }

    def __init__(self, processors=None, ignore_address_verification_system=None, visa_straight_through_processing_only=None, amex_transaction_advice_addendum1=None, installment=None):
        """
        Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresent - a model defined in Swagger
        """

        self._processors = None
        self._ignore_address_verification_system = None
        self._visa_straight_through_processing_only = None
        self._amex_transaction_advice_addendum1 = None
        self._installment = None

        if processors is not None:
          self.processors = processors
        if ignore_address_verification_system is not None:
          self.ignore_address_verification_system = ignore_address_verification_system
        if visa_straight_through_processing_only is not None:
          self.visa_straight_through_processing_only = visa_straight_through_processing_only
        if amex_transaction_advice_addendum1 is not None:
          self.amex_transaction_advice_addendum1 = amex_transaction_advice_addendum1
        if installment is not None:
          self.installment = installment

    @property
    def processors(self):
        """
        Gets the processors of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresent.
        e.g. * amexdirect * barclays2 * CUP * EFTPOS * fdiglobal * gpx * smartfdc * tsys * vero * VPC  For VPC, CUP and EFTPOS processors, replace the processor name from VPC or CUP or EFTPOS to the actual processor name in the sample request. e.g. replace VPC with &lt;your vpc processor&gt; 

        :return: The processors of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresent.
        :rtype: dict(str, Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors)
        """
        return self._processors

    @processors.setter
    def processors(self, processors):
        """
        Sets the processors of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresent.
        e.g. * amexdirect * barclays2 * CUP * EFTPOS * fdiglobal * gpx * smartfdc * tsys * vero * VPC  For VPC, CUP and EFTPOS processors, replace the processor name from VPC or CUP or EFTPOS to the actual processor name in the sample request. e.g. replace VPC with &lt;your vpc processor&gt; 

        :param processors: The processors of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresent.
        :type: dict(str, Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentProcessors)
        """

        self._processors = processors

    @property
    def ignore_address_verification_system(self):
        """
        Gets the ignore_address_verification_system of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresent.
        Flag for a sale request that indicates whether to allow the capture service to run even when the authorization receives an AVS decline. Applicable for VPC, FDI Global (fdiglobal), GPX (gpx) and GPN (gpn) processors.

        :return: The ignore_address_verification_system of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresent.
        :rtype: bool
        """
        return self._ignore_address_verification_system

    @ignore_address_verification_system.setter
    def ignore_address_verification_system(self, ignore_address_verification_system):
        """
        Sets the ignore_address_verification_system of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresent.
        Flag for a sale request that indicates whether to allow the capture service to run even when the authorization receives an AVS decline. Applicable for VPC, FDI Global (fdiglobal), GPX (gpx) and GPN (gpn) processors.

        :param ignore_address_verification_system: The ignore_address_verification_system of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresent.
        :type: bool
        """

        self._ignore_address_verification_system = ignore_address_verification_system

    @property
    def visa_straight_through_processing_only(self):
        """
        Gets the visa_straight_through_processing_only of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresent.
        Indicates if a merchant is enabled for Straight Through Processing - B2B invoice payments. Applicable for FDI Global (fdiglobal), TSYS (tsys), VPC and GPX (gpx) processors.

        :return: The visa_straight_through_processing_only of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresent.
        :rtype: bool
        """
        return self._visa_straight_through_processing_only

    @visa_straight_through_processing_only.setter
    def visa_straight_through_processing_only(self, visa_straight_through_processing_only):
        """
        Sets the visa_straight_through_processing_only of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresent.
        Indicates if a merchant is enabled for Straight Through Processing - B2B invoice payments. Applicable for FDI Global (fdiglobal), TSYS (tsys), VPC and GPX (gpx) processors.

        :param visa_straight_through_processing_only: The visa_straight_through_processing_only of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresent.
        :type: bool
        """

        self._visa_straight_through_processing_only = visa_straight_through_processing_only

    @property
    def amex_transaction_advice_addendum1(self):
        """
        Gets the amex_transaction_advice_addendum1 of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresent.
        Advice addendum field. It is used to display descriptive information about a transaction on customer’s American Express card statement. Applicable for TSYS (tsys), FDI Global (fdiglobal) and American Express Direct (amexdirect) processors.

        :return: The amex_transaction_advice_addendum1 of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresent.
        :rtype: str
        """
        return self._amex_transaction_advice_addendum1

    @amex_transaction_advice_addendum1.setter
    def amex_transaction_advice_addendum1(self, amex_transaction_advice_addendum1):
        """
        Sets the amex_transaction_advice_addendum1 of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresent.
        Advice addendum field. It is used to display descriptive information about a transaction on customer’s American Express card statement. Applicable for TSYS (tsys), FDI Global (fdiglobal) and American Express Direct (amexdirect) processors.

        :param amex_transaction_advice_addendum1: The amex_transaction_advice_addendum1 of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresent.
        :type: str
        """

        self._amex_transaction_advice_addendum1 = amex_transaction_advice_addendum1

    @property
    def installment(self):
        """
        Gets the installment of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresent.

        :return: The installment of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresent.
        :rtype: Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentInstallment
        """
        return self._installment

    @installment.setter
    def installment(self, installment):
        """
        Sets the installment of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresent.

        :param installment: The installment of this Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresent.
        :type: Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentInstallment
        """

        self._installment = installment

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
