# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class InlineResponse2009(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_count': 'int',
        'offset': 'int',
        'limit': 'int',
        'sort': 'str',
        'count': 'int',
        'devices': 'list[InlineResponse2009Devices]'
    }

    attribute_map = {
        'total_count': 'totalCount',
        'offset': 'offset',
        'limit': 'limit',
        'sort': 'sort',
        'count': 'count',
        'devices': 'devices'
    }

    def __init__(self, total_count=None, offset=None, limit=None, sort=None, count=None, devices=None):
        """
        InlineResponse2009 - a model defined in Swagger
        """

        self._total_count = None
        self._offset = None
        self._limit = None
        self._sort = None
        self._count = None
        self._devices = None

        if total_count is not None:
          self.total_count = total_count
        if offset is not None:
          self.offset = offset
        if limit is not None:
          self.limit = limit
        if sort is not None:
          self.sort = sort
        if count is not None:
          self.count = count
        if devices is not None:
          self.devices = devices

    @property
    def total_count(self):
        """
        Gets the total_count of this InlineResponse2009.
        Total number of results.

        :return: The total_count of this InlineResponse2009.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """
        Sets the total_count of this InlineResponse2009.
        Total number of results.

        :param total_count: The total_count of this InlineResponse2009.
        :type: int
        """

        self._total_count = total_count

    @property
    def offset(self):
        """
        Gets the offset of this InlineResponse2009.
        Controls the starting point within the collection of results, which defaults to 0. The first item in the collection is retrieved by setting a zero offset.  For example, if you have a collection of 15 items to be retrieved from a resource and you specify limit=5, you can retrieve the entire set of results in 3 successive requests by varying the offset value like this:  `offset=0` `offset=5` `offset=10`  **Note:** If an offset larger than the number of results is provided, this will result in no embedded object being returned. 

        :return: The offset of this InlineResponse2009.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """
        Sets the offset of this InlineResponse2009.
        Controls the starting point within the collection of results, which defaults to 0. The first item in the collection is retrieved by setting a zero offset.  For example, if you have a collection of 15 items to be retrieved from a resource and you specify limit=5, you can retrieve the entire set of results in 3 successive requests by varying the offset value like this:  `offset=0` `offset=5` `offset=10`  **Note:** If an offset larger than the number of results is provided, this will result in no embedded object being returned. 

        :param offset: The offset of this InlineResponse2009.
        :type: int
        """

        self._offset = offset

    @property
    def limit(self):
        """
        Gets the limit of this InlineResponse2009.
        Controls the maximum number of items that may be returned for a single request. The default is 20, the maximum is 2500. 

        :return: The limit of this InlineResponse2009.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """
        Sets the limit of this InlineResponse2009.
        Controls the maximum number of items that may be returned for a single request. The default is 20, the maximum is 2500. 

        :param limit: The limit of this InlineResponse2009.
        :type: int
        """

        self._limit = limit

    @property
    def sort(self):
        """
        Gets the sort of this InlineResponse2009.
        A comma separated list of the following form:  `terminalCreationDate:desc or serialNumber or terminalUpdationDate` 

        :return: The sort of this InlineResponse2009.
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """
        Sets the sort of this InlineResponse2009.
        A comma separated list of the following form:  `terminalCreationDate:desc or serialNumber or terminalUpdationDate` 

        :param sort: The sort of this InlineResponse2009.
        :type: str
        """

        self._sort = sort

    @property
    def count(self):
        """
        Gets the count of this InlineResponse2009.
        Results for this page, this could be below the limit.

        :return: The count of this InlineResponse2009.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this InlineResponse2009.
        Results for this page, this could be below the limit.

        :param count: The count of this InlineResponse2009.
        :type: int
        """

        self._count = count

    @property
    def devices(self):
        """
        Gets the devices of this InlineResponse2009.
        A collection of devices

        :return: The devices of this InlineResponse2009.
        :rtype: list[InlineResponse2009Devices]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """
        Sets the devices of this InlineResponse2009.
        A collection of devices

        :param devices: The devices of this InlineResponse2009.
        :type: list[InlineResponse2009Devices]
        """

        self._devices = devices

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2009):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
