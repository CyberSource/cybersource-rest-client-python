# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class Ptsv2paymentsRecipientInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'account_type': 'str',
        'first_name': 'str',
        'middle_name': 'str',
        'last_name': 'str',
        'address1': 'str',
        'administrative_area': 'str',
        'postal_code': 'str',
        'country': 'str',
        'date_of_birth': 'str',
        'beneficiary_id': 'str',
        'beneficiary_name': 'str',
        'beneficiary_address': 'str',
        'alias_name': 'str',
        'nationality': 'str',
        'country_of_birth': 'str',
        'occupation': 'str',
        'email': 'str',
        'locality': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'account_type': 'accountType',
        'first_name': 'firstName',
        'middle_name': 'middleName',
        'last_name': 'lastName',
        'address1': 'address1',
        'administrative_area': 'administrativeArea',
        'postal_code': 'postalCode',
        'country': 'country',
        'date_of_birth': 'dateOfBirth',
        'beneficiary_id': 'beneficiaryId',
        'beneficiary_name': 'beneficiaryName',
        'beneficiary_address': 'beneficiaryAddress',
        'alias_name': 'aliasName',
        'nationality': 'nationality',
        'country_of_birth': 'countryOfBirth',
        'occupation': 'occupation',
        'email': 'email',
        'locality': 'locality'
    }

    def __init__(self, account_id=None, account_type=None, first_name=None, middle_name=None, last_name=None, address1=None, administrative_area=None, postal_code=None, country=None, date_of_birth=None, beneficiary_id=None, beneficiary_name=None, beneficiary_address=None, alias_name=None, nationality=None, country_of_birth=None, occupation=None, email=None, locality=None):
        """
        Ptsv2paymentsRecipientInformation - a model defined in Swagger
        """

        self._account_id = None
        self._account_type = None
        self._first_name = None
        self._middle_name = None
        self._last_name = None
        self._address1 = None
        self._administrative_area = None
        self._postal_code = None
        self._country = None
        self._date_of_birth = None
        self._beneficiary_id = None
        self._beneficiary_name = None
        self._beneficiary_address = None
        self._alias_name = None
        self._nationality = None
        self._country_of_birth = None
        self._occupation = None
        self._email = None
        self._locality = None

        if account_id is not None:
          self.account_id = account_id
        if account_type is not None:
          self.account_type = account_type
        if first_name is not None:
          self.first_name = first_name
        if middle_name is not None:
          self.middle_name = middle_name
        if last_name is not None:
          self.last_name = last_name
        if address1 is not None:
          self.address1 = address1
        if administrative_area is not None:
          self.administrative_area = administrative_area
        if postal_code is not None:
          self.postal_code = postal_code
        if country is not None:
          self.country = country
        if date_of_birth is not None:
          self.date_of_birth = date_of_birth
        if beneficiary_id is not None:
          self.beneficiary_id = beneficiary_id
        if beneficiary_name is not None:
          self.beneficiary_name = beneficiary_name
        if beneficiary_address is not None:
          self.beneficiary_address = beneficiary_address
        if alias_name is not None:
          self.alias_name = alias_name
        if nationality is not None:
          self.nationality = nationality
        if country_of_birth is not None:
          self.country_of_birth = country_of_birth
        if occupation is not None:
          self.occupation = occupation
        if email is not None:
          self.email = email
        if locality is not None:
          self.locality = locality

    @property
    def account_id(self):
        """
        Gets the account_id of this Ptsv2paymentsRecipientInformation.
        Identifier for the recipient's account. This field is applicable for AFT transactions. 

        :return: The account_id of this Ptsv2paymentsRecipientInformation.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this Ptsv2paymentsRecipientInformation.
        Identifier for the recipient's account. This field is applicable for AFT transactions. 

        :param account_id: The account_id of this Ptsv2paymentsRecipientInformation.
        :type: str
        """

        self._account_id = account_id

    @property
    def account_type(self):
        """
        Gets the account_type of this Ptsv2paymentsRecipientInformation.
        Identifies the recipient's account type. This field is applicable for AFT transactions.  Valid values are:   - `00` for Other   - `01` for Routing Transit Number (RTN) + Bank Account Number (BAN)   - `02` for International Bank Account Number (IBAN)   - `03` for Card Account   - `06` for Bank Account Number (BAN) + Bank Identification Code (BIC), also known as a SWIFT code 

        :return: The account_type of this Ptsv2paymentsRecipientInformation.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """
        Sets the account_type of this Ptsv2paymentsRecipientInformation.
        Identifies the recipient's account type. This field is applicable for AFT transactions.  Valid values are:   - `00` for Other   - `01` for Routing Transit Number (RTN) + Bank Account Number (BAN)   - `02` for International Bank Account Number (IBAN)   - `03` for Card Account   - `06` for Bank Account Number (BAN) + Bank Identification Code (BIC), also known as a SWIFT code 

        :param account_type: The account_type of this Ptsv2paymentsRecipientInformation.
        :type: str
        """

        self._account_type = account_type

    @property
    def first_name(self):
        """
        Gets the first_name of this Ptsv2paymentsRecipientInformation.
        First name of the recipient. This field is applicable for AFT transactions.    Only alpha numeric values are supported. Special characters not in the standard ASCII character set, are not supported and will be stripped before being sent to sent to the processor. 

        :return: The first_name of this Ptsv2paymentsRecipientInformation.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this Ptsv2paymentsRecipientInformation.
        First name of the recipient. This field is applicable for AFT transactions.    Only alpha numeric values are supported. Special characters not in the standard ASCII character set, are not supported and will be stripped before being sent to sent to the processor. 

        :param first_name: The first_name of this Ptsv2paymentsRecipientInformation.
        :type: str
        """

        self._first_name = first_name

    @property
    def middle_name(self):
        """
        Gets the middle_name of this Ptsv2paymentsRecipientInformation.
        Middle name of the recipient. This field is applicable for AFT transactions.  Only alpha numeric values are supported. Special characters not in the standard ASCII character set, are not supported and will be stripped before being sent to sent to the processor. 

        :return: The middle_name of this Ptsv2paymentsRecipientInformation.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """
        Sets the middle_name of this Ptsv2paymentsRecipientInformation.
        Middle name of the recipient. This field is applicable for AFT transactions.  Only alpha numeric values are supported. Special characters not in the standard ASCII character set, are not supported and will be stripped before being sent to sent to the processor. 

        :param middle_name: The middle_name of this Ptsv2paymentsRecipientInformation.
        :type: str
        """

        self._middle_name = middle_name

    @property
    def last_name(self):
        """
        Gets the last_name of this Ptsv2paymentsRecipientInformation.
        Last name of the recipient. This field is applicable for AFT transactions.  Only alpha numeric values are supported. Special characters not in the standard ASCII character set, are not supported and will be stripped before being sent to sent to the processor. 

        :return: The last_name of this Ptsv2paymentsRecipientInformation.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this Ptsv2paymentsRecipientInformation.
        Last name of the recipient. This field is applicable for AFT transactions.  Only alpha numeric values are supported. Special characters not in the standard ASCII character set, are not supported and will be stripped before being sent to sent to the processor. 

        :param last_name: The last_name of this Ptsv2paymentsRecipientInformation.
        :type: str
        """

        self._last_name = last_name

    @property
    def address1(self):
        """
        Gets the address1 of this Ptsv2paymentsRecipientInformation.
        The street address of the recipient This field is applicable for AFT and OCT transactions.  Only alpha numeric values are supported. Special characters not in the standard ASCII character set are not supported and will be stripped before being sent to sent to the processor.          

        :return: The address1 of this Ptsv2paymentsRecipientInformation.
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """
        Sets the address1 of this Ptsv2paymentsRecipientInformation.
        The street address of the recipient This field is applicable for AFT and OCT transactions.  Only alpha numeric values are supported. Special characters not in the standard ASCII character set are not supported and will be stripped before being sent to sent to the processor.          

        :param address1: The address1 of this Ptsv2paymentsRecipientInformation.
        :type: str
        """

        self._address1 = address1

    @property
    def administrative_area(self):
        """
        Gets the administrative_area of this Ptsv2paymentsRecipientInformation.
        The state or province of the recipient. This field is applicable for AFT transactions when the recipient country is US or CA. Else it is optional.  Must be a two character value 

        :return: The administrative_area of this Ptsv2paymentsRecipientInformation.
        :rtype: str
        """
        return self._administrative_area

    @administrative_area.setter
    def administrative_area(self, administrative_area):
        """
        Sets the administrative_area of this Ptsv2paymentsRecipientInformation.
        The state or province of the recipient. This field is applicable for AFT transactions when the recipient country is US or CA. Else it is optional.  Must be a two character value 

        :param administrative_area: The administrative_area of this Ptsv2paymentsRecipientInformation.
        :type: str
        """

        self._administrative_area = administrative_area

    @property
    def postal_code(self):
        """
        Gets the postal_code of this Ptsv2paymentsRecipientInformation.
        Partial postal code for the recipient's address. For example, if the postal code is **NN5 7SG**, the value for this field should be the first part of the postal code: **NN5**. This field is a _pass-through_, which means that CyberSource does not verify the value or modify it in any way before sending it to the processor. If the field is not required for the transaction, CyberSource does not forward it to the processor. 

        :return: The postal_code of this Ptsv2paymentsRecipientInformation.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """
        Sets the postal_code of this Ptsv2paymentsRecipientInformation.
        Partial postal code for the recipient's address. For example, if the postal code is **NN5 7SG**, the value for this field should be the first part of the postal code: **NN5**. This field is a _pass-through_, which means that CyberSource does not verify the value or modify it in any way before sending it to the processor. If the field is not required for the transaction, CyberSource does not forward it to the processor. 

        :param postal_code: The postal_code of this Ptsv2paymentsRecipientInformation.
        :type: str
        """

        self._postal_code = postal_code

    @property
    def country(self):
        """
        Gets the country of this Ptsv2paymentsRecipientInformation.
        The country associated with the address of the recipient. This field is applicable for AFT and OCT transactions.  Must be a two character ISO country code.  For example, see [ISO Country Code](https://developer.cybersource.com/docs/cybs/en-us/country-codes/reference/all/na/country-codes/country-codes.html) 

        :return: The country of this Ptsv2paymentsRecipientInformation.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this Ptsv2paymentsRecipientInformation.
        The country associated with the address of the recipient. This field is applicable for AFT and OCT transactions.  Must be a two character ISO country code.  For example, see [ISO Country Code](https://developer.cybersource.com/docs/cybs/en-us/country-codes/reference/all/na/country-codes/country-codes.html) 

        :param country: The country of this Ptsv2paymentsRecipientInformation.
        :type: str
        """

        self._country = country

    @property
    def date_of_birth(self):
        """
        Gets the date_of_birth of this Ptsv2paymentsRecipientInformation.
        Recipient's date of birth. **Format**: `YYYYMMDD`.  This field is a `pass-through`, which means that CyberSource ensures that the value is eight numeric characters but otherwise does not verify the value or modify it in any way before sending it to the processor. If the field is not required for the transaction, CyberSource does not forward it to the processor. 

        :return: The date_of_birth of this Ptsv2paymentsRecipientInformation.
        :rtype: str
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """
        Sets the date_of_birth of this Ptsv2paymentsRecipientInformation.
        Recipient's date of birth. **Format**: `YYYYMMDD`.  This field is a `pass-through`, which means that CyberSource ensures that the value is eight numeric characters but otherwise does not verify the value or modify it in any way before sending it to the processor. If the field is not required for the transaction, CyberSource does not forward it to the processor. 

        :param date_of_birth: The date_of_birth of this Ptsv2paymentsRecipientInformation.
        :type: str
        """

        self._date_of_birth = date_of_birth

    @property
    def beneficiary_id(self):
        """
        Gets the beneficiary_id of this Ptsv2paymentsRecipientInformation.
        Only for e-wallets: ID, username, hash or anything uniquely identifying the ultimate beneficiary. 

        :return: The beneficiary_id of this Ptsv2paymentsRecipientInformation.
        :rtype: str
        """
        return self._beneficiary_id

    @beneficiary_id.setter
    def beneficiary_id(self, beneficiary_id):
        """
        Sets the beneficiary_id of this Ptsv2paymentsRecipientInformation.
        Only for e-wallets: ID, username, hash or anything uniquely identifying the ultimate beneficiary. 

        :param beneficiary_id: The beneficiary_id of this Ptsv2paymentsRecipientInformation.
        :type: str
        """

        self._beneficiary_id = beneficiary_id

    @property
    def beneficiary_name(self):
        """
        Gets the beneficiary_name of this Ptsv2paymentsRecipientInformation.
        Only for e-wallets: The ultimate beneficiary's full name. 

        :return: The beneficiary_name of this Ptsv2paymentsRecipientInformation.
        :rtype: str
        """
        return self._beneficiary_name

    @beneficiary_name.setter
    def beneficiary_name(self, beneficiary_name):
        """
        Sets the beneficiary_name of this Ptsv2paymentsRecipientInformation.
        Only for e-wallets: The ultimate beneficiary's full name. 

        :param beneficiary_name: The beneficiary_name of this Ptsv2paymentsRecipientInformation.
        :type: str
        """

        self._beneficiary_name = beneficiary_name

    @property
    def beneficiary_address(self):
        """
        Gets the beneficiary_address of this Ptsv2paymentsRecipientInformation.
        Only for e-wallets: The ultimate beneficiary's street address (street, zip code, city), excluding the country. Example: \"Main street 1, 12345, Barcelona 

        :return: The beneficiary_address of this Ptsv2paymentsRecipientInformation.
        :rtype: str
        """
        return self._beneficiary_address

    @beneficiary_address.setter
    def beneficiary_address(self, beneficiary_address):
        """
        Sets the beneficiary_address of this Ptsv2paymentsRecipientInformation.
        Only for e-wallets: The ultimate beneficiary's street address (street, zip code, city), excluding the country. Example: \"Main street 1, 12345, Barcelona 

        :param beneficiary_address: The beneficiary_address of this Ptsv2paymentsRecipientInformation.
        :type: str
        """

        self._beneficiary_address = beneficiary_address

    @property
    def alias_name(self):
        """
        Gets the alias_name of this Ptsv2paymentsRecipientInformation.
        Account owner alias name. 

        :return: The alias_name of this Ptsv2paymentsRecipientInformation.
        :rtype: str
        """
        return self._alias_name

    @alias_name.setter
    def alias_name(self, alias_name):
        """
        Sets the alias_name of this Ptsv2paymentsRecipientInformation.
        Account owner alias name. 

        :param alias_name: The alias_name of this Ptsv2paymentsRecipientInformation.
        :type: str
        """

        self._alias_name = alias_name

    @property
    def nationality(self):
        """
        Gets the nationality of this Ptsv2paymentsRecipientInformation.
        Account Owner Nationality

        :return: The nationality of this Ptsv2paymentsRecipientInformation.
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """
        Sets the nationality of this Ptsv2paymentsRecipientInformation.
        Account Owner Nationality

        :param nationality: The nationality of this Ptsv2paymentsRecipientInformation.
        :type: str
        """

        self._nationality = nationality

    @property
    def country_of_birth(self):
        """
        Gets the country_of_birth of this Ptsv2paymentsRecipientInformation.
        Account Owner Country of Birth

        :return: The country_of_birth of this Ptsv2paymentsRecipientInformation.
        :rtype: str
        """
        return self._country_of_birth

    @country_of_birth.setter
    def country_of_birth(self, country_of_birth):
        """
        Sets the country_of_birth of this Ptsv2paymentsRecipientInformation.
        Account Owner Country of Birth

        :param country_of_birth: The country_of_birth of this Ptsv2paymentsRecipientInformation.
        :type: str
        """

        self._country_of_birth = country_of_birth

    @property
    def occupation(self):
        """
        Gets the occupation of this Ptsv2paymentsRecipientInformation.
        Account Owner Occupation

        :return: The occupation of this Ptsv2paymentsRecipientInformation.
        :rtype: str
        """
        return self._occupation

    @occupation.setter
    def occupation(self, occupation):
        """
        Sets the occupation of this Ptsv2paymentsRecipientInformation.
        Account Owner Occupation

        :param occupation: The occupation of this Ptsv2paymentsRecipientInformation.
        :type: str
        """

        self._occupation = occupation

    @property
    def email(self):
        """
        Gets the email of this Ptsv2paymentsRecipientInformation.
        Account Owner email address

        :return: The email of this Ptsv2paymentsRecipientInformation.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Ptsv2paymentsRecipientInformation.
        Account Owner email address

        :param email: The email of this Ptsv2paymentsRecipientInformation.
        :type: str
        """

        self._email = email

    @property
    def locality(self):
        """
        Gets the locality of this Ptsv2paymentsRecipientInformation.
        The city of the recipient. This field is applicable for AFT transactions.  Only alpha numeric values are supported. Special characters not in the standard ASCII character set are not supported and will be stripped before being sent to sent to the processor. 

        :return: The locality of this Ptsv2paymentsRecipientInformation.
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """
        Sets the locality of this Ptsv2paymentsRecipientInformation.
        The city of the recipient. This field is applicable for AFT transactions.  Only alpha numeric values are supported. Special characters not in the standard ASCII character set are not supported and will be stripped before being sent to sent to the processor. 

        :param locality: The locality of this Ptsv2paymentsRecipientInformation.
        :type: str
        """

        self._locality = locality

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Ptsv2paymentsRecipientInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
