# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsAmex(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mode': 'str',
        'se_number': 'str',
        'subscriber_id': 'str',
        'active': 'bool'
    }

    attribute_map = {
        'mode': 'mode',
        'se_number': 'seNumber',
        'subscriber_id': 'subscriberId',
        'active': 'active'
    }

    def __init__(self, mode=None, se_number=None, subscriber_id=None, active=None):
        """
        Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsAmex - a model defined in Swagger
        """

        self._mode = None
        self._se_number = None
        self._subscriber_id = None
        self._active = None

        if mode is not None:
          self.mode = mode
        if se_number is not None:
          self.se_number = se_number
        if subscriber_id is not None:
          self.subscriber_id = subscriber_id
        if active is not None:
          self.active = active

    @property
    def mode(self):
        """
        Gets the mode of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsAmex.
        Type of mode. Valid values are `tokenApi` or `dailyHarvest`.

        :return: The mode of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsAmex.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """
        Sets the mode of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsAmex.
        Type of mode. Valid values are `tokenApi` or `dailyHarvest`.

        :param mode: The mode of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsAmex.
        :type: str
        """

        self._mode = mode

    @property
    def se_number(self):
        """
        Gets the se_number of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsAmex.

        :return: The se_number of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsAmex.
        :rtype: str
        """
        return self._se_number

    @se_number.setter
    def se_number(self, se_number):
        """
        Sets the se_number of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsAmex.

        :param se_number: The se_number of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsAmex.
        :type: str
        """

        self._se_number = se_number

    @property
    def subscriber_id(self):
        """
        Gets the subscriber_id of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsAmex.

        :return: The subscriber_id of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsAmex.
        :rtype: str
        """
        return self._subscriber_id

    @subscriber_id.setter
    def subscriber_id(self, subscriber_id):
        """
        Sets the subscriber_id of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsAmex.

        :param subscriber_id: The subscriber_id of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsAmex.
        :type: str
        """

        self._subscriber_id = subscriber_id

    @property
    def active(self):
        """
        Gets the active of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsAmex.

        :return: The active of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsAmex.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsAmex.

        :param active: The active of this Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsAmex.
        :type: bool
        """

        self._active = active

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Boardingv1registrationsProductInformationSelectedProductsCommerceSolutionsAccountUpdaterConfigurationInformationConfigurationsAmex):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
