# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class Ptsv1pushfundstransferSenderInformationPaymentInformationCard(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'security_code': 'str',
        'source_account_type': 'str',
        'number': 'str',
        'expiration_month': 'str',
        'expiration_year': 'str'
    }

    attribute_map = {
        'type': 'type',
        'security_code': 'securityCode',
        'source_account_type': 'sourceAccountType',
        'number': 'number',
        'expiration_month': 'expirationMonth',
        'expiration_year': 'expirationYear'
    }

    def __init__(self, type=None, security_code=None, source_account_type=None, number=None, expiration_month=None, expiration_year=None):
        """
        Ptsv1pushfundstransferSenderInformationPaymentInformationCard - a model defined in Swagger
        """

        self._type = None
        self._security_code = None
        self._source_account_type = None
        self._number = None
        self._expiration_month = None
        self._expiration_year = None

        if type is not None:
          self.type = type
        if security_code is not None:
          self.security_code = security_code
        if source_account_type is not None:
          self.source_account_type = source_account_type
        if number is not None:
          self.number = number
        if expiration_month is not None:
          self.expiration_month = expiration_month
        if expiration_year is not None:
          self.expiration_year = expiration_year

    @property
    def type(self):
        """
        Gets the type of this Ptsv1pushfundstransferSenderInformationPaymentInformationCard.
        Three-digit value that indicates the card type.  IMPORTANT It is strongly recommended that you include the card type field in request messages even if it is optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.  Possible values: - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value 001 for Visa Electron. - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard. - `033`: Visa Electron - `024`: Maestro - `042`: Maestro International 

        :return: The type of this Ptsv1pushfundstransferSenderInformationPaymentInformationCard.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Ptsv1pushfundstransferSenderInformationPaymentInformationCard.
        Three-digit value that indicates the card type.  IMPORTANT It is strongly recommended that you include the card type field in request messages even if it is optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.  Possible values: - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value 001 for Visa Electron. - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard. - `033`: Visa Electron - `024`: Maestro - `042`: Maestro International 

        :param type: The type of this Ptsv1pushfundstransferSenderInformationPaymentInformationCard.
        :type: str
        """

        self._type = type

    @property
    def security_code(self):
        """
        Gets the security_code of this Ptsv1pushfundstransferSenderInformationPaymentInformationCard.
        3-digit value that indicates the card Cvv2Value. Values can be 0-9. 

        :return: The security_code of this Ptsv1pushfundstransferSenderInformationPaymentInformationCard.
        :rtype: str
        """
        return self._security_code

    @security_code.setter
    def security_code(self, security_code):
        """
        Sets the security_code of this Ptsv1pushfundstransferSenderInformationPaymentInformationCard.
        3-digit value that indicates the card Cvv2Value. Values can be 0-9. 

        :param security_code: The security_code of this Ptsv1pushfundstransferSenderInformationPaymentInformationCard.
        :type: str
        """

        self._security_code = security_code

    @property
    def source_account_type(self):
        """
        Gets the source_account_type of this Ptsv1pushfundstransferSenderInformationPaymentInformationCard.
        Flag that specifies the type of account associated with the card. The cardholder provides this information during the payment process. 

        :return: The source_account_type of this Ptsv1pushfundstransferSenderInformationPaymentInformationCard.
        :rtype: str
        """
        return self._source_account_type

    @source_account_type.setter
    def source_account_type(self, source_account_type):
        """
        Sets the source_account_type of this Ptsv1pushfundstransferSenderInformationPaymentInformationCard.
        Flag that specifies the type of account associated with the card. The cardholder provides this information during the payment process. 

        :param source_account_type: The source_account_type of this Ptsv1pushfundstransferSenderInformationPaymentInformationCard.
        :type: str
        """

        self._source_account_type = source_account_type

    @property
    def number(self):
        """
        Gets the number of this Ptsv1pushfundstransferSenderInformationPaymentInformationCard.
        The customer's payment card number, also known as the Primary Account Number (PAN). 

        :return: The number of this Ptsv1pushfundstransferSenderInformationPaymentInformationCard.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """
        Sets the number of this Ptsv1pushfundstransferSenderInformationPaymentInformationCard.
        The customer's payment card number, also known as the Primary Account Number (PAN). 

        :param number: The number of this Ptsv1pushfundstransferSenderInformationPaymentInformationCard.
        :type: str
        """

        self._number = number

    @property
    def expiration_month(self):
        """
        Gets the expiration_month of this Ptsv1pushfundstransferSenderInformationPaymentInformationCard.
        Two-digit month in which the payment card expires.  Format: MM.  Valid values: 01 through 12. Leading 0 is required. 

        :return: The expiration_month of this Ptsv1pushfundstransferSenderInformationPaymentInformationCard.
        :rtype: str
        """
        return self._expiration_month

    @expiration_month.setter
    def expiration_month(self, expiration_month):
        """
        Sets the expiration_month of this Ptsv1pushfundstransferSenderInformationPaymentInformationCard.
        Two-digit month in which the payment card expires.  Format: MM.  Valid values: 01 through 12. Leading 0 is required. 

        :param expiration_month: The expiration_month of this Ptsv1pushfundstransferSenderInformationPaymentInformationCard.
        :type: str
        """

        self._expiration_month = expiration_month

    @property
    def expiration_year(self):
        """
        Gets the expiration_year of this Ptsv1pushfundstransferSenderInformationPaymentInformationCard.
        Four-digit year in which the payment card expires. 

        :return: The expiration_year of this Ptsv1pushfundstransferSenderInformationPaymentInformationCard.
        :rtype: str
        """
        return self._expiration_year

    @expiration_year.setter
    def expiration_year(self, expiration_year):
        """
        Sets the expiration_year of this Ptsv1pushfundstransferSenderInformationPaymentInformationCard.
        Four-digit year in which the payment card expires. 

        :param expiration_year: The expiration_year of this Ptsv1pushfundstransferSenderInformationPaymentInformationCard.
        :type: str
        """

        self._expiration_year = expiration_year

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Ptsv1pushfundstransferSenderInformationPaymentInformationCard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
