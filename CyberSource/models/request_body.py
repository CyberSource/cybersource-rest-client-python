# coding: utf-8

"""
    CyberSource Flex API

    Simple PAN tokenization service

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RequestBody(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organization_id': 'str',
        'report_definition_name': 'str',
        'report_fields': 'list[str]',
        'report_mime_type': 'str',
        'report_frequency': 'str',
        'report_name': 'str',
        'timezone': 'str',
        'start_time': 'datetime',
        'start_day': 'int',
        'report_filters': 'dict(str, list[str])',
        'report_preferences': 'InlineResponse2006ReportPreferences',
        'selected_merchant_group_name': 'str'
    }

    attribute_map = {
        'organization_id': 'organizationId',
        'report_definition_name': 'reportDefinitionName',
        'report_fields': 'reportFields',
        'report_mime_type': 'reportMimeType',
        'report_frequency': 'reportFrequency',
        'report_name': 'reportName',
        'timezone': 'timezone',
        'start_time': 'startTime',
        'start_day': 'startDay',
        'report_filters': 'reportFilters',
        'report_preferences': 'reportPreferences',
        'selected_merchant_group_name': 'selectedMerchantGroupName'
    }

    def __init__(self, organization_id=None, report_definition_name=None, report_fields=None, report_mime_type=None, report_frequency=None, report_name=None, timezone=None, start_time=None, start_day=None, report_filters=None, report_preferences=None, selected_merchant_group_name=None):
        """
        RequestBody - a model defined in Swagger
        """

        self._organization_id = None
        self._report_definition_name = None
        self._report_fields = None
        self._report_mime_type = None
        self._report_frequency = None
        self._report_name = None
        self._timezone = None
        self._start_time = None
        self._start_day = None
        self._report_filters = None
        self._report_preferences = None
        self._selected_merchant_group_name = None

        if organization_id is not None:
          self.organization_id = organization_id
        #self.report_definition_name = report_definition_name
        #self.report_fields = report_fields
        if report_mime_type is not None:
          self.report_mime_type = report_mime_type
        if report_frequency is not None:
          self.report_frequency = report_frequency
        #self.report_name = report_name
        if timezone is not None:
          self.timezone = timezone
        if start_time is not None:
          self.start_time = start_time
        if start_day is not None:
          self.start_day = start_day
        if report_filters is not None:
          self.report_filters = report_filters
        if report_preferences is not None:
          self.report_preferences = report_preferences
        if selected_merchant_group_name is not None:
          self.selected_merchant_group_name = selected_merchant_group_name

    @property
    def organization_id(self):
        """
        Gets the organization_id of this RequestBody.

        :return: The organization_id of this RequestBody.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this RequestBody.

        :param organization_id: The organization_id of this RequestBody.
        :type: str
        """
        if organization_id is not None and not re.search('[a-zA-Z0-9-_]+', organization_id):
            raise ValueError("Invalid value for `organization_id`, must be a follow pattern or equal to `/[a-zA-Z0-9-_]+/`")

        self._organization_id = organization_id

    @property
    def report_definition_name(self):
        """
        Gets the report_definition_name of this RequestBody.

        :return: The report_definition_name of this RequestBody.
        :rtype: str
        """
        return self._report_definition_name

    @report_definition_name.setter
    def report_definition_name(self, report_definition_name):
        """
        Sets the report_definition_name of this RequestBody.

        :param report_definition_name: The report_definition_name of this RequestBody.
        :type: str
        """
        if report_definition_name is None:
            raise ValueError("Invalid value for `report_definition_name`, must not be `None`")
        if report_definition_name is not None and len(report_definition_name) > 80:
            raise ValueError("Invalid value for `report_definition_name`, length must be less than or equal to `80`")
        if report_definition_name is not None and len(report_definition_name) < 1:
            raise ValueError("Invalid value for `report_definition_name`, length must be greater than or equal to `1`")
        if report_definition_name is not None and not re.search('[a-zA-Z0-9-]+', report_definition_name):
            raise ValueError("Invalid value for `report_definition_name`, must be a follow pattern or equal to `/[a-zA-Z0-9-]+/`")

        self._report_definition_name = report_definition_name

    @property
    def report_fields(self):
        """
        Gets the report_fields of this RequestBody.

        :return: The report_fields of this RequestBody.
        :rtype: list[str]
        """
        return self._report_fields

    @report_fields.setter
    def report_fields(self, report_fields):
        """
        Sets the report_fields of this RequestBody.

        :param report_fields: The report_fields of this RequestBody.
        :type: list[str]
        """
        if report_fields is None:
            raise ValueError("Invalid value for `report_fields`, must not be `None`")

        self._report_fields = report_fields

    @property
    def report_mime_type(self):
        """
        Gets the report_mime_type of this RequestBody.

        :return: The report_mime_type of this RequestBody.
        :rtype: str
        """
        return self._report_mime_type

    @report_mime_type.setter
    def report_mime_type(self, report_mime_type):
        """
        Sets the report_mime_type of this RequestBody.

        :param report_mime_type: The report_mime_type of this RequestBody.
        :type: str
        """
        allowed_values = ["application/xml", "text/csv"]
        if report_mime_type not in allowed_values:
            raise ValueError(
                "Invalid value for `report_mime_type` ({0}), must be one of {1}"
                .format(report_mime_type, allowed_values)
            )

        self._report_mime_type = report_mime_type

    @property
    def report_frequency(self):
        """
        Gets the report_frequency of this RequestBody.

        :return: The report_frequency of this RequestBody.
        :rtype: str
        """
        return self._report_frequency

    @report_frequency.setter
    def report_frequency(self, report_frequency):
        """
        Sets the report_frequency of this RequestBody.

        :param report_frequency: The report_frequency of this RequestBody.
        :type: str
        """

        self._report_frequency = report_frequency

    @property
    def report_name(self):
        """
        Gets the report_name of this RequestBody.

        :return: The report_name of this RequestBody.
        :rtype: str
        """
        return self._report_name

    @report_name.setter
    def report_name(self, report_name):
        """
        Sets the report_name of this RequestBody.

        :param report_name: The report_name of this RequestBody.
        :type: str
        """
        if report_name is None:
            raise ValueError("Invalid value for `report_name`, must not be `None`")
        if report_name is not None and len(report_name) > 128:
            raise ValueError("Invalid value for `report_name`, length must be less than or equal to `128`")
        if report_name is not None and len(report_name) < 1:
            raise ValueError("Invalid value for `report_name`, length must be greater than or equal to `1`")
        if report_name is not None and not re.search('[a-zA-Z0-9-_ ]+', report_name):
            raise ValueError("Invalid value for `report_name`, must be a follow pattern or equal to `/[a-zA-Z0-9-_ ]+/`")

        self._report_name = report_name

    @property
    def timezone(self):
        """
        Gets the timezone of this RequestBody.

        :return: The timezone of this RequestBody.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """
        Sets the timezone of this RequestBody.

        :param timezone: The timezone of this RequestBody.
        :type: str
        """

        self._timezone = timezone

    @property
    def start_time(self):
        """
        Gets the start_time of this RequestBody.

        :return: The start_time of this RequestBody.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this RequestBody.

        :param start_time: The start_time of this RequestBody.
        :type: datetime
        """

        self._start_time = start_time

    @property
    def start_day(self):
        """
        Gets the start_day of this RequestBody.

        :return: The start_day of this RequestBody.
        :rtype: int
        """
        return self._start_day

    @start_day.setter
    def start_day(self, start_day):
        """
        Sets the start_day of this RequestBody.

        :param start_day: The start_day of this RequestBody.
        :type: int
        """
        if start_day is not None and start_day > 7:
            raise ValueError("Invalid value for `start_day`, must be a value less than or equal to `7`")
        if start_day is not None and start_day < 1:
            raise ValueError("Invalid value for `start_day`, must be a value greater than or equal to `1`")

        self._start_day = start_day

    @property
    def report_filters(self):
        """
        Gets the report_filters of this RequestBody.

        :return: The report_filters of this RequestBody.
        :rtype: dict(str, list[str])
        """
        return self._report_filters

    @report_filters.setter
    def report_filters(self, report_filters):
        """
        Sets the report_filters of this RequestBody.

        :param report_filters: The report_filters of this RequestBody.
        :type: dict(str, list[str])
        """

        self._report_filters = report_filters

    @property
    def report_preferences(self):
        """
        Gets the report_preferences of this RequestBody.

        :return: The report_preferences of this RequestBody.
        :rtype: InlineResponse2006ReportPreferences
        """
        return self._report_preferences

    @report_preferences.setter
    def report_preferences(self, report_preferences):
        """
        Sets the report_preferences of this RequestBody.

        :param report_preferences: The report_preferences of this RequestBody.
        :type: InlineResponse2006ReportPreferences
        """

        self._report_preferences = report_preferences

    @property
    def selected_merchant_group_name(self):
        """
        Gets the selected_merchant_group_name of this RequestBody.

        :return: The selected_merchant_group_name of this RequestBody.
        :rtype: str
        """
        return self._selected_merchant_group_name

    @selected_merchant_group_name.setter
    def selected_merchant_group_name(self, selected_merchant_group_name):
        """
        Sets the selected_merchant_group_name of this RequestBody.

        :param selected_merchant_group_name: The selected_merchant_group_name of this RequestBody.
        :type: str
        """
        if selected_merchant_group_name is not None and not re.search('[0-9]*', selected_merchant_group_name):
            raise ValueError("Invalid value for `selected_merchant_group_name`, must be a follow pattern or equal to `/[0-9]*/`")

        self._selected_merchant_group_name = selected_merchant_group_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RequestBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
