# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class Rbsv1subscriptionsProcessingInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'commerce_indicator': 'str',
        'authorization_options': 'Rbsv1subscriptionsProcessingInformationAuthorizationOptions'
    }

    attribute_map = {
        'commerce_indicator': 'commerceIndicator',
        'authorization_options': 'authorizationOptions'
    }

    def __init__(self, commerce_indicator=None, authorization_options=None):
        """
        Rbsv1subscriptionsProcessingInformation - a model defined in Swagger
        """

        self._commerce_indicator = None
        self._authorization_options = None

        if commerce_indicator is not None:
          self.commerce_indicator = commerce_indicator
        if authorization_options is not None:
          self.authorization_options = authorization_options

    @property
    def commerce_indicator(self):
        """
        Gets the commerce_indicator of this Rbsv1subscriptionsProcessingInformation.
        Commerce Indicator is a way to identify the type of transaction. Some payment card companies use this information when determining discount rates.  Valid values: - `MOTO` - `RECURRING`  Please add the ecommerce indicator based on the rules defined by your gateway/processor. Some gateways may not accept the Commerce Indicator `RECURRING` with a Zero Dollar Authorization, that is done for subscriptions starting at a future date. 

        :return: The commerce_indicator of this Rbsv1subscriptionsProcessingInformation.
        :rtype: str
        """
        return self._commerce_indicator

    @commerce_indicator.setter
    def commerce_indicator(self, commerce_indicator):
        """
        Sets the commerce_indicator of this Rbsv1subscriptionsProcessingInformation.
        Commerce Indicator is a way to identify the type of transaction. Some payment card companies use this information when determining discount rates.  Valid values: - `MOTO` - `RECURRING`  Please add the ecommerce indicator based on the rules defined by your gateway/processor. Some gateways may not accept the Commerce Indicator `RECURRING` with a Zero Dollar Authorization, that is done for subscriptions starting at a future date. 

        :param commerce_indicator: The commerce_indicator of this Rbsv1subscriptionsProcessingInformation.
        :type: str
        """

        self._commerce_indicator = commerce_indicator

    @property
    def authorization_options(self):
        """
        Gets the authorization_options of this Rbsv1subscriptionsProcessingInformation.

        :return: The authorization_options of this Rbsv1subscriptionsProcessingInformation.
        :rtype: Rbsv1subscriptionsProcessingInformationAuthorizationOptions
        """
        return self._authorization_options

    @authorization_options.setter
    def authorization_options(self, authorization_options):
        """
        Sets the authorization_options of this Rbsv1subscriptionsProcessingInformation.

        :param authorization_options: The authorization_options of this Rbsv1subscriptionsProcessingInformation.
        :type: Rbsv1subscriptionsProcessingInformationAuthorizationOptions
        """

        self._authorization_options = authorization_options

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Rbsv1subscriptionsProcessingInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
