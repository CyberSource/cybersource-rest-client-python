# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2011OrganizationInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organization_id': 'str',
        'parent_organization_id': 'str',
        'child_organizations': 'list[str]'
    }

    attribute_map = {
        'organization_id': 'organizationId',
        'parent_organization_id': 'parentOrganizationId',
        'child_organizations': 'childOrganizations'
    }

    def __init__(self, organization_id=None, parent_organization_id=None, child_organizations=None):
        """
        InlineResponse2011OrganizationInformation - a model defined in Swagger
        """

        self._organization_id = None
        self._parent_organization_id = None
        self._child_organizations = None

        if organization_id is not None:
          self.organization_id = organization_id
        if parent_organization_id is not None:
          self.parent_organization_id = parent_organization_id
        if child_organizations is not None:
          self.child_organizations = child_organizations

    @property
    def organization_id(self):
        """
        Gets the organization_id of this InlineResponse2011OrganizationInformation.

        :return: The organization_id of this InlineResponse2011OrganizationInformation.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this InlineResponse2011OrganizationInformation.

        :param organization_id: The organization_id of this InlineResponse2011OrganizationInformation.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def parent_organization_id(self):
        """
        Gets the parent_organization_id of this InlineResponse2011OrganizationInformation.

        :return: The parent_organization_id of this InlineResponse2011OrganizationInformation.
        :rtype: str
        """
        return self._parent_organization_id

    @parent_organization_id.setter
    def parent_organization_id(self, parent_organization_id):
        """
        Sets the parent_organization_id of this InlineResponse2011OrganizationInformation.

        :param parent_organization_id: The parent_organization_id of this InlineResponse2011OrganizationInformation.
        :type: str
        """

        self._parent_organization_id = parent_organization_id

    @property
    def child_organizations(self):
        """
        Gets the child_organizations of this InlineResponse2011OrganizationInformation.

        :return: The child_organizations of this InlineResponse2011OrganizationInformation.
        :rtype: list[str]
        """
        return self._child_organizations

    @child_organizations.setter
    def child_organizations(self, child_organizations):
        """
        Sets the child_organizations of this InlineResponse2011OrganizationInformation.

        :param child_organizations: The child_organizations of this InlineResponse2011OrganizationInformation.
        :type: list[str]
        """

        self._child_organizations = child_organizations

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2011OrganizationInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
