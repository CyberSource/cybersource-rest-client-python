# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2002IntegrationInformationTenantConfigurations(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'solution_id': 'str',
        'tenant_configuration_id': 'str',
        'status': 'str',
        'submit_time_utc': 'datetime',
        'tenant_information': 'Boardingv1registrationsIntegrationInformationTenantInformation'
    }

    attribute_map = {
        'solution_id': 'solutionId',
        'tenant_configuration_id': 'tenantConfigurationId',
        'status': 'status',
        'submit_time_utc': 'submitTimeUtc',
        'tenant_information': 'tenantInformation'
    }

    def __init__(self, solution_id=None, tenant_configuration_id=None, status=None, submit_time_utc=None, tenant_information=None):
        """
        InlineResponse2002IntegrationInformationTenantConfigurations - a model defined in Swagger
        """

        self._solution_id = None
        self._tenant_configuration_id = None
        self._status = None
        self._submit_time_utc = None
        self._tenant_information = None

        if solution_id is not None:
          self.solution_id = solution_id
        if tenant_configuration_id is not None:
          self.tenant_configuration_id = tenant_configuration_id
        if status is not None:
          self.status = status
        if submit_time_utc is not None:
          self.submit_time_utc = submit_time_utc
        if tenant_information is not None:
          self.tenant_information = tenant_information

    @property
    def solution_id(self):
        """
        Gets the solution_id of this InlineResponse2002IntegrationInformationTenantConfigurations.
        The solutionId is the unique identifier for this system resource. Partner can use it to reference the specific solution through out the system. 

        :return: The solution_id of this InlineResponse2002IntegrationInformationTenantConfigurations.
        :rtype: str
        """
        return self._solution_id

    @solution_id.setter
    def solution_id(self, solution_id):
        """
        Sets the solution_id of this InlineResponse2002IntegrationInformationTenantConfigurations.
        The solutionId is the unique identifier for this system resource. Partner can use it to reference the specific solution through out the system. 

        :param solution_id: The solution_id of this InlineResponse2002IntegrationInformationTenantConfigurations.
        :type: str
        """
        if solution_id is not None and not re.search('^[0-9a-zA-Z_]+$', solution_id):
            raise ValueError("Invalid value for `solution_id`, must be a follow pattern or equal to `/^[0-9a-zA-Z_]+$/`")

        self._solution_id = solution_id

    @property
    def tenant_configuration_id(self):
        """
        Gets the tenant_configuration_id of this InlineResponse2002IntegrationInformationTenantConfigurations.
        The tenantConfigurationId is the unique identifier for this system resource. You will see various places where it must be referenced in the URI path, or when querying the hierarchy for ancestors or descendants. 

        :return: The tenant_configuration_id of this InlineResponse2002IntegrationInformationTenantConfigurations.
        :rtype: str
        """
        return self._tenant_configuration_id

    @tenant_configuration_id.setter
    def tenant_configuration_id(self, tenant_configuration_id):
        """
        Sets the tenant_configuration_id of this InlineResponse2002IntegrationInformationTenantConfigurations.
        The tenantConfigurationId is the unique identifier for this system resource. You will see various places where it must be referenced in the URI path, or when querying the hierarchy for ancestors or descendants. 

        :param tenant_configuration_id: The tenant_configuration_id of this InlineResponse2002IntegrationInformationTenantConfigurations.
        :type: str
        """
        if tenant_configuration_id is not None and not re.search('^[0-9a-zA-Z_]+$', tenant_configuration_id):
            raise ValueError("Invalid value for `tenant_configuration_id`, must be a follow pattern or equal to `/^[0-9a-zA-Z_]+$/`")

        self._tenant_configuration_id = tenant_configuration_id

    @property
    def status(self):
        """
        Gets the status of this InlineResponse2002IntegrationInformationTenantConfigurations.

        :return: The status of this InlineResponse2002IntegrationInformationTenantConfigurations.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this InlineResponse2002IntegrationInformationTenantConfigurations.

        :param status: The status of this InlineResponse2002IntegrationInformationTenantConfigurations.
        :type: str
        """
        allowed_values = ["LIVE", "INACTIVE", "TEST"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def submit_time_utc(self):
        """
        Gets the submit_time_utc of this InlineResponse2002IntegrationInformationTenantConfigurations.
        Time of request in UTC.

        :return: The submit_time_utc of this InlineResponse2002IntegrationInformationTenantConfigurations.
        :rtype: datetime
        """
        return self._submit_time_utc

    @submit_time_utc.setter
    def submit_time_utc(self, submit_time_utc):
        """
        Sets the submit_time_utc of this InlineResponse2002IntegrationInformationTenantConfigurations.
        Time of request in UTC.

        :param submit_time_utc: The submit_time_utc of this InlineResponse2002IntegrationInformationTenantConfigurations.
        :type: datetime
        """

        self._submit_time_utc = submit_time_utc

    @property
    def tenant_information(self):
        """
        Gets the tenant_information of this InlineResponse2002IntegrationInformationTenantConfigurations.

        :return: The tenant_information of this InlineResponse2002IntegrationInformationTenantConfigurations.
        :rtype: Boardingv1registrationsIntegrationInformationTenantInformation
        """
        return self._tenant_information

    @tenant_information.setter
    def tenant_information(self, tenant_information):
        """
        Sets the tenant_information of this InlineResponse2002IntegrationInformationTenantConfigurations.

        :param tenant_information: The tenant_information of this InlineResponse2002IntegrationInformationTenantConfigurations.
        :type: Boardingv1registrationsIntegrationInformationTenantInformation
        """

        self._tenant_information = tenant_information

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2002IntegrationInformationTenantConfigurations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
