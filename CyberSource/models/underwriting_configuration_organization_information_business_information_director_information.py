# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'middle_name': 'str',
        'last_name': 'str',
        'birth_date': 'date',
        'email': 'str',
        'phone_number': 'str',
        'nationality': 'str',
        'national_id': 'str',
        'id_country': 'str',
        'passport_number': 'str',
        'address': 'UnderwritingConfigurationOrganizationInformationBusinessInformationAddress2'
    }

    attribute_map = {
        'first_name': 'firstName',
        'middle_name': 'middleName',
        'last_name': 'lastName',
        'birth_date': 'birthDate',
        'email': 'email',
        'phone_number': 'phoneNumber',
        'nationality': 'nationality',
        'national_id': 'nationalId',
        'id_country': 'idCountry',
        'passport_number': 'passportNumber',
        'address': 'address'
    }

    def __init__(self, first_name=None, middle_name=None, last_name=None, birth_date=None, email=None, phone_number=None, nationality=None, national_id=None, id_country=None, passport_number=None, address=None):
        """
        UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation - a model defined in Swagger
        """

        self._first_name = None
        self._middle_name = None
        self._last_name = None
        self._birth_date = None
        self._email = None
        self._phone_number = None
        self._nationality = None
        self._national_id = None
        self._id_country = None
        self._passport_number = None
        self._address = None

        if first_name is not None:
          self.first_name = first_name
        if middle_name is not None:
          self.middle_name = middle_name
        if last_name is not None:
          self.last_name = last_name
        if birth_date is not None:
          self.birth_date = birth_date
        if email is not None:
          self.email = email
        if phone_number is not None:
          self.phone_number = phone_number
        if nationality is not None:
          self.nationality = nationality
        if national_id is not None:
          self.national_id = national_id
        if id_country is not None:
          self.id_country = id_country
        if passport_number is not None:
          self.passport_number = passport_number
        if address is not None:
          self.address = address

    @property
    def first_name(self):
        """
        Gets the first_name of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        Director's first name

        :return: The first_name of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        Director's first name

        :param first_name: The first_name of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        :type: str
        """

        self._first_name = first_name

    @property
    def middle_name(self):
        """
        Gets the middle_name of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        Director's middle name

        :return: The middle_name of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """
        Sets the middle_name of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        Director's middle name

        :param middle_name: The middle_name of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        :type: str
        """

        self._middle_name = middle_name

    @property
    def last_name(self):
        """
        Gets the last_name of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        Director's last name

        :return: The last_name of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        Director's last name

        :param last_name: The last_name of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        :type: str
        """

        self._last_name = last_name

    @property
    def birth_date(self):
        """
        Gets the birth_date of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        Director's date of birth. Format: YYYY-MM-DD Example 2016-08-11 equals August 11, 2016

        :return: The birth_date of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        :rtype: date
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """
        Sets the birth_date of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        Director's date of birth. Format: YYYY-MM-DD Example 2016-08-11 equals August 11, 2016

        :param birth_date: The birth_date of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        :type: date
        """

        self._birth_date = birth_date

    @property
    def email(self):
        """
        Gets the email of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        Email address for Director

        :return: The email of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        Email address for Director

        :param email: The email of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        :type: str
        """

        self._email = email

    @property
    def phone_number(self):
        """
        Gets the phone_number of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        Owner's phone number

        :return: The phone_number of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """
        Sets the phone_number of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        Owner's phone number

        :param phone_number: The phone_number of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        :type: str
        """

        self._phone_number = phone_number

    @property
    def nationality(self):
        """
        Gets the nationality of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        Country of origin for the owner. Two character country code, ISO 3166-1 alpha-2.

        :return: The nationality of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """
        Sets the nationality of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        Country of origin for the owner. Two character country code, ISO 3166-1 alpha-2.

        :param nationality: The nationality of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        :type: str
        """

        self._nationality = nationality

    @property
    def national_id(self):
        """
        Gets the national_id of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        Identification value from ID document

        :return: The national_id of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        :rtype: str
        """
        return self._national_id

    @national_id.setter
    def national_id(self, national_id):
        """
        Sets the national_id of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        Identification value from ID document

        :param national_id: The national_id of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        :type: str
        """

        self._national_id = national_id

    @property
    def id_country(self):
        """
        Gets the id_country of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        Country of the ID document. Two character country code, ISO 3166-1 alpha-2.

        :return: The id_country of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        :rtype: str
        """
        return self._id_country

    @id_country.setter
    def id_country(self, id_country):
        """
        Sets the id_country of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        Country of the ID document. Two character country code, ISO 3166-1 alpha-2.

        :param id_country: The id_country of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        :type: str
        """

        self._id_country = id_country

    @property
    def passport_number(self):
        """
        Gets the passport_number of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        Passport Number

        :return: The passport_number of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        :rtype: str
        """
        return self._passport_number

    @passport_number.setter
    def passport_number(self, passport_number):
        """
        Sets the passport_number of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        Passport Number

        :param passport_number: The passport_number of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        :type: str
        """

        self._passport_number = passport_number

    @property
    def address(self):
        """
        Gets the address of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.

        :return: The address of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        :rtype: UnderwritingConfigurationOrganizationInformationBusinessInformationAddress2
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.

        :param address: The address of this UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation.
        :type: UnderwritingConfigurationOrganizationInformationBusinessInformationAddress2
        """

        self._address = address

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
