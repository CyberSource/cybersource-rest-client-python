# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2006Billing(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nan': 'int',
        'ned': 'int',
        'acl': 'int',
        'cch': 'int'
    }

    attribute_map = {
        'nan': 'nan',
        'ned': 'ned',
        'acl': 'acl',
        'cch': 'cch'
    }

    def __init__(self, nan=None, ned=None, acl=None, cch=None):
        """
        InlineResponse2006Billing - a model defined in Swagger
        """

        self._nan = None
        self._ned = None
        self._acl = None
        self._cch = None

        if nan is not None:
          self.nan = nan
        if ned is not None:
          self.ned = ned
        if acl is not None:
          self.acl = acl
        if cch is not None:
          self.cch = cch

    @property
    def nan(self):
        """
        Gets the nan of this InlineResponse2006Billing.

        :return: The nan of this InlineResponse2006Billing.
        :rtype: int
        """
        return self._nan

    @nan.setter
    def nan(self, nan):
        """
        Sets the nan of this InlineResponse2006Billing.

        :param nan: The nan of this InlineResponse2006Billing.
        :type: int
        """

        self._nan = nan

    @property
    def ned(self):
        """
        Gets the ned of this InlineResponse2006Billing.

        :return: The ned of this InlineResponse2006Billing.
        :rtype: int
        """
        return self._ned

    @ned.setter
    def ned(self, ned):
        """
        Sets the ned of this InlineResponse2006Billing.

        :param ned: The ned of this InlineResponse2006Billing.
        :type: int
        """

        self._ned = ned

    @property
    def acl(self):
        """
        Gets the acl of this InlineResponse2006Billing.

        :return: The acl of this InlineResponse2006Billing.
        :rtype: int
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """
        Sets the acl of this InlineResponse2006Billing.

        :param acl: The acl of this InlineResponse2006Billing.
        :type: int
        """

        self._acl = acl

    @property
    def cch(self):
        """
        Gets the cch of this InlineResponse2006Billing.

        :return: The cch of this InlineResponse2006Billing.
        :rtype: int
        """
        return self._cch

    @cch.setter
    def cch(self, cch):
        """
        Sets the cch of this InlineResponse2006Billing.

        :param cch: The cch of this InlineResponse2006Billing.
        :type: int
        """

        self._cch = cch

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2006Billing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
