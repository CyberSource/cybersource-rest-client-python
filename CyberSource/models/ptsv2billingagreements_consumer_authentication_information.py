# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Ptsv2billingagreementsConsumerAuthenticationInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authentication_transaction_context_id': 'str',
        'cavv': 'str',
        'transaction_token': 'str',
        'xid': 'str'
    }

    attribute_map = {
        'authentication_transaction_context_id': 'authenticationTransactionContextId',
        'cavv': 'cavv',
        'transaction_token': 'transactionToken',
        'xid': 'xid'
    }

    def __init__(self, authentication_transaction_context_id=None, cavv=None, transaction_token=None, xid=None):
        """
        Ptsv2billingagreementsConsumerAuthenticationInformation - a model defined in Swagger
        """

        self._authentication_transaction_context_id = None
        self._cavv = None
        self._transaction_token = None
        self._xid = None

        if authentication_transaction_context_id is not None:
          self.authentication_transaction_context_id = authentication_transaction_context_id
        if cavv is not None:
          self.cavv = cavv
        if transaction_token is not None:
          self.transaction_token = transaction_token
        if xid is not None:
          self.xid = xid

    @property
    def authentication_transaction_context_id(self):
        """
        Gets the authentication_transaction_context_id of this Ptsv2billingagreementsConsumerAuthenticationInformation.
        Payer authentication transaction identifier passed to link the validation and authorization calls. 

        :return: The authentication_transaction_context_id of this Ptsv2billingagreementsConsumerAuthenticationInformation.
        :rtype: str
        """
        return self._authentication_transaction_context_id

    @authentication_transaction_context_id.setter
    def authentication_transaction_context_id(self, authentication_transaction_context_id):
        """
        Sets the authentication_transaction_context_id of this Ptsv2billingagreementsConsumerAuthenticationInformation.
        Payer authentication transaction identifier passed to link the validation and authorization calls. 

        :param authentication_transaction_context_id: The authentication_transaction_context_id of this Ptsv2billingagreementsConsumerAuthenticationInformation.
        :type: str
        """

        self._authentication_transaction_context_id = authentication_transaction_context_id

    @property
    def cavv(self):
        """
        Gets the cavv of this Ptsv2billingagreementsConsumerAuthenticationInformation.
        Unique identifier generated by the card-issuing bank for Visa, American Express, JCB, Diners Club, and Discover transactions after the customer is authenticated. The value is in base64. When you request the card authorization service, CyberSource automatically converts the value, not the field name, to the format required by your payment processor. 

        :return: The cavv of this Ptsv2billingagreementsConsumerAuthenticationInformation.
        :rtype: str
        """
        return self._cavv

    @cavv.setter
    def cavv(self, cavv):
        """
        Sets the cavv of this Ptsv2billingagreementsConsumerAuthenticationInformation.
        Unique identifier generated by the card-issuing bank for Visa, American Express, JCB, Diners Club, and Discover transactions after the customer is authenticated. The value is in base64. When you request the card authorization service, CyberSource automatically converts the value, not the field name, to the format required by your payment processor. 

        :param cavv: The cavv of this Ptsv2billingagreementsConsumerAuthenticationInformation.
        :type: str
        """

        self._cavv = cavv

    @property
    def transaction_token(self):
        """
        Gets the transaction_token of this Ptsv2billingagreementsConsumerAuthenticationInformation.
        Web based token used to authenticate consumer with Rupay authentication provider. 

        :return: The transaction_token of this Ptsv2billingagreementsConsumerAuthenticationInformation.
        :rtype: str
        """
        return self._transaction_token

    @transaction_token.setter
    def transaction_token(self, transaction_token):
        """
        Sets the transaction_token of this Ptsv2billingagreementsConsumerAuthenticationInformation.
        Web based token used to authenticate consumer with Rupay authentication provider. 

        :param transaction_token: The transaction_token of this Ptsv2billingagreementsConsumerAuthenticationInformation.
        :type: str
        """

        self._transaction_token = transaction_token

    @property
    def xid(self):
        """
        Gets the xid of this Ptsv2billingagreementsConsumerAuthenticationInformation.
        Transaction identifier generated by CyberSource for successful enrollment or validation checks. Use this value, which is in base64, to match an outgoing PAReq with an incoming PARes. CyberSource forwards the XID with the card authorization service to these payment processors in these cases: - Barclays - Streamline (when the **ecommerceIndicator**`=spa`) 

        :return: The xid of this Ptsv2billingagreementsConsumerAuthenticationInformation.
        :rtype: str
        """
        return self._xid

    @xid.setter
    def xid(self, xid):
        """
        Sets the xid of this Ptsv2billingagreementsConsumerAuthenticationInformation.
        Transaction identifier generated by CyberSource for successful enrollment or validation checks. Use this value, which is in base64, to match an outgoing PAReq with an incoming PARes. CyberSource forwards the XID with the card authorization service to these payment processors in these cases: - Barclays - Streamline (when the **ecommerceIndicator**`=spa`) 

        :param xid: The xid of this Ptsv2billingagreementsConsumerAuthenticationInformation.
        :type: str
        """

        self._xid = xid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Ptsv2billingagreementsConsumerAuthenticationInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
