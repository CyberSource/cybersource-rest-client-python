# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Boardingv1registrationsProductInformationSelectedProductsPaymentsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable_ccs': 'bool',
        'terminal_id': 'str',
        'enable15an_transaction_reference_number': 'bool',
        'portal_supported_paytypes': 'str',
        'set_completed_state': 'bool'
    }

    attribute_map = {
        'enable_ccs': 'enableCCS',
        'terminal_id': 'terminalId',
        'enable15an_transaction_reference_number': 'enable15anTransactionReferenceNumber',
        'portal_supported_paytypes': 'portalSupportedPaytypes',
        'set_completed_state': 'setCompletedState'
    }

    def __init__(self, enable_ccs=None, terminal_id=None, enable15an_transaction_reference_number=True, portal_supported_paytypes='CHECK', set_completed_state=False):
        """
        Boardingv1registrationsProductInformationSelectedProductsPaymentsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors - a model defined in Swagger
        """

        self._enable_ccs = None
        self._terminal_id = None
        self._enable15an_transaction_reference_number = None
        self._portal_supported_paytypes = None
        self._set_completed_state = None

        if enable_ccs is not None:
          self.enable_ccs = enable_ccs
        if terminal_id is not None:
          self.terminal_id = terminal_id
        if enable15an_transaction_reference_number is not None:
          self.enable15an_transaction_reference_number = enable15an_transaction_reference_number
        if portal_supported_paytypes is not None:
          self.portal_supported_paytypes = portal_supported_paytypes
        if set_completed_state is not None:
          self.set_completed_state = set_completed_state

    @property
    def enable_ccs(self):
        """
        Gets the enable_ccs of this Boardingv1registrationsProductInformationSelectedProductsPaymentsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors.
        *NEW* Flag to indicate whether the processor is migrated to the Common Connectivity Services Platform. Applicable for VPC and amexdirect processors. 

        :return: The enable_ccs of this Boardingv1registrationsProductInformationSelectedProductsPaymentsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors.
        :rtype: bool
        """
        return self._enable_ccs

    @enable_ccs.setter
    def enable_ccs(self, enable_ccs):
        """
        Sets the enable_ccs of this Boardingv1registrationsProductInformationSelectedProductsPaymentsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors.
        *NEW* Flag to indicate whether the processor is migrated to the Common Connectivity Services Platform. Applicable for VPC and amexdirect processors. 

        :param enable_ccs: The enable_ccs of this Boardingv1registrationsProductInformationSelectedProductsPaymentsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors.
        :type: bool
        """

        self._enable_ccs = enable_ccs

    @property
    def terminal_id(self):
        """
        Gets the terminal_id of this Boardingv1registrationsProductInformationSelectedProductsPaymentsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors.
        *NEW* The 'Terminal Id' aka TID, is an identifier used for with your payments processor. Depending on the processor and payment acceptance type this may also be the default Terminal ID used for Card Present and Virtual Terminal transactions. Applicable for VPC processors. 

        :return: The terminal_id of this Boardingv1registrationsProductInformationSelectedProductsPaymentsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors.
        :rtype: str
        """
        return self._terminal_id

    @terminal_id.setter
    def terminal_id(self, terminal_id):
        """
        Sets the terminal_id of this Boardingv1registrationsProductInformationSelectedProductsPaymentsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors.
        *NEW* The 'Terminal Id' aka TID, is an identifier used for with your payments processor. Depending on the processor and payment acceptance type this may also be the default Terminal ID used for Card Present and Virtual Terminal transactions. Applicable for VPC processors. 

        :param terminal_id: The terminal_id of this Boardingv1registrationsProductInformationSelectedProductsPaymentsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors.
        :type: str
        """

        self._terminal_id = terminal_id

    @property
    def enable15an_transaction_reference_number(self):
        """
        Gets the enable15an_transaction_reference_number of this Boardingv1registrationsProductInformationSelectedProductsPaymentsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors.
        *NEW* This ensures the transaction reference # contains an identifier that can be viewed in CYBS

        :return: The enable15an_transaction_reference_number of this Boardingv1registrationsProductInformationSelectedProductsPaymentsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors.
        :rtype: bool
        """
        return self._enable15an_transaction_reference_number

    @enable15an_transaction_reference_number.setter
    def enable15an_transaction_reference_number(self, enable15an_transaction_reference_number):
        """
        Sets the enable15an_transaction_reference_number of this Boardingv1registrationsProductInformationSelectedProductsPaymentsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors.
        *NEW* This ensures the transaction reference # contains an identifier that can be viewed in CYBS

        :param enable15an_transaction_reference_number: The enable15an_transaction_reference_number of this Boardingv1registrationsProductInformationSelectedProductsPaymentsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors.
        :type: bool
        """

        self._enable15an_transaction_reference_number = enable15an_transaction_reference_number

    @property
    def portal_supported_paytypes(self):
        """
        Gets the portal_supported_paytypes of this Boardingv1registrationsProductInformationSelectedProductsPaymentsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors.
        *NEW* This is used by the EBC2 application

        :return: The portal_supported_paytypes of this Boardingv1registrationsProductInformationSelectedProductsPaymentsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors.
        :rtype: str
        """
        return self._portal_supported_paytypes

    @portal_supported_paytypes.setter
    def portal_supported_paytypes(self, portal_supported_paytypes):
        """
        Sets the portal_supported_paytypes of this Boardingv1registrationsProductInformationSelectedProductsPaymentsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors.
        *NEW* This is used by the EBC2 application

        :param portal_supported_paytypes: The portal_supported_paytypes of this Boardingv1registrationsProductInformationSelectedProductsPaymentsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors.
        :type: str
        """

        self._portal_supported_paytypes = portal_supported_paytypes

    @property
    def set_completed_state(self):
        """
        Gets the set_completed_state of this Boardingv1registrationsProductInformationSelectedProductsPaymentsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors.
        *Moved* When set to Yes we will automatically update transactions to a completed status X-number of days after the transaction comes through; if no failure notification is received. When set to No means we will not update transaction status in this manner. For BAMS/Bank of America merchants, they should be set to No unless we are explicitly asked to set a merchant to YES.

        :return: The set_completed_state of this Boardingv1registrationsProductInformationSelectedProductsPaymentsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors.
        :rtype: bool
        """
        return self._set_completed_state

    @set_completed_state.setter
    def set_completed_state(self, set_completed_state):
        """
        Sets the set_completed_state of this Boardingv1registrationsProductInformationSelectedProductsPaymentsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors.
        *Moved* When set to Yes we will automatically update transactions to a completed status X-number of days after the transaction comes through; if no failure notification is received. When set to No means we will not update transaction status in this manner. For BAMS/Bank of America merchants, they should be set to No unless we are explicitly asked to set a merchant to YES.

        :param set_completed_state: The set_completed_state of this Boardingv1registrationsProductInformationSelectedProductsPaymentsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors.
        :type: bool
        """

        self._set_completed_state = set_completed_state

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Boardingv1registrationsProductInformationSelectedProductsPaymentsECheckConfigurationInformationConfigurationsCommonInternalOnlyProcessors):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
