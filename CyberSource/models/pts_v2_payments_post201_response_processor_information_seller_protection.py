# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'eligibility': 'str',
        'dispute_categories': 'list[str]',
        'eligibility_type': 'str'
    }

    attribute_map = {
        'type': 'type',
        'eligibility': 'eligibility',
        'dispute_categories': 'disputeCategories',
        'eligibility_type': 'eligibilityType'
    }

    def __init__(self, type=None, eligibility=None, dispute_categories=None, eligibility_type=None):
        """
        PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection - a model defined in Swagger
        """

        self._type = None
        self._eligibility = None
        self._dispute_categories = None
        self._eligibility_type = None

        if type is not None:
          self.type = type
        if eligibility is not None:
          self.eligibility = eligibility
        if dispute_categories is not None:
          self.dispute_categories = dispute_categories
        if eligibility_type is not None:
          self.eligibility_type = eligibility_type

    @property
    def type(self):
        """
        Gets the type of this PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection.
        The kind of seller protection in force for the transaction. This field is returned only when the protection eligibility value is set to ELIGIBLE or PARTIALLY_ELIGIBLE. Possible values - ITEM_NOT_RECEIVED_ELIGIBLE: Sellers are protected against claims for items not received. - UNAUTHORIZED_PAYMENT_ELIGIBLE: Sellers are protected against claims for unauthorized payments. One or both values can be returned. 

        :return: The type of this PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection.
        The kind of seller protection in force for the transaction. This field is returned only when the protection eligibility value is set to ELIGIBLE or PARTIALLY_ELIGIBLE. Possible values - ITEM_NOT_RECEIVED_ELIGIBLE: Sellers are protected against claims for items not received. - UNAUTHORIZED_PAYMENT_ELIGIBLE: Sellers are protected against claims for unauthorized payments. One or both values can be returned. 

        :param type: The type of this PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection.
        :type: str
        """

        self._type = type

    @property
    def eligibility(self):
        """
        Gets the eligibility of this PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection.
        Indicates whether the transaction is eligible for seller protection. The values returned are described below. Possible values: - `ELIGIBLE` - `PARTIALLY_ELIGIBLE` - `INELIGIBLE` - `NOT_ELIGIBLE` 

        :return: The eligibility of this PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection.
        :rtype: str
        """
        return self._eligibility

    @eligibility.setter
    def eligibility(self, eligibility):
        """
        Sets the eligibility of this PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection.
        Indicates whether the transaction is eligible for seller protection. The values returned are described below. Possible values: - `ELIGIBLE` - `PARTIALLY_ELIGIBLE` - `INELIGIBLE` - `NOT_ELIGIBLE` 

        :param eligibility: The eligibility of this PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection.
        :type: str
        """

        self._eligibility = eligibility

    @property
    def dispute_categories(self):
        """
        Gets the dispute_categories of this PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection.
        An array of conditions that are covered for the transaction. 

        :return: The dispute_categories of this PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection.
        :rtype: list[str]
        """
        return self._dispute_categories

    @dispute_categories.setter
    def dispute_categories(self, dispute_categories):
        """
        Sets the dispute_categories of this PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection.
        An array of conditions that are covered for the transaction. 

        :param dispute_categories: The dispute_categories of this PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection.
        :type: list[str]
        """

        self._dispute_categories = dispute_categories

    @property
    def eligibility_type(self):
        """
        Gets the eligibility_type of this PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection.
        The kind of seller protection in force for the transaction. This field is returned only when the protection_eligibility property is set to ELIGIBLE or PARTIALLY_ELIGIBLE. Possible values: - `ITEM_NOT_RECEIVED_ELIGIBLE: Sellers are protected against claims for items not received.` - `UNAUTHORIZED_PAYMENT_ELIGIBLE: Sellers are protected against claims for unauthorized payments.` One or both values can be returned. 

        :return: The eligibility_type of this PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection.
        :rtype: str
        """
        return self._eligibility_type

    @eligibility_type.setter
    def eligibility_type(self, eligibility_type):
        """
        Sets the eligibility_type of this PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection.
        The kind of seller protection in force for the transaction. This field is returned only when the protection_eligibility property is set to ELIGIBLE or PARTIALLY_ELIGIBLE. Possible values: - `ITEM_NOT_RECEIVED_ELIGIBLE: Sellers are protected against claims for items not received.` - `UNAUTHORIZED_PAYMENT_ELIGIBLE: Sellers are protected against claims for unauthorized payments.` One or both values can be returned. 

        :param eligibility_type: The eligibility_type of this PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection.
        :type: str
        """

        self._eligibility_type = eligibility_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
