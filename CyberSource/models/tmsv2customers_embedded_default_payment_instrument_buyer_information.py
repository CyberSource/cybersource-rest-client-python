# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_tax_id': 'str',
        'currency': 'str',
        'date_of_birth': 'date',
        'personal_identification': 'list[Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentification]'
    }

    attribute_map = {
        'company_tax_id': 'companyTaxID',
        'currency': 'currency',
        'date_of_birth': 'dateOfBirth',
        'personal_identification': 'personalIdentification'
    }

    def __init__(self, company_tax_id=None, currency=None, date_of_birth=None, personal_identification=None):
        """
        Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation - a model defined in Swagger
        """

        self._company_tax_id = None
        self._currency = None
        self._date_of_birth = None
        self._personal_identification = None

        if company_tax_id is not None:
          self.company_tax_id = company_tax_id
        if currency is not None:
          self.currency = currency
        if date_of_birth is not None:
          self.date_of_birth = date_of_birth
        if personal_identification is not None:
          self.personal_identification = personal_identification

    @property
    def company_tax_id(self):
        """
        Gets the company_tax_id of this Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation.
        Company's tax identifier. This is only used for eCheck service. 

        :return: The company_tax_id of this Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation.
        :rtype: str
        """
        return self._company_tax_id

    @company_tax_id.setter
    def company_tax_id(self, company_tax_id):
        """
        Sets the company_tax_id of this Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation.
        Company's tax identifier. This is only used for eCheck service. 

        :param company_tax_id: The company_tax_id of this Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation.
        :type: str
        """

        self._company_tax_id = company_tax_id

    @property
    def currency(self):
        """
        Gets the currency of this Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation.
        Currency used for the order. Use the three-character I[ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf). 

        :return: The currency of this Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation.
        Currency used for the order. Use the three-character I[ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf). 

        :param currency: The currency of this Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation.
        :type: str
        """

        self._currency = currency

    @property
    def date_of_birth(self):
        """
        Gets the date_of_birth of this Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation.
        Date of birth of the customer. Format: YYYY-MM-DD 

        :return: The date_of_birth of this Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation.
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """
        Sets the date_of_birth of this Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation.
        Date of birth of the customer. Format: YYYY-MM-DD 

        :param date_of_birth: The date_of_birth of this Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation.
        :type: date
        """

        self._date_of_birth = date_of_birth

    @property
    def personal_identification(self):
        """
        Gets the personal_identification of this Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation.

        :return: The personal_identification of this Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation.
        :rtype: list[Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentification]
        """
        return self._personal_identification

    @personal_identification.setter
    def personal_identification(self, personal_identification):
        """
        Sets the personal_identification of this Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation.

        :param personal_identification: The personal_identification of this Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation.
        :type: list[Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentification]
        """

        self._personal_identification = personal_identification

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
