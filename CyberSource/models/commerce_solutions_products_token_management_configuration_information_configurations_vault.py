# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_token_type': 'str',
        'location': 'str',
        'token_formats': 'TmsTokenFormats',
        'token_permissions': 'TokenPermissions',
        'sensitive_privileges': 'TmsSensitivePrivileges',
        'nullify': 'TmsNullify',
        'network_token_services': 'TmsNetworkTokenServices'
    }

    attribute_map = {
        'default_token_type': 'defaultTokenType',
        'location': 'location',
        'token_formats': 'tokenFormats',
        'token_permissions': 'tokenPermissions',
        'sensitive_privileges': 'sensitivePrivileges',
        'nullify': 'nullify',
        'network_token_services': 'networkTokenServices'
    }

    def __init__(self, default_token_type=None, location=None, token_formats=None, token_permissions=None, sensitive_privileges=None, nullify=None, network_token_services=None):
        """
        CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault - a model defined in Swagger
        """

        self._default_token_type = None
        self._location = None
        self._token_formats = None
        self._token_permissions = None
        self._sensitive_privileges = None
        self._nullify = None
        self._network_token_services = None

        if default_token_type is not None:
          self.default_token_type = default_token_type
        if location is not None:
          self.location = location
        if token_formats is not None:
          self.token_formats = token_formats
        if token_permissions is not None:
          self.token_permissions = token_permissions
        if sensitive_privileges is not None:
          self.sensitive_privileges = sensitive_privileges
        if nullify is not None:
          self.nullify = nullify
        if network_token_services is not None:
          self.network_token_services = network_token_services

    @property
    def default_token_type(self):
        """
        Gets the default_token_type of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.
        Default token type to be used. Possible Values:   - 'CUSTOMER'  - 'PAYMENT_INSTRUMENT'  - 'INSTRUMENT_IDENTIFIER' 

        :return: The default_token_type of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.
        :rtype: str
        """
        return self._default_token_type

    @default_token_type.setter
    def default_token_type(self, default_token_type):
        """
        Sets the default_token_type of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.
        Default token type to be used. Possible Values:   - 'CUSTOMER'  - 'PAYMENT_INSTRUMENT'  - 'INSTRUMENT_IDENTIFIER' 

        :param default_token_type: The default_token_type of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.
        :type: str
        """

        self._default_token_type = default_token_type

    @property
    def location(self):
        """
        Gets the location of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.
        Location where the vault will be stored.  Use 'IDC' (the Indian Data Centre) when merchant is storing token data in India  or 'GDC' (the Global Data Centre) for all other cases.  Possible Values:    - 'IDC'   - 'GDC' 

        :return: The location of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.
        Location where the vault will be stored.  Use 'IDC' (the Indian Data Centre) when merchant is storing token data in India  or 'GDC' (the Global Data Centre) for all other cases.  Possible Values:    - 'IDC'   - 'GDC' 

        :param location: The location of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.
        :type: str
        """

        self._location = location

    @property
    def token_formats(self):
        """
        Gets the token_formats of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.

        :return: The token_formats of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.
        :rtype: TmsTokenFormats
        """
        return self._token_formats

    @token_formats.setter
    def token_formats(self, token_formats):
        """
        Sets the token_formats of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.

        :param token_formats: The token_formats of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.
        :type: TmsTokenFormats
        """

        self._token_formats = token_formats

    @property
    def token_permissions(self):
        """
        Gets the token_permissions of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.

        :return: The token_permissions of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.
        :rtype: TokenPermissions
        """
        return self._token_permissions

    @token_permissions.setter
    def token_permissions(self, token_permissions):
        """
        Sets the token_permissions of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.

        :param token_permissions: The token_permissions of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.
        :type: TokenPermissions
        """

        self._token_permissions = token_permissions

    @property
    def sensitive_privileges(self):
        """
        Gets the sensitive_privileges of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.

        :return: The sensitive_privileges of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.
        :rtype: TmsSensitivePrivileges
        """
        return self._sensitive_privileges

    @sensitive_privileges.setter
    def sensitive_privileges(self, sensitive_privileges):
        """
        Sets the sensitive_privileges of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.

        :param sensitive_privileges: The sensitive_privileges of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.
        :type: TmsSensitivePrivileges
        """

        self._sensitive_privileges = sensitive_privileges

    @property
    def nullify(self):
        """
        Gets the nullify of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.

        :return: The nullify of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.
        :rtype: TmsNullify
        """
        return self._nullify

    @nullify.setter
    def nullify(self, nullify):
        """
        Sets the nullify of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.

        :param nullify: The nullify of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.
        :type: TmsNullify
        """

        self._nullify = nullify

    @property
    def network_token_services(self):
        """
        Gets the network_token_services of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.

        :return: The network_token_services of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.
        :rtype: TmsNetworkTokenServices
        """
        return self._network_token_services

    @network_token_services.setter
    def network_token_services(self, network_token_services):
        """
        Sets the network_token_services of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.

        :param network_token_services: The network_token_services of this CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.
        :type: TmsNetworkTokenServices
        """

        self._network_token_services = network_token_services

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
