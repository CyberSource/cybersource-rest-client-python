# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2011SetupsCommerceSolutions(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token_management': 'InlineResponse2011SetupsPaymentsCardProcessing',
        'account_updater': 'InlineResponse2011SetupsPaymentsCardProcessing',
        'bin_lookup': 'InlineResponse2011SetupsPaymentsCardProcessing'
    }

    attribute_map = {
        'token_management': 'tokenManagement',
        'account_updater': 'accountUpdater',
        'bin_lookup': 'binLookup'
    }

    def __init__(self, token_management=None, account_updater=None, bin_lookup=None):
        """
        InlineResponse2011SetupsCommerceSolutions - a model defined in Swagger
        """

        self._token_management = None
        self._account_updater = None
        self._bin_lookup = None

        if token_management is not None:
          self.token_management = token_management
        if account_updater is not None:
          self.account_updater = account_updater
        if bin_lookup is not None:
          self.bin_lookup = bin_lookup

    @property
    def token_management(self):
        """
        Gets the token_management of this InlineResponse2011SetupsCommerceSolutions.

        :return: The token_management of this InlineResponse2011SetupsCommerceSolutions.
        :rtype: InlineResponse2011SetupsPaymentsCardProcessing
        """
        return self._token_management

    @token_management.setter
    def token_management(self, token_management):
        """
        Sets the token_management of this InlineResponse2011SetupsCommerceSolutions.

        :param token_management: The token_management of this InlineResponse2011SetupsCommerceSolutions.
        :type: InlineResponse2011SetupsPaymentsCardProcessing
        """

        self._token_management = token_management

    @property
    def account_updater(self):
        """
        Gets the account_updater of this InlineResponse2011SetupsCommerceSolutions.

        :return: The account_updater of this InlineResponse2011SetupsCommerceSolutions.
        :rtype: InlineResponse2011SetupsPaymentsCardProcessing
        """
        return self._account_updater

    @account_updater.setter
    def account_updater(self, account_updater):
        """
        Sets the account_updater of this InlineResponse2011SetupsCommerceSolutions.

        :param account_updater: The account_updater of this InlineResponse2011SetupsCommerceSolutions.
        :type: InlineResponse2011SetupsPaymentsCardProcessing
        """

        self._account_updater = account_updater

    @property
    def bin_lookup(self):
        """
        Gets the bin_lookup of this InlineResponse2011SetupsCommerceSolutions.

        :return: The bin_lookup of this InlineResponse2011SetupsCommerceSolutions.
        :rtype: InlineResponse2011SetupsPaymentsCardProcessing
        """
        return self._bin_lookup

    @bin_lookup.setter
    def bin_lookup(self, bin_lookup):
        """
        Sets the bin_lookup of this InlineResponse2011SetupsCommerceSolutions.

        :param bin_lookup: The bin_lookup of this InlineResponse2011SetupsCommerceSolutions.
        :type: InlineResponse2011SetupsPaymentsCardProcessing
        """

        self._bin_lookup = bin_lookup

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2011SetupsCommerceSolutions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
