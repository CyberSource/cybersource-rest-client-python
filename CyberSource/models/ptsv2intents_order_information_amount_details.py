# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class Ptsv2intentsOrderInformationAmountDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_amount': 'str',
        'currency': 'str',
        'discount_amount': 'str',
        'shipping_amount': 'str',
        'shipping_discount_amount': 'str',
        'tax_amount': 'str',
        'insurance_amount': 'str',
        'duty_amount': 'str'
    }

    attribute_map = {
        'total_amount': 'totalAmount',
        'currency': 'currency',
        'discount_amount': 'discountAmount',
        'shipping_amount': 'shippingAmount',
        'shipping_discount_amount': 'shippingDiscountAmount',
        'tax_amount': 'taxAmount',
        'insurance_amount': 'insuranceAmount',
        'duty_amount': 'dutyAmount'
    }

    def __init__(self, total_amount=None, currency=None, discount_amount=None, shipping_amount=None, shipping_discount_amount=None, tax_amount=None, insurance_amount=None, duty_amount=None):
        """
        Ptsv2intentsOrderInformationAmountDetails - a model defined in Swagger
        """

        self._total_amount = None
        self._currency = None
        self._discount_amount = None
        self._shipping_amount = None
        self._shipping_discount_amount = None
        self._tax_amount = None
        self._insurance_amount = None
        self._duty_amount = None

        if total_amount is not None:
          self.total_amount = total_amount
        if currency is not None:
          self.currency = currency
        if discount_amount is not None:
          self.discount_amount = discount_amount
        if shipping_amount is not None:
          self.shipping_amount = shipping_amount
        if shipping_discount_amount is not None:
          self.shipping_discount_amount = shipping_discount_amount
        if tax_amount is not None:
          self.tax_amount = tax_amount
        if insurance_amount is not None:
          self.insurance_amount = insurance_amount
        if duty_amount is not None:
          self.duty_amount = duty_amount

    @property
    def total_amount(self):
        """
        Gets the total_amount of this Ptsv2intentsOrderInformationAmountDetails.
        Grand total for the order. This value cannot be negative. You can include a decimal point (.), but you cannot include any other special characters. CyberSource truncates the amount to the correct number of decimal places 

        :return: The total_amount of this Ptsv2intentsOrderInformationAmountDetails.
        :rtype: str
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """
        Sets the total_amount of this Ptsv2intentsOrderInformationAmountDetails.
        Grand total for the order. This value cannot be negative. You can include a decimal point (.), but you cannot include any other special characters. CyberSource truncates the amount to the correct number of decimal places 

        :param total_amount: The total_amount of this Ptsv2intentsOrderInformationAmountDetails.
        :type: str
        """

        self._total_amount = total_amount

    @property
    def currency(self):
        """
        Gets the currency of this Ptsv2intentsOrderInformationAmountDetails.
        Currency used for the order 

        :return: The currency of this Ptsv2intentsOrderInformationAmountDetails.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this Ptsv2intentsOrderInformationAmountDetails.
        Currency used for the order 

        :param currency: The currency of this Ptsv2intentsOrderInformationAmountDetails.
        :type: str
        """

        self._currency = currency

    @property
    def discount_amount(self):
        """
        Gets the discount_amount of this Ptsv2intentsOrderInformationAmountDetails.
        Discount amount for the transaction.  

        :return: The discount_amount of this Ptsv2intentsOrderInformationAmountDetails.
        :rtype: str
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """
        Sets the discount_amount of this Ptsv2intentsOrderInformationAmountDetails.
        Discount amount for the transaction.  

        :param discount_amount: The discount_amount of this Ptsv2intentsOrderInformationAmountDetails.
        :type: str
        """

        self._discount_amount = discount_amount

    @property
    def shipping_amount(self):
        """
        Gets the shipping_amount of this Ptsv2intentsOrderInformationAmountDetails.
        Aggregate shipping charges for the transactions. 

        :return: The shipping_amount of this Ptsv2intentsOrderInformationAmountDetails.
        :rtype: str
        """
        return self._shipping_amount

    @shipping_amount.setter
    def shipping_amount(self, shipping_amount):
        """
        Sets the shipping_amount of this Ptsv2intentsOrderInformationAmountDetails.
        Aggregate shipping charges for the transactions. 

        :param shipping_amount: The shipping_amount of this Ptsv2intentsOrderInformationAmountDetails.
        :type: str
        """

        self._shipping_amount = shipping_amount

    @property
    def shipping_discount_amount(self):
        """
        Gets the shipping_discount_amount of this Ptsv2intentsOrderInformationAmountDetails.
        Shipping discount amount for the transaction.  

        :return: The shipping_discount_amount of this Ptsv2intentsOrderInformationAmountDetails.
        :rtype: str
        """
        return self._shipping_discount_amount

    @shipping_discount_amount.setter
    def shipping_discount_amount(self, shipping_discount_amount):
        """
        Sets the shipping_discount_amount of this Ptsv2intentsOrderInformationAmountDetails.
        Shipping discount amount for the transaction.  

        :param shipping_discount_amount: The shipping_discount_amount of this Ptsv2intentsOrderInformationAmountDetails.
        :type: str
        """

        self._shipping_discount_amount = shipping_discount_amount

    @property
    def tax_amount(self):
        """
        Gets the tax_amount of this Ptsv2intentsOrderInformationAmountDetails.
        Total tax amount.  

        :return: The tax_amount of this Ptsv2intentsOrderInformationAmountDetails.
        :rtype: str
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """
        Sets the tax_amount of this Ptsv2intentsOrderInformationAmountDetails.
        Total tax amount.  

        :param tax_amount: The tax_amount of this Ptsv2intentsOrderInformationAmountDetails.
        :type: str
        """

        self._tax_amount = tax_amount

    @property
    def insurance_amount(self):
        """
        Gets the insurance_amount of this Ptsv2intentsOrderInformationAmountDetails.
        Amount being charged for the insurance fee.  

        :return: The insurance_amount of this Ptsv2intentsOrderInformationAmountDetails.
        :rtype: str
        """
        return self._insurance_amount

    @insurance_amount.setter
    def insurance_amount(self, insurance_amount):
        """
        Sets the insurance_amount of this Ptsv2intentsOrderInformationAmountDetails.
        Amount being charged for the insurance fee.  

        :param insurance_amount: The insurance_amount of this Ptsv2intentsOrderInformationAmountDetails.
        :type: str
        """

        self._insurance_amount = insurance_amount

    @property
    def duty_amount(self):
        """
        Gets the duty_amount of this Ptsv2intentsOrderInformationAmountDetails.
        Amount being charged as duty amount.             

        :return: The duty_amount of this Ptsv2intentsOrderInformationAmountDetails.
        :rtype: str
        """
        return self._duty_amount

    @duty_amount.setter
    def duty_amount(self, duty_amount):
        """
        Sets the duty_amount of this Ptsv2intentsOrderInformationAmountDetails.
        Amount being charged as duty amount.             

        :param duty_amount: The duty_amount of this Ptsv2intentsOrderInformationAmountDetails.
        :type: str
        """

        self._duty_amount = duty_amount

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Ptsv2intentsOrderInformationAmountDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
