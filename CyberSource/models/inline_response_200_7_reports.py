# coding: utf-8

"""
    CyberSource Flex API

    Simple PAN tokenization service

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2007Reports(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'report_definition_id': 'str',
        'report_name': 'str',
        'report_mime_type': 'str',
        'report_frequency': 'str',
        'status': 'str',
        'report_start_time': 'datetime',
        'report_end_time': 'datetime',
        'timezone': 'str',
        'report_id': 'str',
        'organization_id': 'str',
        'queued_time': 'datetime',
        'report_generating_time': 'datetime',
        'report_completed_time': 'datetime',
        'selected_merchant_group_name': 'str'
    }

    attribute_map = {
        'report_definition_id': 'reportDefinitionId',
        'report_name': 'reportName',
        'report_mime_type': 'reportMimeType',
        'report_frequency': 'reportFrequency',
        'status': 'status',
        'report_start_time': 'reportStartTime',
        'report_end_time': 'reportEndTime',
        'timezone': 'timezone',
        'report_id': 'reportId',
        'organization_id': 'organizationId',
        'queued_time': 'queuedTime',
        'report_generating_time': 'reportGeneratingTime',
        'report_completed_time': 'reportCompletedTime',
        'selected_merchant_group_name': 'selectedMerchantGroupName'
    }

    def __init__(self, report_definition_id=None, report_name=None, report_mime_type=None, report_frequency=None, status=None, report_start_time=None, report_end_time=None, timezone=None, report_id=None, organization_id=None, queued_time=None, report_generating_time=None, report_completed_time=None, selected_merchant_group_name=None):
        """
        InlineResponse2007Reports - a model defined in Swagger
        """

        self._report_definition_id = None
        self._report_name = None
        self._report_mime_type = None
        self._report_frequency = None
        self._status = None
        self._report_start_time = None
        self._report_end_time = None
        self._timezone = None
        self._report_id = None
        self._organization_id = None
        self._queued_time = None
        self._report_generating_time = None
        self._report_completed_time = None
        self._selected_merchant_group_name = None

        if report_definition_id is not None:
          self.report_definition_id = report_definition_id
        if report_name is not None:
          self.report_name = report_name
        if report_mime_type is not None:
          self.report_mime_type = report_mime_type
        if report_frequency is not None:
          self.report_frequency = report_frequency
        if status is not None:
          self.status = status
        if report_start_time is not None:
          self.report_start_time = report_start_time
        if report_end_time is not None:
          self.report_end_time = report_end_time
        if timezone is not None:
          self.timezone = timezone
        if report_id is not None:
          self.report_id = report_id
        if organization_id is not None:
          self.organization_id = organization_id
        if queued_time is not None:
          self.queued_time = queued_time
        if report_generating_time is not None:
          self.report_generating_time = report_generating_time
        if report_completed_time is not None:
          self.report_completed_time = report_completed_time
        if selected_merchant_group_name is not None:
          self.selected_merchant_group_name = selected_merchant_group_name

    @property
    def report_definition_id(self):
        """
        Gets the report_definition_id of this InlineResponse2007Reports.
        Unique Report Identifier of each report type

        :return: The report_definition_id of this InlineResponse2007Reports.
        :rtype: str
        """
        return self._report_definition_id

    @report_definition_id.setter
    def report_definition_id(self, report_definition_id):
        """
        Sets the report_definition_id of this InlineResponse2007Reports.
        Unique Report Identifier of each report type

        :param report_definition_id: The report_definition_id of this InlineResponse2007Reports.
        :type: str
        """

        self._report_definition_id = report_definition_id

    @property
    def report_name(self):
        """
        Gets the report_name of this InlineResponse2007Reports.
        Name of the report specified by merchant while creating the report

        :return: The report_name of this InlineResponse2007Reports.
        :rtype: str
        """
        return self._report_name

    @report_name.setter
    def report_name(self, report_name):
        """
        Sets the report_name of this InlineResponse2007Reports.
        Name of the report specified by merchant while creating the report

        :param report_name: The report_name of this InlineResponse2007Reports.
        :type: str
        """

        self._report_name = report_name

    @property
    def report_mime_type(self):
        """
        Gets the report_mime_type of this InlineResponse2007Reports.
        Format of the report to get generated

        :return: The report_mime_type of this InlineResponse2007Reports.
        :rtype: str
        """
        return self._report_mime_type

    @report_mime_type.setter
    def report_mime_type(self, report_mime_type):
        """
        Sets the report_mime_type of this InlineResponse2007Reports.
        Format of the report to get generated

        :param report_mime_type: The report_mime_type of this InlineResponse2007Reports.
        :type: str
        """
        allowed_values = ["application/xml", "text/csv"]
        if report_mime_type not in allowed_values:
            raise ValueError(
                "Invalid value for `report_mime_type` ({0}), must be one of {1}"
                .format(report_mime_type, allowed_values)
            )

        self._report_mime_type = report_mime_type

    @property
    def report_frequency(self):
        """
        Gets the report_frequency of this InlineResponse2007Reports.
        Frequency of the report to get generated

        :return: The report_frequency of this InlineResponse2007Reports.
        :rtype: str
        """
        return self._report_frequency

    @report_frequency.setter
    def report_frequency(self, report_frequency):
        """
        Sets the report_frequency of this InlineResponse2007Reports.
        Frequency of the report to get generated

        :param report_frequency: The report_frequency of this InlineResponse2007Reports.
        :type: str
        """
        allowed_values = ["DAILY", "WEEKLY", "MONTHLY", "ADHOC"]
        if report_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `report_frequency` ({0}), must be one of {1}"
                .format(report_frequency, allowed_values)
            )

        self._report_frequency = report_frequency

    @property
    def status(self):
        """
        Gets the status of this InlineResponse2007Reports.
        Status of the report

        :return: The status of this InlineResponse2007Reports.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this InlineResponse2007Reports.
        Status of the report

        :param status: The status of this InlineResponse2007Reports.
        :type: str
        """
        allowed_values = ["COMPLETED", "PENDING", "QUEUED", "RUNNING", "ERROR", "NO_DATA"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def report_start_time(self):
        """
        Gets the report_start_time of this InlineResponse2007Reports.
        Specifies the report start time in ISO 8601 format

        :return: The report_start_time of this InlineResponse2007Reports.
        :rtype: datetime
        """
        return self._report_start_time

    @report_start_time.setter
    def report_start_time(self, report_start_time):
        """
        Sets the report_start_time of this InlineResponse2007Reports.
        Specifies the report start time in ISO 8601 format

        :param report_start_time: The report_start_time of this InlineResponse2007Reports.
        :type: datetime
        """

        self._report_start_time = report_start_time

    @property
    def report_end_time(self):
        """
        Gets the report_end_time of this InlineResponse2007Reports.
        Specifies the report end time in ISO 8601 format

        :return: The report_end_time of this InlineResponse2007Reports.
        :rtype: datetime
        """
        return self._report_end_time

    @report_end_time.setter
    def report_end_time(self, report_end_time):
        """
        Sets the report_end_time of this InlineResponse2007Reports.
        Specifies the report end time in ISO 8601 format

        :param report_end_time: The report_end_time of this InlineResponse2007Reports.
        :type: datetime
        """

        self._report_end_time = report_end_time

    @property
    def timezone(self):
        """
        Gets the timezone of this InlineResponse2007Reports.
        Time Zone

        :return: The timezone of this InlineResponse2007Reports.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """
        Sets the timezone of this InlineResponse2007Reports.
        Time Zone

        :param timezone: The timezone of this InlineResponse2007Reports.
        :type: str
        """

        self._timezone = timezone

    @property
    def report_id(self):
        """
        Gets the report_id of this InlineResponse2007Reports.
        Unique identifier generated for every reports

        :return: The report_id of this InlineResponse2007Reports.
        :rtype: str
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """
        Sets the report_id of this InlineResponse2007Reports.
        Unique identifier generated for every reports

        :param report_id: The report_id of this InlineResponse2007Reports.
        :type: str
        """

        self._report_id = report_id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this InlineResponse2007Reports.
        CyberSource Merchant Id

        :return: The organization_id of this InlineResponse2007Reports.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this InlineResponse2007Reports.
        CyberSource Merchant Id

        :param organization_id: The organization_id of this InlineResponse2007Reports.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def queued_time(self):
        """
        Gets the queued_time of this InlineResponse2007Reports.
        Specifies the time of the report in queued  in ISO 8601 format

        :return: The queued_time of this InlineResponse2007Reports.
        :rtype: datetime
        """
        return self._queued_time

    @queued_time.setter
    def queued_time(self, queued_time):
        """
        Sets the queued_time of this InlineResponse2007Reports.
        Specifies the time of the report in queued  in ISO 8601 format

        :param queued_time: The queued_time of this InlineResponse2007Reports.
        :type: datetime
        """

        self._queued_time = queued_time

    @property
    def report_generating_time(self):
        """
        Gets the report_generating_time of this InlineResponse2007Reports.
        Specifies the time of the report started to generate  in ISO 8601 format

        :return: The report_generating_time of this InlineResponse2007Reports.
        :rtype: datetime
        """
        return self._report_generating_time

    @report_generating_time.setter
    def report_generating_time(self, report_generating_time):
        """
        Sets the report_generating_time of this InlineResponse2007Reports.
        Specifies the time of the report started to generate  in ISO 8601 format

        :param report_generating_time: The report_generating_time of this InlineResponse2007Reports.
        :type: datetime
        """

        self._report_generating_time = report_generating_time

    @property
    def report_completed_time(self):
        """
        Gets the report_completed_time of this InlineResponse2007Reports.
        Specifies the time of the report completed the generation  in ISO 8601 format

        :return: The report_completed_time of this InlineResponse2007Reports.
        :rtype: datetime
        """
        return self._report_completed_time

    @report_completed_time.setter
    def report_completed_time(self, report_completed_time):
        """
        Sets the report_completed_time of this InlineResponse2007Reports.
        Specifies the time of the report completed the generation  in ISO 8601 format

        :param report_completed_time: The report_completed_time of this InlineResponse2007Reports.
        :type: datetime
        """

        self._report_completed_time = report_completed_time

    @property
    def selected_merchant_group_name(self):
        """
        Gets the selected_merchant_group_name of this InlineResponse2007Reports.
        Selected name of the group

        :return: The selected_merchant_group_name of this InlineResponse2007Reports.
        :rtype: str
        """
        return self._selected_merchant_group_name

    @selected_merchant_group_name.setter
    def selected_merchant_group_name(self, selected_merchant_group_name):
        """
        Sets the selected_merchant_group_name of this InlineResponse2007Reports.
        Selected name of the group

        :param selected_merchant_group_name: The selected_merchant_group_name of this InlineResponse2007Reports.
        :type: str
        """

        self._selected_merchant_group_name = selected_merchant_group_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2007Reports):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
