# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class InlineResponse200(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'provider': 'str',
        'content': 'list[InlineResponse200Content]'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'provider': 'provider',
        'content': 'content'
    }

    def __init__(self, id=None, type=None, provider=None, content=None):
        """
        InlineResponse200 - a model defined in Swagger
        """

        self._id = None
        self._type = None
        self._provider = None
        self._content = None

        if id is not None:
          self.id = id
        if type is not None:
          self.type = type
        if provider is not None:
          self.provider = provider
        if content is not None:
          self.content = content

    @property
    def id(self):
        """
        Gets the id of this InlineResponse200.
        Unique identifier for the Card Art Asset. 

        :return: The id of this InlineResponse200.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this InlineResponse200.
        Unique identifier for the Card Art Asset. 

        :param id: The id of this InlineResponse200.
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """
        Gets the type of this InlineResponse200.
        The type of Card Art Asset. 

        :return: The type of this InlineResponse200.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this InlineResponse200.
        The type of Card Art Asset. 

        :param type: The type of this InlineResponse200.
        :type: str
        """

        self._type = type

    @property
    def provider(self):
        """
        Gets the provider of this InlineResponse200.
        The provider of the Card Art Asset. 

        :return: The provider of this InlineResponse200.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """
        Sets the provider of this InlineResponse200.
        The provider of the Card Art Asset. 

        :param provider: The provider of this InlineResponse200.
        :type: str
        """

        self._provider = provider

    @property
    def content(self):
        """
        Gets the content of this InlineResponse200.
        Array of content objects representing the Card Art Asset. 

        :return: The content of this InlineResponse200.
        :rtype: list[InlineResponse200Content]
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this InlineResponse200.
        Array of content objects representing the Card Art Asset. 

        :param content: The content of this InlineResponse200.
        :type: list[InlineResponse200Content]
        """

        self._content = content

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
