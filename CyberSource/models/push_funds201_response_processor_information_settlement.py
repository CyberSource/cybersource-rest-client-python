# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class PushFunds201ResponseProcessorInformationSettlement(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'responsibility_flag': 'bool',
        'service_flag': 'str'
    }

    attribute_map = {
        'responsibility_flag': 'responsibilityFlag',
        'service_flag': 'serviceFlag'
    }

    def __init__(self, responsibility_flag=None, service_flag=None):
        """
        PushFunds201ResponseProcessorInformationSettlement - a model defined in Swagger
        """

        self._responsibility_flag = None
        self._service_flag = None

        if responsibility_flag is not None:
          self.responsibility_flag = responsibility_flag
        if service_flag is not None:
          self.service_flag = service_flag

    @property
    def responsibility_flag(self):
        """
        Gets the responsibility_flag of this PushFunds201ResponseProcessorInformationSettlement.
        Settlement Responsibility Flag: VisaNet sets this flag.  This flag is set to true to indicate that VisaNet has settlement responsibility for this transaction. This flag does not indicate the transaction will be settled. 

        :return: The responsibility_flag of this PushFunds201ResponseProcessorInformationSettlement.
        :rtype: bool
        """
        return self._responsibility_flag

    @responsibility_flag.setter
    def responsibility_flag(self, responsibility_flag):
        """
        Sets the responsibility_flag of this PushFunds201ResponseProcessorInformationSettlement.
        Settlement Responsibility Flag: VisaNet sets this flag.  This flag is set to true to indicate that VisaNet has settlement responsibility for this transaction. This flag does not indicate the transaction will be settled. 

        :param responsibility_flag: The responsibility_flag of this PushFunds201ResponseProcessorInformationSettlement.
        :type: bool
        """

        self._responsibility_flag = responsibility_flag

    @property
    def service_flag(self):
        """
        Gets the service_flag of this PushFunds201ResponseProcessorInformationSettlement.
        Settlement Service for the transaction.  Values:  VIP: V.I.P. to decide; or not applicable  INTERNATIONAL_SETTLEMENT: International   NATIONAL_NET_SETTLEMENT: National Net Settlement 

        :return: The service_flag of this PushFunds201ResponseProcessorInformationSettlement.
        :rtype: str
        """
        return self._service_flag

    @service_flag.setter
    def service_flag(self, service_flag):
        """
        Sets the service_flag of this PushFunds201ResponseProcessorInformationSettlement.
        Settlement Service for the transaction.  Values:  VIP: V.I.P. to decide; or not applicable  INTERNATIONAL_SETTLEMENT: International   NATIONAL_NET_SETTLEMENT: National Net Settlement 

        :param service_flag: The service_flag of this PushFunds201ResponseProcessorInformationSettlement.
        :type: str
        """

        self._service_flag = service_flag

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PushFunds201ResponseProcessorInformationSettlement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
